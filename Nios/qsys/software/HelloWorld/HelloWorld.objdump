
HelloWorld.elf:     file format elf32-littlenios2
HelloWorld.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000057ac memsz 0x000057ac flags r-x
    LOAD off    0x000067cc vaddr 0x000157cc paddr 0x00017240 align 2**12
         filesz 0x00001a74 memsz 0x00001a74 flags rw-
    LOAD off    0x00008cb4 vaddr 0x00018cb4 paddr 0x00018cb4 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005544  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00015788  00015788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a74  000157cc  00017240  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018cb4  00018cb4  00008cb4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00018e08  00018e08  00008240  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a10  00000000  00000000  00008268  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000162f6  00000000  00000000  00008c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f7b  00000000  00000000  0001ef6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000068e7  00000000  00000000  00024ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001530  00000000  00000000  0002b7d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000265b  00000000  00000000  0002cd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002f35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00033dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00036949  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003694c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003694f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036950  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00036951  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00036955  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00036959  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003695d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00036966  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003696f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  00036978  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001b  00000000  00000000  0003697c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00037659  00000000  00000000  00036997  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
00015788 l    d  .rodata	00000000 .rodata
000157cc l    d  .rwdata	00000000 .rwdata
00018cb4 l    d  .bss	00000000 .bss
00018e08 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloWorld_bsp//obj/HAL/src/crt0.o
0001028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00010488 l     F .text	00000008 __fp_unlock
0001049c l     F .text	0000019c __sinit.part.1
00010638 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000157cc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000130e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000131f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001321c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013308 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000133e8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000134d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000136a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017230 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000138f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013a28 l     F .text	00000034 alt_dev_reg
000161a0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013d04 l     F .text	0000020c altera_avalon_jtag_uart_irq
00013f10 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000146bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014b30 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014c70 l     F .text	0000003c alt_get_errno
00014cac l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018cdc g     O .bss	00000004 alt_instruction_exception_handler
00012edc g     F .text	00000054 _isatty_r
000135e4 g     F .text	0000007c alt_main
0001031c g     F .text	000000c0 _puts_r
00018d08 g     O .bss	00000100 alt_irq
00012c04 g     F .text	00000060 _lseek_r
00017240 g       *ABS*	00000000 __flash_rwdata_start
00018e08 g       *ABS*	00000000 __alt_heap_start
000121b8 g     F .text	0000005c __sseek
000107d8 g     F .text	00000010 __sinit
00010640 g     F .text	00000068 __sfmoreglue
00013684 g     F .text	00000024 __malloc_unlock
000118a4 g     F .text	0000015c memmove
000107c0 g     F .text	00000018 _cleanup
00015068 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012e80 g     F .text	0000005c _fstat_r
00018cc0 g     O .bss	00000004 errno
00012134 g     F .text	00000008 __seofread
00018cc8 g     O .bss	00000004 alt_argv
0001f200 g       *ABS*	00000000 _gp
00016020 g     O .rwdata	00000180 alt_fd_list
0001508c g     F .text	00000090 alt_find_dev
0001175c g     F .text	00000148 memcpy
00010490 g     F .text	0000000c _cleanup_r
00014bf4 g     F .text	0000007c alt_io_redirect
00015788 g       *ABS*	00000000 __DTOR_END__
000103dc g     F .text	00000014 puts
00015358 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014108 g     F .text	0000021c altera_avalon_jtag_uart_read
00013028 g     F .text	00000064 .hidden __udivsi3
00013344 g     F .text	000000a4 isatty
000152c8 g     F .text	00000090 alt_icache_flush
00018cbc g     O .bss	00000004 __malloc_top_pad
00010828 g     F .text	000004bc __sfvwrite_r
0001208c g     F .text	00000054 _sbrk_r
00012e20 g     F .text	00000060 _read_r
00017228 g     O .rwdata	00000004 alt_max_fd
00012424 g     F .text	000000f0 _fclose_r
000127a0 g     F .text	00000030 fflush
00018cb8 g     O .bss	00000004 __malloc_max_sbrked_mem
00013510 g     F .text	000000d4 lseek
00017208 g     O .rwdata	00000004 _global_impure_ptr
00011b28 g     F .text	00000564 _realloc_r
00018e08 g       *ABS*	00000000 __bss_end
00014a40 g     F .text	000000f0 alt_iic_isr_register
00014f60 g     F .text	00000108 alt_tick
000107f8 g     F .text	00000018 __fp_lock_all
000149f4 g     F .text	0000004c alt_ic_irq_enabled
00014ec4 g     F .text	0000009c alt_alarm_stop
00018cd0 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00015ff8 g     O .rwdata	00000028 alt_dev_null
00014674 g     F .text	00000048 alt_dcache_flush_all
00017240 g       *ABS*	00000000 __ram_rwdata_end
00017220 g     O .rwdata	00000008 alt_dev_list
00013930 g     F .text	000000f8 write
000157cc g       *ABS*	00000000 __ram_rodata_end
00013258 g     F .text	000000b0 fstat
0001308c g     F .text	00000058 .hidden __umodsi3
00018e08 g       *ABS*	00000000 end
00013c44 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00015788 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00017200 g     O .rwdata	00000008 led_data
00014324 g     F .text	00000224 altera_avalon_jtag_uart_write
000107e8 g     F .text	00000004 __sfp_lock_acquire
00011678 g     F .text	000000e4 memchr
000128f4 g     F .text	00000310 _free_r
000155d4 g     F .text	00000180 __call_exitprocs
00017210 g     O .rwdata	00000004 __malloc_sbrk_base
00010244 g     F .text	0000004c _start
00018cd4 g     O .bss	00000004 _alt_tick_rate
00018cd8 g     O .bss	00000004 _alt_nticks
000136e4 g     F .text	000000fc read
00013a94 g     F .text	0000004c alt_sys_init
000154bc g     F .text	00000118 __register_exitproc
00013fb0 g     F .text	00000068 altera_avalon_jtag_uart_close
000157cc g       *ABS*	00000000 __ram_rwdata_start
00015788 g       *ABS*	00000000 __ram_rodata_start
00018ce0 g     O .bss	00000028 __malloc_current_mallinfo
00013ae0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015224 g     F .text	000000a4 alt_get_fd
000123d0 g     F .text	00000054 _close_r
00015440 g     F .text	0000007c memcmp
00013ba0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018e08 g       *ABS*	00000000 __alt_stack_base
00013bf0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001227c g     F .text	00000154 __swsetup_r
000106a8 g     F .text	00000118 __sfp
00015bf0 g     O .rwdata	00000408 __malloc_av_
000107f4 g     F .text	00000004 __sinit_lock_release
000120e0 g     F .text	00000054 __sread
0001511c g     F .text	00000108 alt_find_file
000146f8 g     F .text	000000a4 alt_dev_llist_insert
00013660 g     F .text	00000024 __malloc_lock
00013844 g     F .text	000000b0 sbrk
00012744 g     F .text	0000005c _fflush_r
00018cb4 g       *ABS*	00000000 __bss_start
00011a00 g     F .text	00000128 memset
00010290 g     F .text	0000008c main
00018ccc g     O .bss	00000004 alt_envp
00018cb4 g     O .bss	00000004 __malloc_max_total_mem
00013b40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012214 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00012514 g     F .text	00000014 fclose
00010e6c g     F .text	0000080c _malloc_r
0001722c g     O .rwdata	00000004 alt_errno
00010ce4 g     F .text	000000c4 _fwalk
00012f30 g     F .text	00000084 .hidden __divsi3
000127d0 g     F .text	00000124 _malloc_trim_r
00015788 g       *ABS*	00000000 __CTOR_END__
00015788 g       *ABS*	00000000 __flash_rodata_start
00015788 g       *ABS*	00000000 __DTOR_LIST__
00013a5c g     F .text	00000038 alt_irq_init
000137e0 g     F .text	00000064 alt_release_fd
000153f4 g     F .text	00000014 atexit
0001221c g     F .text	00000060 _write_r
0001720c g     O .rwdata	00000004 _impure_ptr
00018cc4 g     O .bss	00000004 alt_argc
00012528 g     F .text	0000021c __sflush_r
000147fc g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010810 g     F .text	00000018 __fp_unlock_all
00017218 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014890 g     F .text	00000050 alt_ic_isr_register
00017240 g       *ABS*	00000000 _edata
00018e08 g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
00014018 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014968 g     F .text	0000008c alt_ic_irq_disable
0001213c g     F .text	0000007c __swrite
00017214 g     O .rwdata	00000004 __malloc_trim_threshold
00015408 g     F .text	00000038 exit
00010da8 g     F .text	000000c4 _fwalk_reent
00012fb4 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000107ec g     F .text	00000004 __sfp_lock_release
00010000 g       *ABS*	00000000 __alt_mem_onchip_ram
00015754 g     F .text	00000034 _exit
00014548 g     F .text	0000012c alt_alarm_start
00012c64 g     F .text	000001bc __smakebuf_r
000103f0 g     F .text	00000098 strlen
00014d70 g     F .text	00000154 open
0001485c g     F .text	00000034 alt_icache_flush_all
00017234 g     O .rwdata	00000004 alt_priority_mask
000148e0 g     F .text	00000088 alt_ic_irq_enable
00017238 g     O .rwdata	00000008 alt_alarm_list
0001479c g     F .text	00000060 _do_ctors
00013120 g     F .text	000000d0 close
00013450 g     F .text	00000084 alt_load
000107f0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff0e04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a34204 	addi	r2,r2,-29432
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a34204 	addi	r2,r2,-29432
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff0f2c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff0f20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a6b717 	ldw	r2,-25892(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a6b717 	ldw	r2,-25892(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   1024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10250:	00bffd16 	blt	zero,r2,10248 <_gp+0xffff1048>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10254:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10258:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1025c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10260:	d6bc8014 	ori	gp,gp,61952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10268:	10a32d14 	ori	r2,r2,36020

    movhi r3, %hi(__bss_end)
   1026c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10270:	18e38214 	ori	r3,r3,36360

    beq r2, r3, 1f
   10274:	10c00326 	beq	r2,r3,10284 <_start+0x40>

0:
    stw zero, (r2)
   10278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10280:	10fffd36 	bltu	r2,r3,10278 <_gp+0xffff1078>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10284:	00134500 	call	13450 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10288:	00135e40 	call	135e4 <alt_main>

0001028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1028c:	003fff06 	br	1028c <_gp+0xffff108c>

00010290 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
const alt_u8
led_data[8]={0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
int main (void) {
   10290:	defffb04 	addi	sp,sp,-20
   10294:	dfc00415 	stw	ra,16(sp)
   10298:	df000315 	stw	fp,12(sp)
   1029c:	df000304 	addi	fp,sp,12
	int count=0;
   102a0:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 led;
	volatile int i;
	while (1)
	{
		if (count==7)
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	108001d8 	cmpnei	r2,r2,7
   102ac:	1000021e 	bne	r2,zero,102b8 <main+0x28>
		{count=0;}
   102b0:	e03ffd15 	stw	zero,-12(fp)
   102b4:	00000306 	br	102c4 <main+0x34>
		else
		{count++;}
   102b8:	e0bffd17 	ldw	r2,-12(fp)
   102bc:	10800044 	addi	r2,r2,1
   102c0:	e0bffd15 	stw	r2,-12(fp)
		led=led_data[count];
   102c4:	e0fffd17 	ldw	r3,-12(fp)
   102c8:	d0a00004 	addi	r2,gp,-32768
   102cc:	1885883a 	add	r2,r3,r2
   102d0:	10800003 	ldbu	r2,0(r2)
   102d4:	e0bffe05 	stb	r2,-8(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, led);
   102d8:	e0fffe03 	ldbu	r3,-8(fp)
   102dc:	008000b4 	movhi	r2,2
   102e0:	10840004 	addi	r2,r2,4096
   102e4:	10c00035 	stwio	r3,0(r2)
		i = 0;
   102e8:	e03fff15 	stw	zero,-4(fp)
		while (i<500000)
   102ec:	00000306 	br	102fc <main+0x6c>
			i++;
   102f0:	e0bfff17 	ldw	r2,-4(fp)
   102f4:	10800044 	addi	r2,r2,1
   102f8:	e0bfff15 	stw	r2,-4(fp)
		else
		{count++;}
		led=led_data[count];
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, led);
		i = 0;
		while (i<500000)
   102fc:	e0ffff17 	ldw	r3,-4(fp)
   10300:	00800234 	movhi	r2,8
   10304:	10a847c4 	addi	r2,r2,-24289
   10308:	10fff90e 	bge	r2,r3,102f0 <_gp+0xffff10f0>
			i++;
		printf("Hello world!\n");
   1030c:	01000074 	movhi	r4,1
   10310:	2115e204 	addi	r4,r4,22408
   10314:	00103dc0 	call	103dc <puts>
	}
   10318:	003fe206 	br	102a4 <_gp+0xffff10a4>

0001031c <_puts_r>:
   1031c:	defff604 	addi	sp,sp,-40
   10320:	dc000715 	stw	r16,28(sp)
   10324:	2021883a 	mov	r16,r4
   10328:	2809883a 	mov	r4,r5
   1032c:	dc400815 	stw	r17,32(sp)
   10330:	dfc00915 	stw	ra,36(sp)
   10334:	2823883a 	mov	r17,r5
   10338:	00103f00 	call	103f0 <strlen>
   1033c:	10c00044 	addi	r3,r2,1
   10340:	d8800115 	stw	r2,4(sp)
   10344:	00800074 	movhi	r2,1
   10348:	1095e604 	addi	r2,r2,22424
   1034c:	d8800215 	stw	r2,8(sp)
   10350:	00800044 	movi	r2,1
   10354:	d8800315 	stw	r2,12(sp)
   10358:	00800084 	movi	r2,2
   1035c:	dc400015 	stw	r17,0(sp)
   10360:	d8c00615 	stw	r3,24(sp)
   10364:	dec00415 	stw	sp,16(sp)
   10368:	d8800515 	stw	r2,20(sp)
   1036c:	80000226 	beq	r16,zero,10378 <_puts_r+0x5c>
   10370:	80800e17 	ldw	r2,56(r16)
   10374:	10001426 	beq	r2,zero,103c8 <_puts_r+0xac>
   10378:	81400217 	ldw	r5,8(r16)
   1037c:	2880030b 	ldhu	r2,12(r5)
   10380:	10c8000c 	andi	r3,r2,8192
   10384:	1800061e 	bne	r3,zero,103a0 <_puts_r+0x84>
   10388:	29001917 	ldw	r4,100(r5)
   1038c:	00f7ffc4 	movi	r3,-8193
   10390:	10880014 	ori	r2,r2,8192
   10394:	20c6703a 	and	r3,r4,r3
   10398:	2880030d 	sth	r2,12(r5)
   1039c:	28c01915 	stw	r3,100(r5)
   103a0:	d9800404 	addi	r6,sp,16
   103a4:	8009883a 	mov	r4,r16
   103a8:	00108280 	call	10828 <__sfvwrite_r>
   103ac:	1000091e 	bne	r2,zero,103d4 <_puts_r+0xb8>
   103b0:	00800284 	movi	r2,10
   103b4:	dfc00917 	ldw	ra,36(sp)
   103b8:	dc400817 	ldw	r17,32(sp)
   103bc:	dc000717 	ldw	r16,28(sp)
   103c0:	dec00a04 	addi	sp,sp,40
   103c4:	f800283a 	ret
   103c8:	8009883a 	mov	r4,r16
   103cc:	00107d80 	call	107d8 <__sinit>
   103d0:	003fe906 	br	10378 <_gp+0xffff1178>
   103d4:	00bfffc4 	movi	r2,-1
   103d8:	003ff606 	br	103b4 <_gp+0xffff11b4>

000103dc <puts>:
   103dc:	00800074 	movhi	r2,1
   103e0:	109c8304 	addi	r2,r2,29196
   103e4:	200b883a 	mov	r5,r4
   103e8:	11000017 	ldw	r4,0(r2)
   103ec:	001031c1 	jmpi	1031c <_puts_r>

000103f0 <strlen>:
   103f0:	208000cc 	andi	r2,r4,3
   103f4:	10002026 	beq	r2,zero,10478 <strlen+0x88>
   103f8:	20800007 	ldb	r2,0(r4)
   103fc:	10002026 	beq	r2,zero,10480 <strlen+0x90>
   10400:	2005883a 	mov	r2,r4
   10404:	00000206 	br	10410 <strlen+0x20>
   10408:	10c00007 	ldb	r3,0(r2)
   1040c:	18001826 	beq	r3,zero,10470 <strlen+0x80>
   10410:	10800044 	addi	r2,r2,1
   10414:	10c000cc 	andi	r3,r2,3
   10418:	183ffb1e 	bne	r3,zero,10408 <_gp+0xffff1208>
   1041c:	10c00017 	ldw	r3,0(r2)
   10420:	01ffbff4 	movhi	r7,65279
   10424:	39ffbfc4 	addi	r7,r7,-257
   10428:	00ca303a 	nor	r5,zero,r3
   1042c:	01a02074 	movhi	r6,32897
   10430:	19c7883a 	add	r3,r3,r7
   10434:	31a02004 	addi	r6,r6,-32640
   10438:	1946703a 	and	r3,r3,r5
   1043c:	1986703a 	and	r3,r3,r6
   10440:	1800091e 	bne	r3,zero,10468 <strlen+0x78>
   10444:	10800104 	addi	r2,r2,4
   10448:	10c00017 	ldw	r3,0(r2)
   1044c:	19cb883a 	add	r5,r3,r7
   10450:	00c6303a 	nor	r3,zero,r3
   10454:	28c6703a 	and	r3,r5,r3
   10458:	1986703a 	and	r3,r3,r6
   1045c:	183ff926 	beq	r3,zero,10444 <_gp+0xffff1244>
   10460:	00000106 	br	10468 <strlen+0x78>
   10464:	10800044 	addi	r2,r2,1
   10468:	10c00007 	ldb	r3,0(r2)
   1046c:	183ffd1e 	bne	r3,zero,10464 <_gp+0xffff1264>
   10470:	1105c83a 	sub	r2,r2,r4
   10474:	f800283a 	ret
   10478:	2005883a 	mov	r2,r4
   1047c:	003fe706 	br	1041c <_gp+0xffff121c>
   10480:	0005883a 	mov	r2,zero
   10484:	f800283a 	ret

00010488 <__fp_unlock>:
   10488:	0005883a 	mov	r2,zero
   1048c:	f800283a 	ret

00010490 <_cleanup_r>:
   10490:	01400074 	movhi	r5,1
   10494:	29490904 	addi	r5,r5,9252
   10498:	0010da81 	jmpi	10da8 <_fwalk_reent>

0001049c <__sinit.part.1>:
   1049c:	defff704 	addi	sp,sp,-36
   104a0:	00c00074 	movhi	r3,1
   104a4:	dfc00815 	stw	ra,32(sp)
   104a8:	ddc00715 	stw	r23,28(sp)
   104ac:	dd800615 	stw	r22,24(sp)
   104b0:	dd400515 	stw	r21,20(sp)
   104b4:	dd000415 	stw	r20,16(sp)
   104b8:	dcc00315 	stw	r19,12(sp)
   104bc:	dc800215 	stw	r18,8(sp)
   104c0:	dc400115 	stw	r17,4(sp)
   104c4:	dc000015 	stw	r16,0(sp)
   104c8:	18c12404 	addi	r3,r3,1168
   104cc:	24000117 	ldw	r16,4(r4)
   104d0:	20c00f15 	stw	r3,60(r4)
   104d4:	2080bb04 	addi	r2,r4,748
   104d8:	00c000c4 	movi	r3,3
   104dc:	20c0b915 	stw	r3,740(r4)
   104e0:	2080ba15 	stw	r2,744(r4)
   104e4:	2000b815 	stw	zero,736(r4)
   104e8:	05c00204 	movi	r23,8
   104ec:	00800104 	movi	r2,4
   104f0:	2025883a 	mov	r18,r4
   104f4:	b80d883a 	mov	r6,r23
   104f8:	81001704 	addi	r4,r16,92
   104fc:	000b883a 	mov	r5,zero
   10500:	80000015 	stw	zero,0(r16)
   10504:	80000115 	stw	zero,4(r16)
   10508:	80000215 	stw	zero,8(r16)
   1050c:	8080030d 	sth	r2,12(r16)
   10510:	80001915 	stw	zero,100(r16)
   10514:	8000038d 	sth	zero,14(r16)
   10518:	80000415 	stw	zero,16(r16)
   1051c:	80000515 	stw	zero,20(r16)
   10520:	80000615 	stw	zero,24(r16)
   10524:	0011a000 	call	11a00 <memset>
   10528:	05800074 	movhi	r22,1
   1052c:	94400217 	ldw	r17,8(r18)
   10530:	05400074 	movhi	r21,1
   10534:	05000074 	movhi	r20,1
   10538:	04c00074 	movhi	r19,1
   1053c:	b5883804 	addi	r22,r22,8416
   10540:	ad484f04 	addi	r21,r21,8508
   10544:	a5086e04 	addi	r20,r20,8632
   10548:	9cc88504 	addi	r19,r19,8724
   1054c:	85800815 	stw	r22,32(r16)
   10550:	85400915 	stw	r21,36(r16)
   10554:	85000a15 	stw	r20,40(r16)
   10558:	84c00b15 	stw	r19,44(r16)
   1055c:	84000715 	stw	r16,28(r16)
   10560:	00800284 	movi	r2,10
   10564:	8880030d 	sth	r2,12(r17)
   10568:	00800044 	movi	r2,1
   1056c:	b80d883a 	mov	r6,r23
   10570:	89001704 	addi	r4,r17,92
   10574:	000b883a 	mov	r5,zero
   10578:	88000015 	stw	zero,0(r17)
   1057c:	88000115 	stw	zero,4(r17)
   10580:	88000215 	stw	zero,8(r17)
   10584:	88001915 	stw	zero,100(r17)
   10588:	8880038d 	sth	r2,14(r17)
   1058c:	88000415 	stw	zero,16(r17)
   10590:	88000515 	stw	zero,20(r17)
   10594:	88000615 	stw	zero,24(r17)
   10598:	0011a000 	call	11a00 <memset>
   1059c:	94000317 	ldw	r16,12(r18)
   105a0:	00800484 	movi	r2,18
   105a4:	8c400715 	stw	r17,28(r17)
   105a8:	8d800815 	stw	r22,32(r17)
   105ac:	8d400915 	stw	r21,36(r17)
   105b0:	8d000a15 	stw	r20,40(r17)
   105b4:	8cc00b15 	stw	r19,44(r17)
   105b8:	8080030d 	sth	r2,12(r16)
   105bc:	00800084 	movi	r2,2
   105c0:	80000015 	stw	zero,0(r16)
   105c4:	80000115 	stw	zero,4(r16)
   105c8:	80000215 	stw	zero,8(r16)
   105cc:	80001915 	stw	zero,100(r16)
   105d0:	8080038d 	sth	r2,14(r16)
   105d4:	80000415 	stw	zero,16(r16)
   105d8:	80000515 	stw	zero,20(r16)
   105dc:	80000615 	stw	zero,24(r16)
   105e0:	b80d883a 	mov	r6,r23
   105e4:	000b883a 	mov	r5,zero
   105e8:	81001704 	addi	r4,r16,92
   105ec:	0011a000 	call	11a00 <memset>
   105f0:	00800044 	movi	r2,1
   105f4:	84000715 	stw	r16,28(r16)
   105f8:	85800815 	stw	r22,32(r16)
   105fc:	85400915 	stw	r21,36(r16)
   10600:	85000a15 	stw	r20,40(r16)
   10604:	84c00b15 	stw	r19,44(r16)
   10608:	90800e15 	stw	r2,56(r18)
   1060c:	dfc00817 	ldw	ra,32(sp)
   10610:	ddc00717 	ldw	r23,28(sp)
   10614:	dd800617 	ldw	r22,24(sp)
   10618:	dd400517 	ldw	r21,20(sp)
   1061c:	dd000417 	ldw	r20,16(sp)
   10620:	dcc00317 	ldw	r19,12(sp)
   10624:	dc800217 	ldw	r18,8(sp)
   10628:	dc400117 	ldw	r17,4(sp)
   1062c:	dc000017 	ldw	r16,0(sp)
   10630:	dec00904 	addi	sp,sp,36
   10634:	f800283a 	ret

00010638 <__fp_lock>:
   10638:	0005883a 	mov	r2,zero
   1063c:	f800283a 	ret

00010640 <__sfmoreglue>:
   10640:	defffc04 	addi	sp,sp,-16
   10644:	dc400115 	stw	r17,4(sp)
   10648:	2c7fffc4 	addi	r17,r5,-1
   1064c:	8c401a24 	muli	r17,r17,104
   10650:	dc800215 	stw	r18,8(sp)
   10654:	2825883a 	mov	r18,r5
   10658:	89401d04 	addi	r5,r17,116
   1065c:	dc000015 	stw	r16,0(sp)
   10660:	dfc00315 	stw	ra,12(sp)
   10664:	0010e6c0 	call	10e6c <_malloc_r>
   10668:	1021883a 	mov	r16,r2
   1066c:	10000726 	beq	r2,zero,1068c <__sfmoreglue+0x4c>
   10670:	11000304 	addi	r4,r2,12
   10674:	10000015 	stw	zero,0(r2)
   10678:	14800115 	stw	r18,4(r2)
   1067c:	11000215 	stw	r4,8(r2)
   10680:	89801a04 	addi	r6,r17,104
   10684:	000b883a 	mov	r5,zero
   10688:	0011a000 	call	11a00 <memset>
   1068c:	8005883a 	mov	r2,r16
   10690:	dfc00317 	ldw	ra,12(sp)
   10694:	dc800217 	ldw	r18,8(sp)
   10698:	dc400117 	ldw	r17,4(sp)
   1069c:	dc000017 	ldw	r16,0(sp)
   106a0:	dec00404 	addi	sp,sp,16
   106a4:	f800283a 	ret

000106a8 <__sfp>:
   106a8:	defffb04 	addi	sp,sp,-20
   106ac:	dc000015 	stw	r16,0(sp)
   106b0:	04000074 	movhi	r16,1
   106b4:	841c8204 	addi	r16,r16,29192
   106b8:	dcc00315 	stw	r19,12(sp)
   106bc:	2027883a 	mov	r19,r4
   106c0:	81000017 	ldw	r4,0(r16)
   106c4:	dfc00415 	stw	ra,16(sp)
   106c8:	dc800215 	stw	r18,8(sp)
   106cc:	20800e17 	ldw	r2,56(r4)
   106d0:	dc400115 	stw	r17,4(sp)
   106d4:	1000021e 	bne	r2,zero,106e0 <__sfp+0x38>
   106d8:	001049c0 	call	1049c <__sinit.part.1>
   106dc:	81000017 	ldw	r4,0(r16)
   106e0:	2480b804 	addi	r18,r4,736
   106e4:	047fffc4 	movi	r17,-1
   106e8:	91000117 	ldw	r4,4(r18)
   106ec:	94000217 	ldw	r16,8(r18)
   106f0:	213fffc4 	addi	r4,r4,-1
   106f4:	20000a16 	blt	r4,zero,10720 <__sfp+0x78>
   106f8:	8080030f 	ldh	r2,12(r16)
   106fc:	10000c26 	beq	r2,zero,10730 <__sfp+0x88>
   10700:	80c01d04 	addi	r3,r16,116
   10704:	00000206 	br	10710 <__sfp+0x68>
   10708:	18bfe60f 	ldh	r2,-104(r3)
   1070c:	10000826 	beq	r2,zero,10730 <__sfp+0x88>
   10710:	213fffc4 	addi	r4,r4,-1
   10714:	1c3ffd04 	addi	r16,r3,-12
   10718:	18c01a04 	addi	r3,r3,104
   1071c:	247ffa1e 	bne	r4,r17,10708 <_gp+0xffff1508>
   10720:	90800017 	ldw	r2,0(r18)
   10724:	10001d26 	beq	r2,zero,1079c <__sfp+0xf4>
   10728:	1025883a 	mov	r18,r2
   1072c:	003fee06 	br	106e8 <_gp+0xffff14e8>
   10730:	00bfffc4 	movi	r2,-1
   10734:	8080038d 	sth	r2,14(r16)
   10738:	00800044 	movi	r2,1
   1073c:	8080030d 	sth	r2,12(r16)
   10740:	80001915 	stw	zero,100(r16)
   10744:	80000015 	stw	zero,0(r16)
   10748:	80000215 	stw	zero,8(r16)
   1074c:	80000115 	stw	zero,4(r16)
   10750:	80000415 	stw	zero,16(r16)
   10754:	80000515 	stw	zero,20(r16)
   10758:	80000615 	stw	zero,24(r16)
   1075c:	01800204 	movi	r6,8
   10760:	000b883a 	mov	r5,zero
   10764:	81001704 	addi	r4,r16,92
   10768:	0011a000 	call	11a00 <memset>
   1076c:	8005883a 	mov	r2,r16
   10770:	80000c15 	stw	zero,48(r16)
   10774:	80000d15 	stw	zero,52(r16)
   10778:	80001115 	stw	zero,68(r16)
   1077c:	80001215 	stw	zero,72(r16)
   10780:	dfc00417 	ldw	ra,16(sp)
   10784:	dcc00317 	ldw	r19,12(sp)
   10788:	dc800217 	ldw	r18,8(sp)
   1078c:	dc400117 	ldw	r17,4(sp)
   10790:	dc000017 	ldw	r16,0(sp)
   10794:	dec00504 	addi	sp,sp,20
   10798:	f800283a 	ret
   1079c:	01400104 	movi	r5,4
   107a0:	9809883a 	mov	r4,r19
   107a4:	00106400 	call	10640 <__sfmoreglue>
   107a8:	90800015 	stw	r2,0(r18)
   107ac:	103fde1e 	bne	r2,zero,10728 <_gp+0xffff1528>
   107b0:	00800304 	movi	r2,12
   107b4:	98800015 	stw	r2,0(r19)
   107b8:	0005883a 	mov	r2,zero
   107bc:	003ff006 	br	10780 <_gp+0xffff1580>

000107c0 <_cleanup>:
   107c0:	00800074 	movhi	r2,1
   107c4:	109c8204 	addi	r2,r2,29192
   107c8:	11000017 	ldw	r4,0(r2)
   107cc:	01400074 	movhi	r5,1
   107d0:	29490904 	addi	r5,r5,9252
   107d4:	0010da81 	jmpi	10da8 <_fwalk_reent>

000107d8 <__sinit>:
   107d8:	20800e17 	ldw	r2,56(r4)
   107dc:	10000126 	beq	r2,zero,107e4 <__sinit+0xc>
   107e0:	f800283a 	ret
   107e4:	001049c1 	jmpi	1049c <__sinit.part.1>

000107e8 <__sfp_lock_acquire>:
   107e8:	f800283a 	ret

000107ec <__sfp_lock_release>:
   107ec:	f800283a 	ret

000107f0 <__sinit_lock_acquire>:
   107f0:	f800283a 	ret

000107f4 <__sinit_lock_release>:
   107f4:	f800283a 	ret

000107f8 <__fp_lock_all>:
   107f8:	00800074 	movhi	r2,1
   107fc:	109c8304 	addi	r2,r2,29196
   10800:	11000017 	ldw	r4,0(r2)
   10804:	01400074 	movhi	r5,1
   10808:	29418e04 	addi	r5,r5,1592
   1080c:	0010ce41 	jmpi	10ce4 <_fwalk>

00010810 <__fp_unlock_all>:
   10810:	00800074 	movhi	r2,1
   10814:	109c8304 	addi	r2,r2,29196
   10818:	11000017 	ldw	r4,0(r2)
   1081c:	01400074 	movhi	r5,1
   10820:	29412204 	addi	r5,r5,1160
   10824:	0010ce41 	jmpi	10ce4 <_fwalk>

00010828 <__sfvwrite_r>:
   10828:	30800217 	ldw	r2,8(r6)
   1082c:	10006726 	beq	r2,zero,109cc <__sfvwrite_r+0x1a4>
   10830:	28c0030b 	ldhu	r3,12(r5)
   10834:	defff404 	addi	sp,sp,-48
   10838:	dd400715 	stw	r21,28(sp)
   1083c:	dd000615 	stw	r20,24(sp)
   10840:	dc000215 	stw	r16,8(sp)
   10844:	dfc00b15 	stw	ra,44(sp)
   10848:	df000a15 	stw	fp,40(sp)
   1084c:	ddc00915 	stw	r23,36(sp)
   10850:	dd800815 	stw	r22,32(sp)
   10854:	dcc00515 	stw	r19,20(sp)
   10858:	dc800415 	stw	r18,16(sp)
   1085c:	dc400315 	stw	r17,12(sp)
   10860:	1880020c 	andi	r2,r3,8
   10864:	2821883a 	mov	r16,r5
   10868:	202b883a 	mov	r21,r4
   1086c:	3029883a 	mov	r20,r6
   10870:	10002726 	beq	r2,zero,10910 <__sfvwrite_r+0xe8>
   10874:	28800417 	ldw	r2,16(r5)
   10878:	10002526 	beq	r2,zero,10910 <__sfvwrite_r+0xe8>
   1087c:	1880008c 	andi	r2,r3,2
   10880:	a4400017 	ldw	r17,0(r20)
   10884:	10002a26 	beq	r2,zero,10930 <__sfvwrite_r+0x108>
   10888:	05a00034 	movhi	r22,32768
   1088c:	0027883a 	mov	r19,zero
   10890:	0025883a 	mov	r18,zero
   10894:	b5bf0004 	addi	r22,r22,-1024
   10898:	980d883a 	mov	r6,r19
   1089c:	a809883a 	mov	r4,r21
   108a0:	90004626 	beq	r18,zero,109bc <__sfvwrite_r+0x194>
   108a4:	900f883a 	mov	r7,r18
   108a8:	b480022e 	bgeu	r22,r18,108b4 <__sfvwrite_r+0x8c>
   108ac:	01e00034 	movhi	r7,32768
   108b0:	39ff0004 	addi	r7,r7,-1024
   108b4:	80800917 	ldw	r2,36(r16)
   108b8:	81400717 	ldw	r5,28(r16)
   108bc:	103ee83a 	callr	r2
   108c0:	0080570e 	bge	zero,r2,10a20 <__sfvwrite_r+0x1f8>
   108c4:	a0c00217 	ldw	r3,8(r20)
   108c8:	98a7883a 	add	r19,r19,r2
   108cc:	90a5c83a 	sub	r18,r18,r2
   108d0:	1885c83a 	sub	r2,r3,r2
   108d4:	a0800215 	stw	r2,8(r20)
   108d8:	103fef1e 	bne	r2,zero,10898 <_gp+0xffff1698>
   108dc:	0005883a 	mov	r2,zero
   108e0:	dfc00b17 	ldw	ra,44(sp)
   108e4:	df000a17 	ldw	fp,40(sp)
   108e8:	ddc00917 	ldw	r23,36(sp)
   108ec:	dd800817 	ldw	r22,32(sp)
   108f0:	dd400717 	ldw	r21,28(sp)
   108f4:	dd000617 	ldw	r20,24(sp)
   108f8:	dcc00517 	ldw	r19,20(sp)
   108fc:	dc800417 	ldw	r18,16(sp)
   10900:	dc400317 	ldw	r17,12(sp)
   10904:	dc000217 	ldw	r16,8(sp)
   10908:	dec00c04 	addi	sp,sp,48
   1090c:	f800283a 	ret
   10910:	800b883a 	mov	r5,r16
   10914:	a809883a 	mov	r4,r21
   10918:	001227c0 	call	1227c <__swsetup_r>
   1091c:	1000eb1e 	bne	r2,zero,10ccc <__sfvwrite_r+0x4a4>
   10920:	80c0030b 	ldhu	r3,12(r16)
   10924:	a4400017 	ldw	r17,0(r20)
   10928:	1880008c 	andi	r2,r3,2
   1092c:	103fd61e 	bne	r2,zero,10888 <_gp+0xffff1688>
   10930:	1880004c 	andi	r2,r3,1
   10934:	10003f1e 	bne	r2,zero,10a34 <__sfvwrite_r+0x20c>
   10938:	0039883a 	mov	fp,zero
   1093c:	0025883a 	mov	r18,zero
   10940:	90001a26 	beq	r18,zero,109ac <__sfvwrite_r+0x184>
   10944:	1880800c 	andi	r2,r3,512
   10948:	84c00217 	ldw	r19,8(r16)
   1094c:	10002126 	beq	r2,zero,109d4 <__sfvwrite_r+0x1ac>
   10950:	982f883a 	mov	r23,r19
   10954:	94c09336 	bltu	r18,r19,10ba4 <__sfvwrite_r+0x37c>
   10958:	1881200c 	andi	r2,r3,1152
   1095c:	10009e1e 	bne	r2,zero,10bd8 <__sfvwrite_r+0x3b0>
   10960:	81000017 	ldw	r4,0(r16)
   10964:	b80d883a 	mov	r6,r23
   10968:	e00b883a 	mov	r5,fp
   1096c:	00118a40 	call	118a4 <memmove>
   10970:	80c00217 	ldw	r3,8(r16)
   10974:	81000017 	ldw	r4,0(r16)
   10978:	9005883a 	mov	r2,r18
   1097c:	1ce7c83a 	sub	r19,r3,r19
   10980:	25cf883a 	add	r7,r4,r23
   10984:	84c00215 	stw	r19,8(r16)
   10988:	81c00015 	stw	r7,0(r16)
   1098c:	a0c00217 	ldw	r3,8(r20)
   10990:	e0b9883a 	add	fp,fp,r2
   10994:	90a5c83a 	sub	r18,r18,r2
   10998:	18a7c83a 	sub	r19,r3,r2
   1099c:	a4c00215 	stw	r19,8(r20)
   109a0:	983fce26 	beq	r19,zero,108dc <_gp+0xffff16dc>
   109a4:	80c0030b 	ldhu	r3,12(r16)
   109a8:	903fe61e 	bne	r18,zero,10944 <_gp+0xffff1744>
   109ac:	8f000017 	ldw	fp,0(r17)
   109b0:	8c800117 	ldw	r18,4(r17)
   109b4:	8c400204 	addi	r17,r17,8
   109b8:	003fe106 	br	10940 <_gp+0xffff1740>
   109bc:	8cc00017 	ldw	r19,0(r17)
   109c0:	8c800117 	ldw	r18,4(r17)
   109c4:	8c400204 	addi	r17,r17,8
   109c8:	003fb306 	br	10898 <_gp+0xffff1698>
   109cc:	0005883a 	mov	r2,zero
   109d0:	f800283a 	ret
   109d4:	81000017 	ldw	r4,0(r16)
   109d8:	80800417 	ldw	r2,16(r16)
   109dc:	11005736 	bltu	r2,r4,10b3c <__sfvwrite_r+0x314>
   109e0:	85c00517 	ldw	r23,20(r16)
   109e4:	95c05536 	bltu	r18,r23,10b3c <__sfvwrite_r+0x314>
   109e8:	00a00034 	movhi	r2,32768
   109ec:	10bfffc4 	addi	r2,r2,-1
   109f0:	9009883a 	mov	r4,r18
   109f4:	1480012e 	bgeu	r2,r18,109fc <__sfvwrite_r+0x1d4>
   109f8:	1009883a 	mov	r4,r2
   109fc:	b80b883a 	mov	r5,r23
   10a00:	0012f300 	call	12f30 <__divsi3>
   10a04:	15cf383a 	mul	r7,r2,r23
   10a08:	81400717 	ldw	r5,28(r16)
   10a0c:	80800917 	ldw	r2,36(r16)
   10a10:	e00d883a 	mov	r6,fp
   10a14:	a809883a 	mov	r4,r21
   10a18:	103ee83a 	callr	r2
   10a1c:	00bfdb16 	blt	zero,r2,1098c <_gp+0xffff178c>
   10a20:	8080030b 	ldhu	r2,12(r16)
   10a24:	10801014 	ori	r2,r2,64
   10a28:	8080030d 	sth	r2,12(r16)
   10a2c:	00bfffc4 	movi	r2,-1
   10a30:	003fab06 	br	108e0 <_gp+0xffff16e0>
   10a34:	0027883a 	mov	r19,zero
   10a38:	0011883a 	mov	r8,zero
   10a3c:	0039883a 	mov	fp,zero
   10a40:	0025883a 	mov	r18,zero
   10a44:	90001f26 	beq	r18,zero,10ac4 <__sfvwrite_r+0x29c>
   10a48:	40005a26 	beq	r8,zero,10bb4 <__sfvwrite_r+0x38c>
   10a4c:	982d883a 	mov	r22,r19
   10a50:	94c0012e 	bgeu	r18,r19,10a58 <__sfvwrite_r+0x230>
   10a54:	902d883a 	mov	r22,r18
   10a58:	81000017 	ldw	r4,0(r16)
   10a5c:	80800417 	ldw	r2,16(r16)
   10a60:	b02f883a 	mov	r23,r22
   10a64:	81c00517 	ldw	r7,20(r16)
   10a68:	1100032e 	bgeu	r2,r4,10a78 <__sfvwrite_r+0x250>
   10a6c:	80c00217 	ldw	r3,8(r16)
   10a70:	38c7883a 	add	r3,r7,r3
   10a74:	1d801816 	blt	r3,r22,10ad8 <__sfvwrite_r+0x2b0>
   10a78:	b1c03e16 	blt	r22,r7,10b74 <__sfvwrite_r+0x34c>
   10a7c:	80800917 	ldw	r2,36(r16)
   10a80:	81400717 	ldw	r5,28(r16)
   10a84:	e00d883a 	mov	r6,fp
   10a88:	da000115 	stw	r8,4(sp)
   10a8c:	a809883a 	mov	r4,r21
   10a90:	103ee83a 	callr	r2
   10a94:	102f883a 	mov	r23,r2
   10a98:	da000117 	ldw	r8,4(sp)
   10a9c:	00bfe00e 	bge	zero,r2,10a20 <_gp+0xffff1820>
   10aa0:	9de7c83a 	sub	r19,r19,r23
   10aa4:	98001f26 	beq	r19,zero,10b24 <__sfvwrite_r+0x2fc>
   10aa8:	a0800217 	ldw	r2,8(r20)
   10aac:	e5f9883a 	add	fp,fp,r23
   10ab0:	95e5c83a 	sub	r18,r18,r23
   10ab4:	15efc83a 	sub	r23,r2,r23
   10ab8:	a5c00215 	stw	r23,8(r20)
   10abc:	b83f8726 	beq	r23,zero,108dc <_gp+0xffff16dc>
   10ac0:	903fe11e 	bne	r18,zero,10a48 <_gp+0xffff1848>
   10ac4:	8f000017 	ldw	fp,0(r17)
   10ac8:	8c800117 	ldw	r18,4(r17)
   10acc:	0011883a 	mov	r8,zero
   10ad0:	8c400204 	addi	r17,r17,8
   10ad4:	003fdb06 	br	10a44 <_gp+0xffff1844>
   10ad8:	180d883a 	mov	r6,r3
   10adc:	e00b883a 	mov	r5,fp
   10ae0:	da000115 	stw	r8,4(sp)
   10ae4:	d8c00015 	stw	r3,0(sp)
   10ae8:	00118a40 	call	118a4 <memmove>
   10aec:	d8c00017 	ldw	r3,0(sp)
   10af0:	80800017 	ldw	r2,0(r16)
   10af4:	800b883a 	mov	r5,r16
   10af8:	a809883a 	mov	r4,r21
   10afc:	10c5883a 	add	r2,r2,r3
   10b00:	80800015 	stw	r2,0(r16)
   10b04:	d8c00015 	stw	r3,0(sp)
   10b08:	00127440 	call	12744 <_fflush_r>
   10b0c:	d8c00017 	ldw	r3,0(sp)
   10b10:	da000117 	ldw	r8,4(sp)
   10b14:	103fc21e 	bne	r2,zero,10a20 <_gp+0xffff1820>
   10b18:	182f883a 	mov	r23,r3
   10b1c:	9de7c83a 	sub	r19,r19,r23
   10b20:	983fe11e 	bne	r19,zero,10aa8 <_gp+0xffff18a8>
   10b24:	800b883a 	mov	r5,r16
   10b28:	a809883a 	mov	r4,r21
   10b2c:	00127440 	call	12744 <_fflush_r>
   10b30:	103fbb1e 	bne	r2,zero,10a20 <_gp+0xffff1820>
   10b34:	0011883a 	mov	r8,zero
   10b38:	003fdb06 	br	10aa8 <_gp+0xffff18a8>
   10b3c:	94c0012e 	bgeu	r18,r19,10b44 <__sfvwrite_r+0x31c>
   10b40:	9027883a 	mov	r19,r18
   10b44:	980d883a 	mov	r6,r19
   10b48:	e00b883a 	mov	r5,fp
   10b4c:	00118a40 	call	118a4 <memmove>
   10b50:	80800217 	ldw	r2,8(r16)
   10b54:	80c00017 	ldw	r3,0(r16)
   10b58:	14c5c83a 	sub	r2,r2,r19
   10b5c:	1cc7883a 	add	r3,r3,r19
   10b60:	80800215 	stw	r2,8(r16)
   10b64:	80c00015 	stw	r3,0(r16)
   10b68:	10004326 	beq	r2,zero,10c78 <__sfvwrite_r+0x450>
   10b6c:	9805883a 	mov	r2,r19
   10b70:	003f8606 	br	1098c <_gp+0xffff178c>
   10b74:	b00d883a 	mov	r6,r22
   10b78:	e00b883a 	mov	r5,fp
   10b7c:	da000115 	stw	r8,4(sp)
   10b80:	00118a40 	call	118a4 <memmove>
   10b84:	80800217 	ldw	r2,8(r16)
   10b88:	80c00017 	ldw	r3,0(r16)
   10b8c:	da000117 	ldw	r8,4(sp)
   10b90:	1585c83a 	sub	r2,r2,r22
   10b94:	1dad883a 	add	r22,r3,r22
   10b98:	80800215 	stw	r2,8(r16)
   10b9c:	85800015 	stw	r22,0(r16)
   10ba0:	003fbf06 	br	10aa0 <_gp+0xffff18a0>
   10ba4:	81000017 	ldw	r4,0(r16)
   10ba8:	9027883a 	mov	r19,r18
   10bac:	902f883a 	mov	r23,r18
   10bb0:	003f6c06 	br	10964 <_gp+0xffff1764>
   10bb4:	900d883a 	mov	r6,r18
   10bb8:	01400284 	movi	r5,10
   10bbc:	e009883a 	mov	r4,fp
   10bc0:	00116780 	call	11678 <memchr>
   10bc4:	10003e26 	beq	r2,zero,10cc0 <__sfvwrite_r+0x498>
   10bc8:	10800044 	addi	r2,r2,1
   10bcc:	1727c83a 	sub	r19,r2,fp
   10bd0:	02000044 	movi	r8,1
   10bd4:	003f9d06 	br	10a4c <_gp+0xffff184c>
   10bd8:	80800517 	ldw	r2,20(r16)
   10bdc:	81400417 	ldw	r5,16(r16)
   10be0:	81c00017 	ldw	r7,0(r16)
   10be4:	10a7883a 	add	r19,r2,r2
   10be8:	9885883a 	add	r2,r19,r2
   10bec:	1026d7fa 	srli	r19,r2,31
   10bf0:	396dc83a 	sub	r22,r7,r5
   10bf4:	b1000044 	addi	r4,r22,1
   10bf8:	9885883a 	add	r2,r19,r2
   10bfc:	1027d07a 	srai	r19,r2,1
   10c00:	2485883a 	add	r2,r4,r18
   10c04:	980d883a 	mov	r6,r19
   10c08:	9880022e 	bgeu	r19,r2,10c14 <__sfvwrite_r+0x3ec>
   10c0c:	1027883a 	mov	r19,r2
   10c10:	100d883a 	mov	r6,r2
   10c14:	18c1000c 	andi	r3,r3,1024
   10c18:	18001c26 	beq	r3,zero,10c8c <__sfvwrite_r+0x464>
   10c1c:	300b883a 	mov	r5,r6
   10c20:	a809883a 	mov	r4,r21
   10c24:	0010e6c0 	call	10e6c <_malloc_r>
   10c28:	102f883a 	mov	r23,r2
   10c2c:	10002926 	beq	r2,zero,10cd4 <__sfvwrite_r+0x4ac>
   10c30:	81400417 	ldw	r5,16(r16)
   10c34:	b00d883a 	mov	r6,r22
   10c38:	1009883a 	mov	r4,r2
   10c3c:	001175c0 	call	1175c <memcpy>
   10c40:	8080030b 	ldhu	r2,12(r16)
   10c44:	00fedfc4 	movi	r3,-1153
   10c48:	10c4703a 	and	r2,r2,r3
   10c4c:	10802014 	ori	r2,r2,128
   10c50:	8080030d 	sth	r2,12(r16)
   10c54:	bd89883a 	add	r4,r23,r22
   10c58:	9d8fc83a 	sub	r7,r19,r22
   10c5c:	85c00415 	stw	r23,16(r16)
   10c60:	84c00515 	stw	r19,20(r16)
   10c64:	81000015 	stw	r4,0(r16)
   10c68:	9027883a 	mov	r19,r18
   10c6c:	81c00215 	stw	r7,8(r16)
   10c70:	902f883a 	mov	r23,r18
   10c74:	003f3b06 	br	10964 <_gp+0xffff1764>
   10c78:	800b883a 	mov	r5,r16
   10c7c:	a809883a 	mov	r4,r21
   10c80:	00127440 	call	12744 <_fflush_r>
   10c84:	103fb926 	beq	r2,zero,10b6c <_gp+0xffff196c>
   10c88:	003f6506 	br	10a20 <_gp+0xffff1820>
   10c8c:	a809883a 	mov	r4,r21
   10c90:	0011b280 	call	11b28 <_realloc_r>
   10c94:	102f883a 	mov	r23,r2
   10c98:	103fee1e 	bne	r2,zero,10c54 <_gp+0xffff1a54>
   10c9c:	81400417 	ldw	r5,16(r16)
   10ca0:	a809883a 	mov	r4,r21
   10ca4:	00128f40 	call	128f4 <_free_r>
   10ca8:	8080030b 	ldhu	r2,12(r16)
   10cac:	00ffdfc4 	movi	r3,-129
   10cb0:	1884703a 	and	r2,r3,r2
   10cb4:	00c00304 	movi	r3,12
   10cb8:	a8c00015 	stw	r3,0(r21)
   10cbc:	003f5906 	br	10a24 <_gp+0xffff1824>
   10cc0:	94c00044 	addi	r19,r18,1
   10cc4:	02000044 	movi	r8,1
   10cc8:	003f6006 	br	10a4c <_gp+0xffff184c>
   10ccc:	00bfffc4 	movi	r2,-1
   10cd0:	003f0306 	br	108e0 <_gp+0xffff16e0>
   10cd4:	00800304 	movi	r2,12
   10cd8:	a8800015 	stw	r2,0(r21)
   10cdc:	8080030b 	ldhu	r2,12(r16)
   10ce0:	003f5006 	br	10a24 <_gp+0xffff1824>

00010ce4 <_fwalk>:
   10ce4:	defff704 	addi	sp,sp,-36
   10ce8:	dd000415 	stw	r20,16(sp)
   10cec:	dfc00815 	stw	ra,32(sp)
   10cf0:	ddc00715 	stw	r23,28(sp)
   10cf4:	dd800615 	stw	r22,24(sp)
   10cf8:	dd400515 	stw	r21,20(sp)
   10cfc:	dcc00315 	stw	r19,12(sp)
   10d00:	dc800215 	stw	r18,8(sp)
   10d04:	dc400115 	stw	r17,4(sp)
   10d08:	dc000015 	stw	r16,0(sp)
   10d0c:	2500b804 	addi	r20,r4,736
   10d10:	a0002326 	beq	r20,zero,10da0 <_fwalk+0xbc>
   10d14:	282b883a 	mov	r21,r5
   10d18:	002f883a 	mov	r23,zero
   10d1c:	05800044 	movi	r22,1
   10d20:	04ffffc4 	movi	r19,-1
   10d24:	a4400117 	ldw	r17,4(r20)
   10d28:	a4800217 	ldw	r18,8(r20)
   10d2c:	8c7fffc4 	addi	r17,r17,-1
   10d30:	88000d16 	blt	r17,zero,10d68 <_fwalk+0x84>
   10d34:	94000304 	addi	r16,r18,12
   10d38:	94800384 	addi	r18,r18,14
   10d3c:	8080000b 	ldhu	r2,0(r16)
   10d40:	8c7fffc4 	addi	r17,r17,-1
   10d44:	813ffd04 	addi	r4,r16,-12
   10d48:	b080042e 	bgeu	r22,r2,10d5c <_fwalk+0x78>
   10d4c:	9080000f 	ldh	r2,0(r18)
   10d50:	14c00226 	beq	r2,r19,10d5c <_fwalk+0x78>
   10d54:	a83ee83a 	callr	r21
   10d58:	b8aeb03a 	or	r23,r23,r2
   10d5c:	84001a04 	addi	r16,r16,104
   10d60:	94801a04 	addi	r18,r18,104
   10d64:	8cfff51e 	bne	r17,r19,10d3c <_gp+0xffff1b3c>
   10d68:	a5000017 	ldw	r20,0(r20)
   10d6c:	a03fed1e 	bne	r20,zero,10d24 <_gp+0xffff1b24>
   10d70:	b805883a 	mov	r2,r23
   10d74:	dfc00817 	ldw	ra,32(sp)
   10d78:	ddc00717 	ldw	r23,28(sp)
   10d7c:	dd800617 	ldw	r22,24(sp)
   10d80:	dd400517 	ldw	r21,20(sp)
   10d84:	dd000417 	ldw	r20,16(sp)
   10d88:	dcc00317 	ldw	r19,12(sp)
   10d8c:	dc800217 	ldw	r18,8(sp)
   10d90:	dc400117 	ldw	r17,4(sp)
   10d94:	dc000017 	ldw	r16,0(sp)
   10d98:	dec00904 	addi	sp,sp,36
   10d9c:	f800283a 	ret
   10da0:	002f883a 	mov	r23,zero
   10da4:	003ff206 	br	10d70 <_gp+0xffff1b70>

00010da8 <_fwalk_reent>:
   10da8:	defff704 	addi	sp,sp,-36
   10dac:	dd000415 	stw	r20,16(sp)
   10db0:	dfc00815 	stw	ra,32(sp)
   10db4:	ddc00715 	stw	r23,28(sp)
   10db8:	dd800615 	stw	r22,24(sp)
   10dbc:	dd400515 	stw	r21,20(sp)
   10dc0:	dcc00315 	stw	r19,12(sp)
   10dc4:	dc800215 	stw	r18,8(sp)
   10dc8:	dc400115 	stw	r17,4(sp)
   10dcc:	dc000015 	stw	r16,0(sp)
   10dd0:	2500b804 	addi	r20,r4,736
   10dd4:	a0002326 	beq	r20,zero,10e64 <_fwalk_reent+0xbc>
   10dd8:	282b883a 	mov	r21,r5
   10ddc:	2027883a 	mov	r19,r4
   10de0:	002f883a 	mov	r23,zero
   10de4:	05800044 	movi	r22,1
   10de8:	04bfffc4 	movi	r18,-1
   10dec:	a4400117 	ldw	r17,4(r20)
   10df0:	a4000217 	ldw	r16,8(r20)
   10df4:	8c7fffc4 	addi	r17,r17,-1
   10df8:	88000c16 	blt	r17,zero,10e2c <_fwalk_reent+0x84>
   10dfc:	84000304 	addi	r16,r16,12
   10e00:	8080000b 	ldhu	r2,0(r16)
   10e04:	8c7fffc4 	addi	r17,r17,-1
   10e08:	817ffd04 	addi	r5,r16,-12
   10e0c:	b080052e 	bgeu	r22,r2,10e24 <_fwalk_reent+0x7c>
   10e10:	8080008f 	ldh	r2,2(r16)
   10e14:	9809883a 	mov	r4,r19
   10e18:	14800226 	beq	r2,r18,10e24 <_fwalk_reent+0x7c>
   10e1c:	a83ee83a 	callr	r21
   10e20:	b8aeb03a 	or	r23,r23,r2
   10e24:	84001a04 	addi	r16,r16,104
   10e28:	8cbff51e 	bne	r17,r18,10e00 <_gp+0xffff1c00>
   10e2c:	a5000017 	ldw	r20,0(r20)
   10e30:	a03fee1e 	bne	r20,zero,10dec <_gp+0xffff1bec>
   10e34:	b805883a 	mov	r2,r23
   10e38:	dfc00817 	ldw	ra,32(sp)
   10e3c:	ddc00717 	ldw	r23,28(sp)
   10e40:	dd800617 	ldw	r22,24(sp)
   10e44:	dd400517 	ldw	r21,20(sp)
   10e48:	dd000417 	ldw	r20,16(sp)
   10e4c:	dcc00317 	ldw	r19,12(sp)
   10e50:	dc800217 	ldw	r18,8(sp)
   10e54:	dc400117 	ldw	r17,4(sp)
   10e58:	dc000017 	ldw	r16,0(sp)
   10e5c:	dec00904 	addi	sp,sp,36
   10e60:	f800283a 	ret
   10e64:	002f883a 	mov	r23,zero
   10e68:	003ff206 	br	10e34 <_gp+0xffff1c34>

00010e6c <_malloc_r>:
   10e6c:	defff504 	addi	sp,sp,-44
   10e70:	dc800315 	stw	r18,12(sp)
   10e74:	dfc00a15 	stw	ra,40(sp)
   10e78:	df000915 	stw	fp,36(sp)
   10e7c:	ddc00815 	stw	r23,32(sp)
   10e80:	dd800715 	stw	r22,28(sp)
   10e84:	dd400615 	stw	r21,24(sp)
   10e88:	dd000515 	stw	r20,20(sp)
   10e8c:	dcc00415 	stw	r19,16(sp)
   10e90:	dc400215 	stw	r17,8(sp)
   10e94:	dc000115 	stw	r16,4(sp)
   10e98:	288002c4 	addi	r2,r5,11
   10e9c:	00c00584 	movi	r3,22
   10ea0:	2025883a 	mov	r18,r4
   10ea4:	18807f2e 	bgeu	r3,r2,110a4 <_malloc_r+0x238>
   10ea8:	047ffe04 	movi	r17,-8
   10eac:	1462703a 	and	r17,r2,r17
   10eb0:	8800a316 	blt	r17,zero,11140 <_malloc_r+0x2d4>
   10eb4:	8940a236 	bltu	r17,r5,11140 <_malloc_r+0x2d4>
   10eb8:	00136600 	call	13660 <__malloc_lock>
   10ebc:	00807dc4 	movi	r2,503
   10ec0:	1441e92e 	bgeu	r2,r17,11668 <_malloc_r+0x7fc>
   10ec4:	8804d27a 	srli	r2,r17,9
   10ec8:	1000a126 	beq	r2,zero,11150 <_malloc_r+0x2e4>
   10ecc:	00c00104 	movi	r3,4
   10ed0:	18811e36 	bltu	r3,r2,1134c <_malloc_r+0x4e0>
   10ed4:	8804d1ba 	srli	r2,r17,6
   10ed8:	12000e44 	addi	r8,r2,57
   10edc:	11c00e04 	addi	r7,r2,56
   10ee0:	4209883a 	add	r4,r8,r8
   10ee4:	04c00074 	movhi	r19,1
   10ee8:	2109883a 	add	r4,r4,r4
   10eec:	9cd6fc04 	addi	r19,r19,23536
   10ef0:	2109883a 	add	r4,r4,r4
   10ef4:	9909883a 	add	r4,r19,r4
   10ef8:	24000117 	ldw	r16,4(r4)
   10efc:	213ffe04 	addi	r4,r4,-8
   10f00:	24009726 	beq	r4,r16,11160 <_malloc_r+0x2f4>
   10f04:	80800117 	ldw	r2,4(r16)
   10f08:	01bfff04 	movi	r6,-4
   10f0c:	014003c4 	movi	r5,15
   10f10:	1184703a 	and	r2,r2,r6
   10f14:	1447c83a 	sub	r3,r2,r17
   10f18:	28c00716 	blt	r5,r3,10f38 <_malloc_r+0xcc>
   10f1c:	1800920e 	bge	r3,zero,11168 <_malloc_r+0x2fc>
   10f20:	84000317 	ldw	r16,12(r16)
   10f24:	24008e26 	beq	r4,r16,11160 <_malloc_r+0x2f4>
   10f28:	80800117 	ldw	r2,4(r16)
   10f2c:	1184703a 	and	r2,r2,r6
   10f30:	1447c83a 	sub	r3,r2,r17
   10f34:	28fff90e 	bge	r5,r3,10f1c <_gp+0xffff1d1c>
   10f38:	3809883a 	mov	r4,r7
   10f3c:	01800074 	movhi	r6,1
   10f40:	9c000417 	ldw	r16,16(r19)
   10f44:	3196fc04 	addi	r6,r6,23536
   10f48:	32000204 	addi	r8,r6,8
   10f4c:	82013426 	beq	r16,r8,11420 <_malloc_r+0x5b4>
   10f50:	80c00117 	ldw	r3,4(r16)
   10f54:	00bfff04 	movi	r2,-4
   10f58:	188e703a 	and	r7,r3,r2
   10f5c:	3c45c83a 	sub	r2,r7,r17
   10f60:	00c003c4 	movi	r3,15
   10f64:	18811f16 	blt	r3,r2,113e4 <_malloc_r+0x578>
   10f68:	32000515 	stw	r8,20(r6)
   10f6c:	32000415 	stw	r8,16(r6)
   10f70:	10007f0e 	bge	r2,zero,11170 <_malloc_r+0x304>
   10f74:	00807fc4 	movi	r2,511
   10f78:	11c0fd36 	bltu	r2,r7,11370 <_malloc_r+0x504>
   10f7c:	3806d0fa 	srli	r3,r7,3
   10f80:	01c00044 	movi	r7,1
   10f84:	30800117 	ldw	r2,4(r6)
   10f88:	19400044 	addi	r5,r3,1
   10f8c:	294b883a 	add	r5,r5,r5
   10f90:	1807d0ba 	srai	r3,r3,2
   10f94:	294b883a 	add	r5,r5,r5
   10f98:	294b883a 	add	r5,r5,r5
   10f9c:	298b883a 	add	r5,r5,r6
   10fa0:	38c6983a 	sll	r3,r7,r3
   10fa4:	29c00017 	ldw	r7,0(r5)
   10fa8:	2a7ffe04 	addi	r9,r5,-8
   10fac:	1886b03a 	or	r3,r3,r2
   10fb0:	82400315 	stw	r9,12(r16)
   10fb4:	81c00215 	stw	r7,8(r16)
   10fb8:	30c00115 	stw	r3,4(r6)
   10fbc:	2c000015 	stw	r16,0(r5)
   10fc0:	3c000315 	stw	r16,12(r7)
   10fc4:	2005d0ba 	srai	r2,r4,2
   10fc8:	01400044 	movi	r5,1
   10fcc:	288a983a 	sll	r5,r5,r2
   10fd0:	19406f36 	bltu	r3,r5,11190 <_malloc_r+0x324>
   10fd4:	28c4703a 	and	r2,r5,r3
   10fd8:	10000a1e 	bne	r2,zero,11004 <_malloc_r+0x198>
   10fdc:	00bfff04 	movi	r2,-4
   10fe0:	294b883a 	add	r5,r5,r5
   10fe4:	2088703a 	and	r4,r4,r2
   10fe8:	28c4703a 	and	r2,r5,r3
   10fec:	21000104 	addi	r4,r4,4
   10ff0:	1000041e 	bne	r2,zero,11004 <_malloc_r+0x198>
   10ff4:	294b883a 	add	r5,r5,r5
   10ff8:	28c4703a 	and	r2,r5,r3
   10ffc:	21000104 	addi	r4,r4,4
   11000:	103ffc26 	beq	r2,zero,10ff4 <_gp+0xffff1df4>
   11004:	02bfff04 	movi	r10,-4
   11008:	024003c4 	movi	r9,15
   1100c:	21800044 	addi	r6,r4,1
   11010:	318d883a 	add	r6,r6,r6
   11014:	318d883a 	add	r6,r6,r6
   11018:	318d883a 	add	r6,r6,r6
   1101c:	998d883a 	add	r6,r19,r6
   11020:	333ffe04 	addi	r12,r6,-8
   11024:	2017883a 	mov	r11,r4
   11028:	31800104 	addi	r6,r6,4
   1102c:	34000017 	ldw	r16,0(r6)
   11030:	31fffd04 	addi	r7,r6,-12
   11034:	81c0041e 	bne	r16,r7,11048 <_malloc_r+0x1dc>
   11038:	0000fb06 	br	11428 <_malloc_r+0x5bc>
   1103c:	1801030e 	bge	r3,zero,1144c <_malloc_r+0x5e0>
   11040:	84000317 	ldw	r16,12(r16)
   11044:	81c0f826 	beq	r16,r7,11428 <_malloc_r+0x5bc>
   11048:	80800117 	ldw	r2,4(r16)
   1104c:	1284703a 	and	r2,r2,r10
   11050:	1447c83a 	sub	r3,r2,r17
   11054:	48fff90e 	bge	r9,r3,1103c <_gp+0xffff1e3c>
   11058:	80800317 	ldw	r2,12(r16)
   1105c:	81000217 	ldw	r4,8(r16)
   11060:	89400054 	ori	r5,r17,1
   11064:	81400115 	stw	r5,4(r16)
   11068:	20800315 	stw	r2,12(r4)
   1106c:	11000215 	stw	r4,8(r2)
   11070:	8463883a 	add	r17,r16,r17
   11074:	9c400515 	stw	r17,20(r19)
   11078:	9c400415 	stw	r17,16(r19)
   1107c:	18800054 	ori	r2,r3,1
   11080:	88800115 	stw	r2,4(r17)
   11084:	8a000315 	stw	r8,12(r17)
   11088:	8a000215 	stw	r8,8(r17)
   1108c:	88e3883a 	add	r17,r17,r3
   11090:	88c00015 	stw	r3,0(r17)
   11094:	9009883a 	mov	r4,r18
   11098:	00136840 	call	13684 <__malloc_unlock>
   1109c:	80800204 	addi	r2,r16,8
   110a0:	00001b06 	br	11110 <_malloc_r+0x2a4>
   110a4:	04400404 	movi	r17,16
   110a8:	89402536 	bltu	r17,r5,11140 <_malloc_r+0x2d4>
   110ac:	00136600 	call	13660 <__malloc_lock>
   110b0:	00800184 	movi	r2,6
   110b4:	01000084 	movi	r4,2
   110b8:	04c00074 	movhi	r19,1
   110bc:	1085883a 	add	r2,r2,r2
   110c0:	9cd6fc04 	addi	r19,r19,23536
   110c4:	1085883a 	add	r2,r2,r2
   110c8:	9885883a 	add	r2,r19,r2
   110cc:	14000117 	ldw	r16,4(r2)
   110d0:	10fffe04 	addi	r3,r2,-8
   110d4:	80c0d926 	beq	r16,r3,1143c <_malloc_r+0x5d0>
   110d8:	80c00117 	ldw	r3,4(r16)
   110dc:	81000317 	ldw	r4,12(r16)
   110e0:	00bfff04 	movi	r2,-4
   110e4:	1884703a 	and	r2,r3,r2
   110e8:	81400217 	ldw	r5,8(r16)
   110ec:	8085883a 	add	r2,r16,r2
   110f0:	10c00117 	ldw	r3,4(r2)
   110f4:	29000315 	stw	r4,12(r5)
   110f8:	21400215 	stw	r5,8(r4)
   110fc:	18c00054 	ori	r3,r3,1
   11100:	10c00115 	stw	r3,4(r2)
   11104:	9009883a 	mov	r4,r18
   11108:	00136840 	call	13684 <__malloc_unlock>
   1110c:	80800204 	addi	r2,r16,8
   11110:	dfc00a17 	ldw	ra,40(sp)
   11114:	df000917 	ldw	fp,36(sp)
   11118:	ddc00817 	ldw	r23,32(sp)
   1111c:	dd800717 	ldw	r22,28(sp)
   11120:	dd400617 	ldw	r21,24(sp)
   11124:	dd000517 	ldw	r20,20(sp)
   11128:	dcc00417 	ldw	r19,16(sp)
   1112c:	dc800317 	ldw	r18,12(sp)
   11130:	dc400217 	ldw	r17,8(sp)
   11134:	dc000117 	ldw	r16,4(sp)
   11138:	dec00b04 	addi	sp,sp,44
   1113c:	f800283a 	ret
   11140:	00800304 	movi	r2,12
   11144:	90800015 	stw	r2,0(r18)
   11148:	0005883a 	mov	r2,zero
   1114c:	003ff006 	br	11110 <_gp+0xffff1f10>
   11150:	01002004 	movi	r4,128
   11154:	02001004 	movi	r8,64
   11158:	01c00fc4 	movi	r7,63
   1115c:	003f6106 	br	10ee4 <_gp+0xffff1ce4>
   11160:	4009883a 	mov	r4,r8
   11164:	003f7506 	br	10f3c <_gp+0xffff1d3c>
   11168:	81000317 	ldw	r4,12(r16)
   1116c:	003fde06 	br	110e8 <_gp+0xffff1ee8>
   11170:	81c5883a 	add	r2,r16,r7
   11174:	11400117 	ldw	r5,4(r2)
   11178:	9009883a 	mov	r4,r18
   1117c:	29400054 	ori	r5,r5,1
   11180:	11400115 	stw	r5,4(r2)
   11184:	00136840 	call	13684 <__malloc_unlock>
   11188:	80800204 	addi	r2,r16,8
   1118c:	003fe006 	br	11110 <_gp+0xffff1f10>
   11190:	9c000217 	ldw	r16,8(r19)
   11194:	00bfff04 	movi	r2,-4
   11198:	85800117 	ldw	r22,4(r16)
   1119c:	b0ac703a 	and	r22,r22,r2
   111a0:	b4400336 	bltu	r22,r17,111b0 <_malloc_r+0x344>
   111a4:	b445c83a 	sub	r2,r22,r17
   111a8:	00c003c4 	movi	r3,15
   111ac:	18805d16 	blt	r3,r2,11324 <_malloc_r+0x4b8>
   111b0:	05c00074 	movhi	r23,1
   111b4:	008000b4 	movhi	r2,2
   111b8:	10a32f04 	addi	r2,r2,-29508
   111bc:	bddc8404 	addi	r23,r23,29200
   111c0:	15400017 	ldw	r21,0(r2)
   111c4:	b8c00017 	ldw	r3,0(r23)
   111c8:	00bfffc4 	movi	r2,-1
   111cc:	858d883a 	add	r6,r16,r22
   111d0:	8d6b883a 	add	r21,r17,r21
   111d4:	1880ea26 	beq	r3,r2,11580 <_malloc_r+0x714>
   111d8:	ad4403c4 	addi	r21,r21,4111
   111dc:	00bc0004 	movi	r2,-4096
   111e0:	a8aa703a 	and	r21,r21,r2
   111e4:	a80b883a 	mov	r5,r21
   111e8:	9009883a 	mov	r4,r18
   111ec:	d9800015 	stw	r6,0(sp)
   111f0:	001208c0 	call	1208c <_sbrk_r>
   111f4:	1029883a 	mov	r20,r2
   111f8:	00bfffc4 	movi	r2,-1
   111fc:	d9800017 	ldw	r6,0(sp)
   11200:	a080e826 	beq	r20,r2,115a4 <_malloc_r+0x738>
   11204:	a180a636 	bltu	r20,r6,114a0 <_malloc_r+0x634>
   11208:	070000b4 	movhi	fp,2
   1120c:	e7233804 	addi	fp,fp,-29472
   11210:	e0800017 	ldw	r2,0(fp)
   11214:	a887883a 	add	r3,r21,r2
   11218:	e0c00015 	stw	r3,0(fp)
   1121c:	3500e626 	beq	r6,r20,115b8 <_malloc_r+0x74c>
   11220:	b9000017 	ldw	r4,0(r23)
   11224:	00bfffc4 	movi	r2,-1
   11228:	2080ee26 	beq	r4,r2,115e4 <_malloc_r+0x778>
   1122c:	a185c83a 	sub	r2,r20,r6
   11230:	10c5883a 	add	r2,r2,r3
   11234:	e0800015 	stw	r2,0(fp)
   11238:	a0c001cc 	andi	r3,r20,7
   1123c:	1800bc26 	beq	r3,zero,11530 <_malloc_r+0x6c4>
   11240:	a0e9c83a 	sub	r20,r20,r3
   11244:	00840204 	movi	r2,4104
   11248:	a5000204 	addi	r20,r20,8
   1124c:	10c7c83a 	sub	r3,r2,r3
   11250:	a545883a 	add	r2,r20,r21
   11254:	1083ffcc 	andi	r2,r2,4095
   11258:	18abc83a 	sub	r21,r3,r2
   1125c:	a80b883a 	mov	r5,r21
   11260:	9009883a 	mov	r4,r18
   11264:	001208c0 	call	1208c <_sbrk_r>
   11268:	00ffffc4 	movi	r3,-1
   1126c:	10c0e126 	beq	r2,r3,115f4 <_malloc_r+0x788>
   11270:	1505c83a 	sub	r2,r2,r20
   11274:	1545883a 	add	r2,r2,r21
   11278:	10800054 	ori	r2,r2,1
   1127c:	e0c00017 	ldw	r3,0(fp)
   11280:	9d000215 	stw	r20,8(r19)
   11284:	a0800115 	stw	r2,4(r20)
   11288:	a8c7883a 	add	r3,r21,r3
   1128c:	e0c00015 	stw	r3,0(fp)
   11290:	84c00e26 	beq	r16,r19,112cc <_malloc_r+0x460>
   11294:	018003c4 	movi	r6,15
   11298:	3580a72e 	bgeu	r6,r22,11538 <_malloc_r+0x6cc>
   1129c:	81400117 	ldw	r5,4(r16)
   112a0:	013ffe04 	movi	r4,-8
   112a4:	b0bffd04 	addi	r2,r22,-12
   112a8:	1104703a 	and	r2,r2,r4
   112ac:	2900004c 	andi	r4,r5,1
   112b0:	2088b03a 	or	r4,r4,r2
   112b4:	81000115 	stw	r4,4(r16)
   112b8:	01400144 	movi	r5,5
   112bc:	8089883a 	add	r4,r16,r2
   112c0:	21400115 	stw	r5,4(r4)
   112c4:	21400215 	stw	r5,8(r4)
   112c8:	3080cd36 	bltu	r6,r2,11600 <_malloc_r+0x794>
   112cc:	008000b4 	movhi	r2,2
   112d0:	10a32e04 	addi	r2,r2,-29512
   112d4:	11000017 	ldw	r4,0(r2)
   112d8:	20c0012e 	bgeu	r4,r3,112e0 <_malloc_r+0x474>
   112dc:	10c00015 	stw	r3,0(r2)
   112e0:	008000b4 	movhi	r2,2
   112e4:	10a32d04 	addi	r2,r2,-29516
   112e8:	11000017 	ldw	r4,0(r2)
   112ec:	9c000217 	ldw	r16,8(r19)
   112f0:	20c0012e 	bgeu	r4,r3,112f8 <_malloc_r+0x48c>
   112f4:	10c00015 	stw	r3,0(r2)
   112f8:	80c00117 	ldw	r3,4(r16)
   112fc:	00bfff04 	movi	r2,-4
   11300:	1886703a 	and	r3,r3,r2
   11304:	1c45c83a 	sub	r2,r3,r17
   11308:	1c400236 	bltu	r3,r17,11314 <_malloc_r+0x4a8>
   1130c:	00c003c4 	movi	r3,15
   11310:	18800416 	blt	r3,r2,11324 <_malloc_r+0x4b8>
   11314:	9009883a 	mov	r4,r18
   11318:	00136840 	call	13684 <__malloc_unlock>
   1131c:	0005883a 	mov	r2,zero
   11320:	003f7b06 	br	11110 <_gp+0xffff1f10>
   11324:	88c00054 	ori	r3,r17,1
   11328:	80c00115 	stw	r3,4(r16)
   1132c:	8463883a 	add	r17,r16,r17
   11330:	10800054 	ori	r2,r2,1
   11334:	9c400215 	stw	r17,8(r19)
   11338:	88800115 	stw	r2,4(r17)
   1133c:	9009883a 	mov	r4,r18
   11340:	00136840 	call	13684 <__malloc_unlock>
   11344:	80800204 	addi	r2,r16,8
   11348:	003f7106 	br	11110 <_gp+0xffff1f10>
   1134c:	00c00504 	movi	r3,20
   11350:	18804a2e 	bgeu	r3,r2,1147c <_malloc_r+0x610>
   11354:	00c01504 	movi	r3,84
   11358:	18806e36 	bltu	r3,r2,11514 <_malloc_r+0x6a8>
   1135c:	8804d33a 	srli	r2,r17,12
   11360:	12001bc4 	addi	r8,r2,111
   11364:	11c01b84 	addi	r7,r2,110
   11368:	4209883a 	add	r4,r8,r8
   1136c:	003edd06 	br	10ee4 <_gp+0xffff1ce4>
   11370:	3804d27a 	srli	r2,r7,9
   11374:	00c00104 	movi	r3,4
   11378:	1880442e 	bgeu	r3,r2,1148c <_malloc_r+0x620>
   1137c:	00c00504 	movi	r3,20
   11380:	18808136 	bltu	r3,r2,11588 <_malloc_r+0x71c>
   11384:	11401704 	addi	r5,r2,92
   11388:	10c016c4 	addi	r3,r2,91
   1138c:	294b883a 	add	r5,r5,r5
   11390:	294b883a 	add	r5,r5,r5
   11394:	294b883a 	add	r5,r5,r5
   11398:	994b883a 	add	r5,r19,r5
   1139c:	28800017 	ldw	r2,0(r5)
   113a0:	01800074 	movhi	r6,1
   113a4:	297ffe04 	addi	r5,r5,-8
   113a8:	3196fc04 	addi	r6,r6,23536
   113ac:	28806526 	beq	r5,r2,11544 <_malloc_r+0x6d8>
   113b0:	01bfff04 	movi	r6,-4
   113b4:	10c00117 	ldw	r3,4(r2)
   113b8:	1986703a 	and	r3,r3,r6
   113bc:	38c0022e 	bgeu	r7,r3,113c8 <_malloc_r+0x55c>
   113c0:	10800217 	ldw	r2,8(r2)
   113c4:	28bffb1e 	bne	r5,r2,113b4 <_gp+0xffff21b4>
   113c8:	11400317 	ldw	r5,12(r2)
   113cc:	98c00117 	ldw	r3,4(r19)
   113d0:	81400315 	stw	r5,12(r16)
   113d4:	80800215 	stw	r2,8(r16)
   113d8:	2c000215 	stw	r16,8(r5)
   113dc:	14000315 	stw	r16,12(r2)
   113e0:	003ef806 	br	10fc4 <_gp+0xffff1dc4>
   113e4:	88c00054 	ori	r3,r17,1
   113e8:	80c00115 	stw	r3,4(r16)
   113ec:	8463883a 	add	r17,r16,r17
   113f0:	34400515 	stw	r17,20(r6)
   113f4:	34400415 	stw	r17,16(r6)
   113f8:	10c00054 	ori	r3,r2,1
   113fc:	8a000315 	stw	r8,12(r17)
   11400:	8a000215 	stw	r8,8(r17)
   11404:	88c00115 	stw	r3,4(r17)
   11408:	88a3883a 	add	r17,r17,r2
   1140c:	88800015 	stw	r2,0(r17)
   11410:	9009883a 	mov	r4,r18
   11414:	00136840 	call	13684 <__malloc_unlock>
   11418:	80800204 	addi	r2,r16,8
   1141c:	003f3c06 	br	11110 <_gp+0xffff1f10>
   11420:	30c00117 	ldw	r3,4(r6)
   11424:	003ee706 	br	10fc4 <_gp+0xffff1dc4>
   11428:	5ac00044 	addi	r11,r11,1
   1142c:	588000cc 	andi	r2,r11,3
   11430:	31800204 	addi	r6,r6,8
   11434:	103efd1e 	bne	r2,zero,1102c <_gp+0xffff1e2c>
   11438:	00002406 	br	114cc <_malloc_r+0x660>
   1143c:	14000317 	ldw	r16,12(r2)
   11440:	143f251e 	bne	r2,r16,110d8 <_gp+0xffff1ed8>
   11444:	21000084 	addi	r4,r4,2
   11448:	003ebc06 	br	10f3c <_gp+0xffff1d3c>
   1144c:	8085883a 	add	r2,r16,r2
   11450:	10c00117 	ldw	r3,4(r2)
   11454:	81000317 	ldw	r4,12(r16)
   11458:	81400217 	ldw	r5,8(r16)
   1145c:	18c00054 	ori	r3,r3,1
   11460:	10c00115 	stw	r3,4(r2)
   11464:	29000315 	stw	r4,12(r5)
   11468:	21400215 	stw	r5,8(r4)
   1146c:	9009883a 	mov	r4,r18
   11470:	00136840 	call	13684 <__malloc_unlock>
   11474:	80800204 	addi	r2,r16,8
   11478:	003f2506 	br	11110 <_gp+0xffff1f10>
   1147c:	12001704 	addi	r8,r2,92
   11480:	11c016c4 	addi	r7,r2,91
   11484:	4209883a 	add	r4,r8,r8
   11488:	003e9606 	br	10ee4 <_gp+0xffff1ce4>
   1148c:	3804d1ba 	srli	r2,r7,6
   11490:	11400e44 	addi	r5,r2,57
   11494:	10c00e04 	addi	r3,r2,56
   11498:	294b883a 	add	r5,r5,r5
   1149c:	003fbc06 	br	11390 <_gp+0xffff2190>
   114a0:	84ff5926 	beq	r16,r19,11208 <_gp+0xffff2008>
   114a4:	00800074 	movhi	r2,1
   114a8:	1096fc04 	addi	r2,r2,23536
   114ac:	14000217 	ldw	r16,8(r2)
   114b0:	00bfff04 	movi	r2,-4
   114b4:	80c00117 	ldw	r3,4(r16)
   114b8:	1886703a 	and	r3,r3,r2
   114bc:	003f9106 	br	11304 <_gp+0xffff2104>
   114c0:	60800217 	ldw	r2,8(r12)
   114c4:	213fffc4 	addi	r4,r4,-1
   114c8:	1300651e 	bne	r2,r12,11660 <_malloc_r+0x7f4>
   114cc:	208000cc 	andi	r2,r4,3
   114d0:	633ffe04 	addi	r12,r12,-8
   114d4:	103ffa1e 	bne	r2,zero,114c0 <_gp+0xffff22c0>
   114d8:	98800117 	ldw	r2,4(r19)
   114dc:	0146303a 	nor	r3,zero,r5
   114e0:	1884703a 	and	r2,r3,r2
   114e4:	98800115 	stw	r2,4(r19)
   114e8:	294b883a 	add	r5,r5,r5
   114ec:	117f2836 	bltu	r2,r5,11190 <_gp+0xffff1f90>
   114f0:	283f2726 	beq	r5,zero,11190 <_gp+0xffff1f90>
   114f4:	2886703a 	and	r3,r5,r2
   114f8:	5809883a 	mov	r4,r11
   114fc:	183ec31e 	bne	r3,zero,1100c <_gp+0xffff1e0c>
   11500:	294b883a 	add	r5,r5,r5
   11504:	2886703a 	and	r3,r5,r2
   11508:	21000104 	addi	r4,r4,4
   1150c:	183ffc26 	beq	r3,zero,11500 <_gp+0xffff2300>
   11510:	003ebe06 	br	1100c <_gp+0xffff1e0c>
   11514:	00c05504 	movi	r3,340
   11518:	18801236 	bltu	r3,r2,11564 <_malloc_r+0x6f8>
   1151c:	8804d3fa 	srli	r2,r17,15
   11520:	12001e04 	addi	r8,r2,120
   11524:	11c01dc4 	addi	r7,r2,119
   11528:	4209883a 	add	r4,r8,r8
   1152c:	003e6d06 	br	10ee4 <_gp+0xffff1ce4>
   11530:	00c40004 	movi	r3,4096
   11534:	003f4606 	br	11250 <_gp+0xffff2050>
   11538:	00800044 	movi	r2,1
   1153c:	a0800115 	stw	r2,4(r20)
   11540:	003f7406 	br	11314 <_gp+0xffff2114>
   11544:	1805d0ba 	srai	r2,r3,2
   11548:	01c00044 	movi	r7,1
   1154c:	30c00117 	ldw	r3,4(r6)
   11550:	388e983a 	sll	r7,r7,r2
   11554:	2805883a 	mov	r2,r5
   11558:	38c6b03a 	or	r3,r7,r3
   1155c:	30c00115 	stw	r3,4(r6)
   11560:	003f9b06 	br	113d0 <_gp+0xffff21d0>
   11564:	00c15504 	movi	r3,1364
   11568:	18801a36 	bltu	r3,r2,115d4 <_malloc_r+0x768>
   1156c:	8804d4ba 	srli	r2,r17,18
   11570:	12001f44 	addi	r8,r2,125
   11574:	11c01f04 	addi	r7,r2,124
   11578:	4209883a 	add	r4,r8,r8
   1157c:	003e5906 	br	10ee4 <_gp+0xffff1ce4>
   11580:	ad400404 	addi	r21,r21,16
   11584:	003f1706 	br	111e4 <_gp+0xffff1fe4>
   11588:	00c01504 	movi	r3,84
   1158c:	18802336 	bltu	r3,r2,1161c <_malloc_r+0x7b0>
   11590:	3804d33a 	srli	r2,r7,12
   11594:	11401bc4 	addi	r5,r2,111
   11598:	10c01b84 	addi	r3,r2,110
   1159c:	294b883a 	add	r5,r5,r5
   115a0:	003f7b06 	br	11390 <_gp+0xffff2190>
   115a4:	9c000217 	ldw	r16,8(r19)
   115a8:	00bfff04 	movi	r2,-4
   115ac:	80c00117 	ldw	r3,4(r16)
   115b0:	1886703a 	and	r3,r3,r2
   115b4:	003f5306 	br	11304 <_gp+0xffff2104>
   115b8:	3083ffcc 	andi	r2,r6,4095
   115bc:	103f181e 	bne	r2,zero,11220 <_gp+0xffff2020>
   115c0:	99000217 	ldw	r4,8(r19)
   115c4:	b545883a 	add	r2,r22,r21
   115c8:	10800054 	ori	r2,r2,1
   115cc:	20800115 	stw	r2,4(r4)
   115d0:	003f3e06 	br	112cc <_gp+0xffff20cc>
   115d4:	01003f84 	movi	r4,254
   115d8:	02001fc4 	movi	r8,127
   115dc:	01c01f84 	movi	r7,126
   115e0:	003e4006 	br	10ee4 <_gp+0xffff1ce4>
   115e4:	00800074 	movhi	r2,1
   115e8:	109c8404 	addi	r2,r2,29200
   115ec:	15000015 	stw	r20,0(r2)
   115f0:	003f1106 	br	11238 <_gp+0xffff2038>
   115f4:	00800044 	movi	r2,1
   115f8:	002b883a 	mov	r21,zero
   115fc:	003f1f06 	br	1127c <_gp+0xffff207c>
   11600:	81400204 	addi	r5,r16,8
   11604:	9009883a 	mov	r4,r18
   11608:	00128f40 	call	128f4 <_free_r>
   1160c:	008000b4 	movhi	r2,2
   11610:	10a33804 	addi	r2,r2,-29472
   11614:	10c00017 	ldw	r3,0(r2)
   11618:	003f2c06 	br	112cc <_gp+0xffff20cc>
   1161c:	00c05504 	movi	r3,340
   11620:	18800536 	bltu	r3,r2,11638 <_malloc_r+0x7cc>
   11624:	3804d3fa 	srli	r2,r7,15
   11628:	11401e04 	addi	r5,r2,120
   1162c:	10c01dc4 	addi	r3,r2,119
   11630:	294b883a 	add	r5,r5,r5
   11634:	003f5606 	br	11390 <_gp+0xffff2190>
   11638:	00c15504 	movi	r3,1364
   1163c:	18800536 	bltu	r3,r2,11654 <_malloc_r+0x7e8>
   11640:	3804d4ba 	srli	r2,r7,18
   11644:	11401f44 	addi	r5,r2,125
   11648:	10c01f04 	addi	r3,r2,124
   1164c:	294b883a 	add	r5,r5,r5
   11650:	003f4f06 	br	11390 <_gp+0xffff2190>
   11654:	01403f84 	movi	r5,254
   11658:	00c01f84 	movi	r3,126
   1165c:	003f4c06 	br	11390 <_gp+0xffff2190>
   11660:	98800117 	ldw	r2,4(r19)
   11664:	003fa006 	br	114e8 <_gp+0xffff22e8>
   11668:	8808d0fa 	srli	r4,r17,3
   1166c:	20800044 	addi	r2,r4,1
   11670:	1085883a 	add	r2,r2,r2
   11674:	003e9006 	br	110b8 <_gp+0xffff1eb8>

00011678 <memchr>:
   11678:	208000cc 	andi	r2,r4,3
   1167c:	280f883a 	mov	r7,r5
   11680:	10003426 	beq	r2,zero,11754 <memchr+0xdc>
   11684:	30bfffc4 	addi	r2,r6,-1
   11688:	30001a26 	beq	r6,zero,116f4 <memchr+0x7c>
   1168c:	20c00003 	ldbu	r3,0(r4)
   11690:	29803fcc 	andi	r6,r5,255
   11694:	30c0051e 	bne	r6,r3,116ac <memchr+0x34>
   11698:	00001806 	br	116fc <memchr+0x84>
   1169c:	10001526 	beq	r2,zero,116f4 <memchr+0x7c>
   116a0:	20c00003 	ldbu	r3,0(r4)
   116a4:	10bfffc4 	addi	r2,r2,-1
   116a8:	30c01426 	beq	r6,r3,116fc <memchr+0x84>
   116ac:	21000044 	addi	r4,r4,1
   116b0:	20c000cc 	andi	r3,r4,3
   116b4:	183ff91e 	bne	r3,zero,1169c <_gp+0xffff249c>
   116b8:	020000c4 	movi	r8,3
   116bc:	40801136 	bltu	r8,r2,11704 <memchr+0x8c>
   116c0:	10000c26 	beq	r2,zero,116f4 <memchr+0x7c>
   116c4:	20c00003 	ldbu	r3,0(r4)
   116c8:	29403fcc 	andi	r5,r5,255
   116cc:	28c00b26 	beq	r5,r3,116fc <memchr+0x84>
   116d0:	20c00044 	addi	r3,r4,1
   116d4:	39803fcc 	andi	r6,r7,255
   116d8:	2089883a 	add	r4,r4,r2
   116dc:	00000306 	br	116ec <memchr+0x74>
   116e0:	18c00044 	addi	r3,r3,1
   116e4:	197fffc3 	ldbu	r5,-1(r3)
   116e8:	31400526 	beq	r6,r5,11700 <memchr+0x88>
   116ec:	1805883a 	mov	r2,r3
   116f0:	20fffb1e 	bne	r4,r3,116e0 <_gp+0xffff24e0>
   116f4:	0005883a 	mov	r2,zero
   116f8:	f800283a 	ret
   116fc:	2005883a 	mov	r2,r4
   11700:	f800283a 	ret
   11704:	28c03fcc 	andi	r3,r5,255
   11708:	1812923a 	slli	r9,r3,8
   1170c:	02ffbff4 	movhi	r11,65279
   11710:	02a02074 	movhi	r10,32897
   11714:	48d2b03a 	or	r9,r9,r3
   11718:	4806943a 	slli	r3,r9,16
   1171c:	5affbfc4 	addi	r11,r11,-257
   11720:	52a02004 	addi	r10,r10,-32640
   11724:	48d2b03a 	or	r9,r9,r3
   11728:	20c00017 	ldw	r3,0(r4)
   1172c:	48c6f03a 	xor	r3,r9,r3
   11730:	1acd883a 	add	r6,r3,r11
   11734:	00c6303a 	nor	r3,zero,r3
   11738:	30c6703a 	and	r3,r6,r3
   1173c:	1a86703a 	and	r3,r3,r10
   11740:	183fe01e 	bne	r3,zero,116c4 <_gp+0xffff24c4>
   11744:	10bfff04 	addi	r2,r2,-4
   11748:	21000104 	addi	r4,r4,4
   1174c:	40bff636 	bltu	r8,r2,11728 <_gp+0xffff2528>
   11750:	003fdb06 	br	116c0 <_gp+0xffff24c0>
   11754:	3005883a 	mov	r2,r6
   11758:	003fd706 	br	116b8 <_gp+0xffff24b8>

0001175c <memcpy>:
   1175c:	defffd04 	addi	sp,sp,-12
   11760:	dfc00215 	stw	ra,8(sp)
   11764:	dc400115 	stw	r17,4(sp)
   11768:	dc000015 	stw	r16,0(sp)
   1176c:	00c003c4 	movi	r3,15
   11770:	2005883a 	mov	r2,r4
   11774:	1980452e 	bgeu	r3,r6,1188c <memcpy+0x130>
   11778:	2906b03a 	or	r3,r5,r4
   1177c:	18c000cc 	andi	r3,r3,3
   11780:	1800441e 	bne	r3,zero,11894 <memcpy+0x138>
   11784:	347ffc04 	addi	r17,r6,-16
   11788:	8822d13a 	srli	r17,r17,4
   1178c:	28c00104 	addi	r3,r5,4
   11790:	23400104 	addi	r13,r4,4
   11794:	8820913a 	slli	r16,r17,4
   11798:	2b000204 	addi	r12,r5,8
   1179c:	22c00204 	addi	r11,r4,8
   117a0:	84000504 	addi	r16,r16,20
   117a4:	2a800304 	addi	r10,r5,12
   117a8:	22400304 	addi	r9,r4,12
   117ac:	2c21883a 	add	r16,r5,r16
   117b0:	2811883a 	mov	r8,r5
   117b4:	200f883a 	mov	r7,r4
   117b8:	41000017 	ldw	r4,0(r8)
   117bc:	1fc00017 	ldw	ra,0(r3)
   117c0:	63c00017 	ldw	r15,0(r12)
   117c4:	39000015 	stw	r4,0(r7)
   117c8:	53800017 	ldw	r14,0(r10)
   117cc:	6fc00015 	stw	ra,0(r13)
   117d0:	5bc00015 	stw	r15,0(r11)
   117d4:	4b800015 	stw	r14,0(r9)
   117d8:	18c00404 	addi	r3,r3,16
   117dc:	39c00404 	addi	r7,r7,16
   117e0:	42000404 	addi	r8,r8,16
   117e4:	6b400404 	addi	r13,r13,16
   117e8:	63000404 	addi	r12,r12,16
   117ec:	5ac00404 	addi	r11,r11,16
   117f0:	52800404 	addi	r10,r10,16
   117f4:	4a400404 	addi	r9,r9,16
   117f8:	1c3fef1e 	bne	r3,r16,117b8 <_gp+0xffff25b8>
   117fc:	89c00044 	addi	r7,r17,1
   11800:	380e913a 	slli	r7,r7,4
   11804:	310003cc 	andi	r4,r6,15
   11808:	02c000c4 	movi	r11,3
   1180c:	11c7883a 	add	r3,r2,r7
   11810:	29cb883a 	add	r5,r5,r7
   11814:	5900212e 	bgeu	r11,r4,1189c <memcpy+0x140>
   11818:	1813883a 	mov	r9,r3
   1181c:	2811883a 	mov	r8,r5
   11820:	200f883a 	mov	r7,r4
   11824:	42800017 	ldw	r10,0(r8)
   11828:	4a400104 	addi	r9,r9,4
   1182c:	39ffff04 	addi	r7,r7,-4
   11830:	4abfff15 	stw	r10,-4(r9)
   11834:	42000104 	addi	r8,r8,4
   11838:	59fffa36 	bltu	r11,r7,11824 <_gp+0xffff2624>
   1183c:	213fff04 	addi	r4,r4,-4
   11840:	2008d0ba 	srli	r4,r4,2
   11844:	318000cc 	andi	r6,r6,3
   11848:	21000044 	addi	r4,r4,1
   1184c:	2109883a 	add	r4,r4,r4
   11850:	2109883a 	add	r4,r4,r4
   11854:	1907883a 	add	r3,r3,r4
   11858:	290b883a 	add	r5,r5,r4
   1185c:	30000626 	beq	r6,zero,11878 <memcpy+0x11c>
   11860:	198d883a 	add	r6,r3,r6
   11864:	29c00003 	ldbu	r7,0(r5)
   11868:	18c00044 	addi	r3,r3,1
   1186c:	29400044 	addi	r5,r5,1
   11870:	19ffffc5 	stb	r7,-1(r3)
   11874:	19bffb1e 	bne	r3,r6,11864 <_gp+0xffff2664>
   11878:	dfc00217 	ldw	ra,8(sp)
   1187c:	dc400117 	ldw	r17,4(sp)
   11880:	dc000017 	ldw	r16,0(sp)
   11884:	dec00304 	addi	sp,sp,12
   11888:	f800283a 	ret
   1188c:	2007883a 	mov	r3,r4
   11890:	003ff206 	br	1185c <_gp+0xffff265c>
   11894:	2007883a 	mov	r3,r4
   11898:	003ff106 	br	11860 <_gp+0xffff2660>
   1189c:	200d883a 	mov	r6,r4
   118a0:	003fee06 	br	1185c <_gp+0xffff265c>

000118a4 <memmove>:
   118a4:	2005883a 	mov	r2,r4
   118a8:	29000b2e 	bgeu	r5,r4,118d8 <memmove+0x34>
   118ac:	298f883a 	add	r7,r5,r6
   118b0:	21c0092e 	bgeu	r4,r7,118d8 <memmove+0x34>
   118b4:	2187883a 	add	r3,r4,r6
   118b8:	198bc83a 	sub	r5,r3,r6
   118bc:	30004826 	beq	r6,zero,119e0 <memmove+0x13c>
   118c0:	39ffffc4 	addi	r7,r7,-1
   118c4:	39000003 	ldbu	r4,0(r7)
   118c8:	18ffffc4 	addi	r3,r3,-1
   118cc:	19000005 	stb	r4,0(r3)
   118d0:	28fffb1e 	bne	r5,r3,118c0 <_gp+0xffff26c0>
   118d4:	f800283a 	ret
   118d8:	00c003c4 	movi	r3,15
   118dc:	1980412e 	bgeu	r3,r6,119e4 <memmove+0x140>
   118e0:	2886b03a 	or	r3,r5,r2
   118e4:	18c000cc 	andi	r3,r3,3
   118e8:	1800401e 	bne	r3,zero,119ec <memmove+0x148>
   118ec:	33fffc04 	addi	r15,r6,-16
   118f0:	781ed13a 	srli	r15,r15,4
   118f4:	28c00104 	addi	r3,r5,4
   118f8:	13400104 	addi	r13,r2,4
   118fc:	781c913a 	slli	r14,r15,4
   11900:	2b000204 	addi	r12,r5,8
   11904:	12c00204 	addi	r11,r2,8
   11908:	73800504 	addi	r14,r14,20
   1190c:	2a800304 	addi	r10,r5,12
   11910:	12400304 	addi	r9,r2,12
   11914:	2b9d883a 	add	r14,r5,r14
   11918:	2811883a 	mov	r8,r5
   1191c:	100f883a 	mov	r7,r2
   11920:	41000017 	ldw	r4,0(r8)
   11924:	39c00404 	addi	r7,r7,16
   11928:	18c00404 	addi	r3,r3,16
   1192c:	393ffc15 	stw	r4,-16(r7)
   11930:	193ffc17 	ldw	r4,-16(r3)
   11934:	6b400404 	addi	r13,r13,16
   11938:	5ac00404 	addi	r11,r11,16
   1193c:	693ffc15 	stw	r4,-16(r13)
   11940:	61000017 	ldw	r4,0(r12)
   11944:	4a400404 	addi	r9,r9,16
   11948:	42000404 	addi	r8,r8,16
   1194c:	593ffc15 	stw	r4,-16(r11)
   11950:	51000017 	ldw	r4,0(r10)
   11954:	63000404 	addi	r12,r12,16
   11958:	52800404 	addi	r10,r10,16
   1195c:	493ffc15 	stw	r4,-16(r9)
   11960:	1bbfef1e 	bne	r3,r14,11920 <_gp+0xffff2720>
   11964:	79000044 	addi	r4,r15,1
   11968:	2008913a 	slli	r4,r4,4
   1196c:	328003cc 	andi	r10,r6,15
   11970:	02c000c4 	movi	r11,3
   11974:	1107883a 	add	r3,r2,r4
   11978:	290b883a 	add	r5,r5,r4
   1197c:	5a801e2e 	bgeu	r11,r10,119f8 <memmove+0x154>
   11980:	1813883a 	mov	r9,r3
   11984:	2811883a 	mov	r8,r5
   11988:	500f883a 	mov	r7,r10
   1198c:	41000017 	ldw	r4,0(r8)
   11990:	4a400104 	addi	r9,r9,4
   11994:	39ffff04 	addi	r7,r7,-4
   11998:	493fff15 	stw	r4,-4(r9)
   1199c:	42000104 	addi	r8,r8,4
   119a0:	59fffa36 	bltu	r11,r7,1198c <_gp+0xffff278c>
   119a4:	513fff04 	addi	r4,r10,-4
   119a8:	2008d0ba 	srli	r4,r4,2
   119ac:	318000cc 	andi	r6,r6,3
   119b0:	21000044 	addi	r4,r4,1
   119b4:	2109883a 	add	r4,r4,r4
   119b8:	2109883a 	add	r4,r4,r4
   119bc:	1907883a 	add	r3,r3,r4
   119c0:	290b883a 	add	r5,r5,r4
   119c4:	30000b26 	beq	r6,zero,119f4 <memmove+0x150>
   119c8:	198d883a 	add	r6,r3,r6
   119cc:	29c00003 	ldbu	r7,0(r5)
   119d0:	18c00044 	addi	r3,r3,1
   119d4:	29400044 	addi	r5,r5,1
   119d8:	19ffffc5 	stb	r7,-1(r3)
   119dc:	19bffb1e 	bne	r3,r6,119cc <_gp+0xffff27cc>
   119e0:	f800283a 	ret
   119e4:	1007883a 	mov	r3,r2
   119e8:	003ff606 	br	119c4 <_gp+0xffff27c4>
   119ec:	1007883a 	mov	r3,r2
   119f0:	003ff506 	br	119c8 <_gp+0xffff27c8>
   119f4:	f800283a 	ret
   119f8:	500d883a 	mov	r6,r10
   119fc:	003ff106 	br	119c4 <_gp+0xffff27c4>

00011a00 <memset>:
   11a00:	20c000cc 	andi	r3,r4,3
   11a04:	2005883a 	mov	r2,r4
   11a08:	18004426 	beq	r3,zero,11b1c <memset+0x11c>
   11a0c:	31ffffc4 	addi	r7,r6,-1
   11a10:	30004026 	beq	r6,zero,11b14 <memset+0x114>
   11a14:	2813883a 	mov	r9,r5
   11a18:	200d883a 	mov	r6,r4
   11a1c:	2007883a 	mov	r3,r4
   11a20:	00000406 	br	11a34 <memset+0x34>
   11a24:	3a3fffc4 	addi	r8,r7,-1
   11a28:	31800044 	addi	r6,r6,1
   11a2c:	38003926 	beq	r7,zero,11b14 <memset+0x114>
   11a30:	400f883a 	mov	r7,r8
   11a34:	18c00044 	addi	r3,r3,1
   11a38:	32400005 	stb	r9,0(r6)
   11a3c:	1a0000cc 	andi	r8,r3,3
   11a40:	403ff81e 	bne	r8,zero,11a24 <_gp+0xffff2824>
   11a44:	010000c4 	movi	r4,3
   11a48:	21c02d2e 	bgeu	r4,r7,11b00 <memset+0x100>
   11a4c:	29003fcc 	andi	r4,r5,255
   11a50:	200c923a 	slli	r6,r4,8
   11a54:	3108b03a 	or	r4,r6,r4
   11a58:	200c943a 	slli	r6,r4,16
   11a5c:	218cb03a 	or	r6,r4,r6
   11a60:	010003c4 	movi	r4,15
   11a64:	21c0182e 	bgeu	r4,r7,11ac8 <memset+0xc8>
   11a68:	3b3ffc04 	addi	r12,r7,-16
   11a6c:	6018d13a 	srli	r12,r12,4
   11a70:	1a000104 	addi	r8,r3,4
   11a74:	1ac00204 	addi	r11,r3,8
   11a78:	6008913a 	slli	r4,r12,4
   11a7c:	1a800304 	addi	r10,r3,12
   11a80:	1813883a 	mov	r9,r3
   11a84:	21000504 	addi	r4,r4,20
   11a88:	1909883a 	add	r4,r3,r4
   11a8c:	49800015 	stw	r6,0(r9)
   11a90:	41800015 	stw	r6,0(r8)
   11a94:	59800015 	stw	r6,0(r11)
   11a98:	51800015 	stw	r6,0(r10)
   11a9c:	42000404 	addi	r8,r8,16
   11aa0:	4a400404 	addi	r9,r9,16
   11aa4:	5ac00404 	addi	r11,r11,16
   11aa8:	52800404 	addi	r10,r10,16
   11aac:	413ff71e 	bne	r8,r4,11a8c <_gp+0xffff288c>
   11ab0:	63000044 	addi	r12,r12,1
   11ab4:	6018913a 	slli	r12,r12,4
   11ab8:	39c003cc 	andi	r7,r7,15
   11abc:	010000c4 	movi	r4,3
   11ac0:	1b07883a 	add	r3,r3,r12
   11ac4:	21c00e2e 	bgeu	r4,r7,11b00 <memset+0x100>
   11ac8:	1813883a 	mov	r9,r3
   11acc:	3811883a 	mov	r8,r7
   11ad0:	010000c4 	movi	r4,3
   11ad4:	49800015 	stw	r6,0(r9)
   11ad8:	423fff04 	addi	r8,r8,-4
   11adc:	4a400104 	addi	r9,r9,4
   11ae0:	223ffc36 	bltu	r4,r8,11ad4 <_gp+0xffff28d4>
   11ae4:	393fff04 	addi	r4,r7,-4
   11ae8:	2008d0ba 	srli	r4,r4,2
   11aec:	39c000cc 	andi	r7,r7,3
   11af0:	21000044 	addi	r4,r4,1
   11af4:	2109883a 	add	r4,r4,r4
   11af8:	2109883a 	add	r4,r4,r4
   11afc:	1907883a 	add	r3,r3,r4
   11b00:	38000526 	beq	r7,zero,11b18 <memset+0x118>
   11b04:	19cf883a 	add	r7,r3,r7
   11b08:	19400005 	stb	r5,0(r3)
   11b0c:	18c00044 	addi	r3,r3,1
   11b10:	38fffd1e 	bne	r7,r3,11b08 <_gp+0xffff2908>
   11b14:	f800283a 	ret
   11b18:	f800283a 	ret
   11b1c:	2007883a 	mov	r3,r4
   11b20:	300f883a 	mov	r7,r6
   11b24:	003fc706 	br	11a44 <_gp+0xffff2844>

00011b28 <_realloc_r>:
   11b28:	defff604 	addi	sp,sp,-40
   11b2c:	dc800215 	stw	r18,8(sp)
   11b30:	dfc00915 	stw	ra,36(sp)
   11b34:	df000815 	stw	fp,32(sp)
   11b38:	ddc00715 	stw	r23,28(sp)
   11b3c:	dd800615 	stw	r22,24(sp)
   11b40:	dd400515 	stw	r21,20(sp)
   11b44:	dd000415 	stw	r20,16(sp)
   11b48:	dcc00315 	stw	r19,12(sp)
   11b4c:	dc400115 	stw	r17,4(sp)
   11b50:	dc000015 	stw	r16,0(sp)
   11b54:	3025883a 	mov	r18,r6
   11b58:	2800b726 	beq	r5,zero,11e38 <_realloc_r+0x310>
   11b5c:	282b883a 	mov	r21,r5
   11b60:	2029883a 	mov	r20,r4
   11b64:	00136600 	call	13660 <__malloc_lock>
   11b68:	a8bfff17 	ldw	r2,-4(r21)
   11b6c:	043fff04 	movi	r16,-4
   11b70:	90c002c4 	addi	r3,r18,11
   11b74:	01000584 	movi	r4,22
   11b78:	acfffe04 	addi	r19,r21,-8
   11b7c:	1420703a 	and	r16,r2,r16
   11b80:	20c0332e 	bgeu	r4,r3,11c50 <_realloc_r+0x128>
   11b84:	047ffe04 	movi	r17,-8
   11b88:	1c62703a 	and	r17,r3,r17
   11b8c:	8807883a 	mov	r3,r17
   11b90:	88005816 	blt	r17,zero,11cf4 <_realloc_r+0x1cc>
   11b94:	8c805736 	bltu	r17,r18,11cf4 <_realloc_r+0x1cc>
   11b98:	80c0300e 	bge	r16,r3,11c5c <_realloc_r+0x134>
   11b9c:	07000074 	movhi	fp,1
   11ba0:	e716fc04 	addi	fp,fp,23536
   11ba4:	e1c00217 	ldw	r7,8(fp)
   11ba8:	9c09883a 	add	r4,r19,r16
   11bac:	22000117 	ldw	r8,4(r4)
   11bb0:	21c06326 	beq	r4,r7,11d40 <_realloc_r+0x218>
   11bb4:	017fff84 	movi	r5,-2
   11bb8:	414a703a 	and	r5,r8,r5
   11bbc:	214b883a 	add	r5,r4,r5
   11bc0:	29800117 	ldw	r6,4(r5)
   11bc4:	3180004c 	andi	r6,r6,1
   11bc8:	30003f26 	beq	r6,zero,11cc8 <_realloc_r+0x1a0>
   11bcc:	1080004c 	andi	r2,r2,1
   11bd0:	10008326 	beq	r2,zero,11de0 <_realloc_r+0x2b8>
   11bd4:	900b883a 	mov	r5,r18
   11bd8:	a009883a 	mov	r4,r20
   11bdc:	0010e6c0 	call	10e6c <_malloc_r>
   11be0:	1025883a 	mov	r18,r2
   11be4:	10011e26 	beq	r2,zero,12060 <_realloc_r+0x538>
   11be8:	a93fff17 	ldw	r4,-4(r21)
   11bec:	10fffe04 	addi	r3,r2,-8
   11bf0:	00bfff84 	movi	r2,-2
   11bf4:	2084703a 	and	r2,r4,r2
   11bf8:	9885883a 	add	r2,r19,r2
   11bfc:	1880ee26 	beq	r3,r2,11fb8 <_realloc_r+0x490>
   11c00:	81bfff04 	addi	r6,r16,-4
   11c04:	00800904 	movi	r2,36
   11c08:	1180b836 	bltu	r2,r6,11eec <_realloc_r+0x3c4>
   11c0c:	00c004c4 	movi	r3,19
   11c10:	19809636 	bltu	r3,r6,11e6c <_realloc_r+0x344>
   11c14:	9005883a 	mov	r2,r18
   11c18:	a807883a 	mov	r3,r21
   11c1c:	19000017 	ldw	r4,0(r3)
   11c20:	11000015 	stw	r4,0(r2)
   11c24:	19000117 	ldw	r4,4(r3)
   11c28:	11000115 	stw	r4,4(r2)
   11c2c:	18c00217 	ldw	r3,8(r3)
   11c30:	10c00215 	stw	r3,8(r2)
   11c34:	a80b883a 	mov	r5,r21
   11c38:	a009883a 	mov	r4,r20
   11c3c:	00128f40 	call	128f4 <_free_r>
   11c40:	a009883a 	mov	r4,r20
   11c44:	00136840 	call	13684 <__malloc_unlock>
   11c48:	9005883a 	mov	r2,r18
   11c4c:	00001206 	br	11c98 <_realloc_r+0x170>
   11c50:	00c00404 	movi	r3,16
   11c54:	1823883a 	mov	r17,r3
   11c58:	003fce06 	br	11b94 <_gp+0xffff2994>
   11c5c:	a825883a 	mov	r18,r21
   11c60:	8445c83a 	sub	r2,r16,r17
   11c64:	00c003c4 	movi	r3,15
   11c68:	18802636 	bltu	r3,r2,11d04 <_realloc_r+0x1dc>
   11c6c:	99800117 	ldw	r6,4(r19)
   11c70:	9c07883a 	add	r3,r19,r16
   11c74:	3180004c 	andi	r6,r6,1
   11c78:	3420b03a 	or	r16,r6,r16
   11c7c:	9c000115 	stw	r16,4(r19)
   11c80:	18800117 	ldw	r2,4(r3)
   11c84:	10800054 	ori	r2,r2,1
   11c88:	18800115 	stw	r2,4(r3)
   11c8c:	a009883a 	mov	r4,r20
   11c90:	00136840 	call	13684 <__malloc_unlock>
   11c94:	9005883a 	mov	r2,r18
   11c98:	dfc00917 	ldw	ra,36(sp)
   11c9c:	df000817 	ldw	fp,32(sp)
   11ca0:	ddc00717 	ldw	r23,28(sp)
   11ca4:	dd800617 	ldw	r22,24(sp)
   11ca8:	dd400517 	ldw	r21,20(sp)
   11cac:	dd000417 	ldw	r20,16(sp)
   11cb0:	dcc00317 	ldw	r19,12(sp)
   11cb4:	dc800217 	ldw	r18,8(sp)
   11cb8:	dc400117 	ldw	r17,4(sp)
   11cbc:	dc000017 	ldw	r16,0(sp)
   11cc0:	dec00a04 	addi	sp,sp,40
   11cc4:	f800283a 	ret
   11cc8:	017fff04 	movi	r5,-4
   11ccc:	414a703a 	and	r5,r8,r5
   11cd0:	814d883a 	add	r6,r16,r5
   11cd4:	30c01f16 	blt	r6,r3,11d54 <_realloc_r+0x22c>
   11cd8:	20800317 	ldw	r2,12(r4)
   11cdc:	20c00217 	ldw	r3,8(r4)
   11ce0:	a825883a 	mov	r18,r21
   11ce4:	3021883a 	mov	r16,r6
   11ce8:	18800315 	stw	r2,12(r3)
   11cec:	10c00215 	stw	r3,8(r2)
   11cf0:	003fdb06 	br	11c60 <_gp+0xffff2a60>
   11cf4:	00800304 	movi	r2,12
   11cf8:	a0800015 	stw	r2,0(r20)
   11cfc:	0005883a 	mov	r2,zero
   11d00:	003fe506 	br	11c98 <_gp+0xffff2a98>
   11d04:	98c00117 	ldw	r3,4(r19)
   11d08:	9c4b883a 	add	r5,r19,r17
   11d0c:	11000054 	ori	r4,r2,1
   11d10:	18c0004c 	andi	r3,r3,1
   11d14:	1c62b03a 	or	r17,r3,r17
   11d18:	9c400115 	stw	r17,4(r19)
   11d1c:	29000115 	stw	r4,4(r5)
   11d20:	2885883a 	add	r2,r5,r2
   11d24:	10c00117 	ldw	r3,4(r2)
   11d28:	29400204 	addi	r5,r5,8
   11d2c:	a009883a 	mov	r4,r20
   11d30:	18c00054 	ori	r3,r3,1
   11d34:	10c00115 	stw	r3,4(r2)
   11d38:	00128f40 	call	128f4 <_free_r>
   11d3c:	003fd306 	br	11c8c <_gp+0xffff2a8c>
   11d40:	017fff04 	movi	r5,-4
   11d44:	414a703a 	and	r5,r8,r5
   11d48:	89800404 	addi	r6,r17,16
   11d4c:	8151883a 	add	r8,r16,r5
   11d50:	4180590e 	bge	r8,r6,11eb8 <_realloc_r+0x390>
   11d54:	1080004c 	andi	r2,r2,1
   11d58:	103f9e1e 	bne	r2,zero,11bd4 <_gp+0xffff29d4>
   11d5c:	adbffe17 	ldw	r22,-8(r21)
   11d60:	00bfff04 	movi	r2,-4
   11d64:	9dadc83a 	sub	r22,r19,r22
   11d68:	b1800117 	ldw	r6,4(r22)
   11d6c:	3084703a 	and	r2,r6,r2
   11d70:	20002026 	beq	r4,zero,11df4 <_realloc_r+0x2cc>
   11d74:	80af883a 	add	r23,r16,r2
   11d78:	b96f883a 	add	r23,r23,r5
   11d7c:	21c05f26 	beq	r4,r7,11efc <_realloc_r+0x3d4>
   11d80:	b8c01c16 	blt	r23,r3,11df4 <_realloc_r+0x2cc>
   11d84:	20800317 	ldw	r2,12(r4)
   11d88:	20c00217 	ldw	r3,8(r4)
   11d8c:	81bfff04 	addi	r6,r16,-4
   11d90:	01000904 	movi	r4,36
   11d94:	18800315 	stw	r2,12(r3)
   11d98:	10c00215 	stw	r3,8(r2)
   11d9c:	b0c00217 	ldw	r3,8(r22)
   11da0:	b0800317 	ldw	r2,12(r22)
   11da4:	b4800204 	addi	r18,r22,8
   11da8:	18800315 	stw	r2,12(r3)
   11dac:	10c00215 	stw	r3,8(r2)
   11db0:	21801b36 	bltu	r4,r6,11e20 <_realloc_r+0x2f8>
   11db4:	008004c4 	movi	r2,19
   11db8:	1180352e 	bgeu	r2,r6,11e90 <_realloc_r+0x368>
   11dbc:	a8800017 	ldw	r2,0(r21)
   11dc0:	b0800215 	stw	r2,8(r22)
   11dc4:	a8800117 	ldw	r2,4(r21)
   11dc8:	b0800315 	stw	r2,12(r22)
   11dcc:	008006c4 	movi	r2,27
   11dd0:	11807f36 	bltu	r2,r6,11fd0 <_realloc_r+0x4a8>
   11dd4:	b0800404 	addi	r2,r22,16
   11dd8:	ad400204 	addi	r21,r21,8
   11ddc:	00002d06 	br	11e94 <_realloc_r+0x36c>
   11de0:	adbffe17 	ldw	r22,-8(r21)
   11de4:	00bfff04 	movi	r2,-4
   11de8:	9dadc83a 	sub	r22,r19,r22
   11dec:	b1000117 	ldw	r4,4(r22)
   11df0:	2084703a 	and	r2,r4,r2
   11df4:	b03f7726 	beq	r22,zero,11bd4 <_gp+0xffff29d4>
   11df8:	80af883a 	add	r23,r16,r2
   11dfc:	b8ff7516 	blt	r23,r3,11bd4 <_gp+0xffff29d4>
   11e00:	b0800317 	ldw	r2,12(r22)
   11e04:	b0c00217 	ldw	r3,8(r22)
   11e08:	81bfff04 	addi	r6,r16,-4
   11e0c:	01000904 	movi	r4,36
   11e10:	18800315 	stw	r2,12(r3)
   11e14:	10c00215 	stw	r3,8(r2)
   11e18:	b4800204 	addi	r18,r22,8
   11e1c:	21bfe52e 	bgeu	r4,r6,11db4 <_gp+0xffff2bb4>
   11e20:	a80b883a 	mov	r5,r21
   11e24:	9009883a 	mov	r4,r18
   11e28:	00118a40 	call	118a4 <memmove>
   11e2c:	b821883a 	mov	r16,r23
   11e30:	b027883a 	mov	r19,r22
   11e34:	003f8a06 	br	11c60 <_gp+0xffff2a60>
   11e38:	300b883a 	mov	r5,r6
   11e3c:	dfc00917 	ldw	ra,36(sp)
   11e40:	df000817 	ldw	fp,32(sp)
   11e44:	ddc00717 	ldw	r23,28(sp)
   11e48:	dd800617 	ldw	r22,24(sp)
   11e4c:	dd400517 	ldw	r21,20(sp)
   11e50:	dd000417 	ldw	r20,16(sp)
   11e54:	dcc00317 	ldw	r19,12(sp)
   11e58:	dc800217 	ldw	r18,8(sp)
   11e5c:	dc400117 	ldw	r17,4(sp)
   11e60:	dc000017 	ldw	r16,0(sp)
   11e64:	dec00a04 	addi	sp,sp,40
   11e68:	0010e6c1 	jmpi	10e6c <_malloc_r>
   11e6c:	a8c00017 	ldw	r3,0(r21)
   11e70:	90c00015 	stw	r3,0(r18)
   11e74:	a8c00117 	ldw	r3,4(r21)
   11e78:	90c00115 	stw	r3,4(r18)
   11e7c:	00c006c4 	movi	r3,27
   11e80:	19804536 	bltu	r3,r6,11f98 <_realloc_r+0x470>
   11e84:	90800204 	addi	r2,r18,8
   11e88:	a8c00204 	addi	r3,r21,8
   11e8c:	003f6306 	br	11c1c <_gp+0xffff2a1c>
   11e90:	9005883a 	mov	r2,r18
   11e94:	a8c00017 	ldw	r3,0(r21)
   11e98:	b821883a 	mov	r16,r23
   11e9c:	b027883a 	mov	r19,r22
   11ea0:	10c00015 	stw	r3,0(r2)
   11ea4:	a8c00117 	ldw	r3,4(r21)
   11ea8:	10c00115 	stw	r3,4(r2)
   11eac:	a8c00217 	ldw	r3,8(r21)
   11eb0:	10c00215 	stw	r3,8(r2)
   11eb4:	003f6a06 	br	11c60 <_gp+0xffff2a60>
   11eb8:	9c67883a 	add	r19,r19,r17
   11ebc:	4445c83a 	sub	r2,r8,r17
   11ec0:	e4c00215 	stw	r19,8(fp)
   11ec4:	10800054 	ori	r2,r2,1
   11ec8:	98800115 	stw	r2,4(r19)
   11ecc:	a8bfff17 	ldw	r2,-4(r21)
   11ed0:	a009883a 	mov	r4,r20
   11ed4:	1080004c 	andi	r2,r2,1
   11ed8:	1462b03a 	or	r17,r2,r17
   11edc:	ac7fff15 	stw	r17,-4(r21)
   11ee0:	00136840 	call	13684 <__malloc_unlock>
   11ee4:	a805883a 	mov	r2,r21
   11ee8:	003f6b06 	br	11c98 <_gp+0xffff2a98>
   11eec:	a80b883a 	mov	r5,r21
   11ef0:	9009883a 	mov	r4,r18
   11ef4:	00118a40 	call	118a4 <memmove>
   11ef8:	003f4e06 	br	11c34 <_gp+0xffff2a34>
   11efc:	89000404 	addi	r4,r17,16
   11f00:	b93fbc16 	blt	r23,r4,11df4 <_gp+0xffff2bf4>
   11f04:	b0800317 	ldw	r2,12(r22)
   11f08:	b0c00217 	ldw	r3,8(r22)
   11f0c:	81bfff04 	addi	r6,r16,-4
   11f10:	01000904 	movi	r4,36
   11f14:	18800315 	stw	r2,12(r3)
   11f18:	10c00215 	stw	r3,8(r2)
   11f1c:	b4800204 	addi	r18,r22,8
   11f20:	21804336 	bltu	r4,r6,12030 <_realloc_r+0x508>
   11f24:	008004c4 	movi	r2,19
   11f28:	11803f2e 	bgeu	r2,r6,12028 <_realloc_r+0x500>
   11f2c:	a8800017 	ldw	r2,0(r21)
   11f30:	b0800215 	stw	r2,8(r22)
   11f34:	a8800117 	ldw	r2,4(r21)
   11f38:	b0800315 	stw	r2,12(r22)
   11f3c:	008006c4 	movi	r2,27
   11f40:	11803f36 	bltu	r2,r6,12040 <_realloc_r+0x518>
   11f44:	b0800404 	addi	r2,r22,16
   11f48:	ad400204 	addi	r21,r21,8
   11f4c:	a8c00017 	ldw	r3,0(r21)
   11f50:	10c00015 	stw	r3,0(r2)
   11f54:	a8c00117 	ldw	r3,4(r21)
   11f58:	10c00115 	stw	r3,4(r2)
   11f5c:	a8c00217 	ldw	r3,8(r21)
   11f60:	10c00215 	stw	r3,8(r2)
   11f64:	b447883a 	add	r3,r22,r17
   11f68:	bc45c83a 	sub	r2,r23,r17
   11f6c:	e0c00215 	stw	r3,8(fp)
   11f70:	10800054 	ori	r2,r2,1
   11f74:	18800115 	stw	r2,4(r3)
   11f78:	b0800117 	ldw	r2,4(r22)
   11f7c:	a009883a 	mov	r4,r20
   11f80:	1080004c 	andi	r2,r2,1
   11f84:	1462b03a 	or	r17,r2,r17
   11f88:	b4400115 	stw	r17,4(r22)
   11f8c:	00136840 	call	13684 <__malloc_unlock>
   11f90:	9005883a 	mov	r2,r18
   11f94:	003f4006 	br	11c98 <_gp+0xffff2a98>
   11f98:	a8c00217 	ldw	r3,8(r21)
   11f9c:	90c00215 	stw	r3,8(r18)
   11fa0:	a8c00317 	ldw	r3,12(r21)
   11fa4:	90c00315 	stw	r3,12(r18)
   11fa8:	30801126 	beq	r6,r2,11ff0 <_realloc_r+0x4c8>
   11fac:	90800404 	addi	r2,r18,16
   11fb0:	a8c00404 	addi	r3,r21,16
   11fb4:	003f1906 	br	11c1c <_gp+0xffff2a1c>
   11fb8:	90ffff17 	ldw	r3,-4(r18)
   11fbc:	00bfff04 	movi	r2,-4
   11fc0:	a825883a 	mov	r18,r21
   11fc4:	1884703a 	and	r2,r3,r2
   11fc8:	80a1883a 	add	r16,r16,r2
   11fcc:	003f2406 	br	11c60 <_gp+0xffff2a60>
   11fd0:	a8800217 	ldw	r2,8(r21)
   11fd4:	b0800415 	stw	r2,16(r22)
   11fd8:	a8800317 	ldw	r2,12(r21)
   11fdc:	b0800515 	stw	r2,20(r22)
   11fe0:	31000a26 	beq	r6,r4,1200c <_realloc_r+0x4e4>
   11fe4:	b0800604 	addi	r2,r22,24
   11fe8:	ad400404 	addi	r21,r21,16
   11fec:	003fa906 	br	11e94 <_gp+0xffff2c94>
   11ff0:	a9000417 	ldw	r4,16(r21)
   11ff4:	90800604 	addi	r2,r18,24
   11ff8:	a8c00604 	addi	r3,r21,24
   11ffc:	91000415 	stw	r4,16(r18)
   12000:	a9000517 	ldw	r4,20(r21)
   12004:	91000515 	stw	r4,20(r18)
   12008:	003f0406 	br	11c1c <_gp+0xffff2a1c>
   1200c:	a8c00417 	ldw	r3,16(r21)
   12010:	ad400604 	addi	r21,r21,24
   12014:	b0800804 	addi	r2,r22,32
   12018:	b0c00615 	stw	r3,24(r22)
   1201c:	a8ffff17 	ldw	r3,-4(r21)
   12020:	b0c00715 	stw	r3,28(r22)
   12024:	003f9b06 	br	11e94 <_gp+0xffff2c94>
   12028:	9005883a 	mov	r2,r18
   1202c:	003fc706 	br	11f4c <_gp+0xffff2d4c>
   12030:	a80b883a 	mov	r5,r21
   12034:	9009883a 	mov	r4,r18
   12038:	00118a40 	call	118a4 <memmove>
   1203c:	003fc906 	br	11f64 <_gp+0xffff2d64>
   12040:	a8800217 	ldw	r2,8(r21)
   12044:	b0800415 	stw	r2,16(r22)
   12048:	a8800317 	ldw	r2,12(r21)
   1204c:	b0800515 	stw	r2,20(r22)
   12050:	31000726 	beq	r6,r4,12070 <_realloc_r+0x548>
   12054:	b0800604 	addi	r2,r22,24
   12058:	ad400404 	addi	r21,r21,16
   1205c:	003fbb06 	br	11f4c <_gp+0xffff2d4c>
   12060:	a009883a 	mov	r4,r20
   12064:	00136840 	call	13684 <__malloc_unlock>
   12068:	0005883a 	mov	r2,zero
   1206c:	003f0a06 	br	11c98 <_gp+0xffff2a98>
   12070:	a8c00417 	ldw	r3,16(r21)
   12074:	ad400604 	addi	r21,r21,24
   12078:	b0800804 	addi	r2,r22,32
   1207c:	b0c00615 	stw	r3,24(r22)
   12080:	a8ffff17 	ldw	r3,-4(r21)
   12084:	b0c00715 	stw	r3,28(r22)
   12088:	003fb006 	br	11f4c <_gp+0xffff2d4c>

0001208c <_sbrk_r>:
   1208c:	defffd04 	addi	sp,sp,-12
   12090:	dc000015 	stw	r16,0(sp)
   12094:	040000b4 	movhi	r16,2
   12098:	dc400115 	stw	r17,4(sp)
   1209c:	84233004 	addi	r16,r16,-29504
   120a0:	2023883a 	mov	r17,r4
   120a4:	2809883a 	mov	r4,r5
   120a8:	dfc00215 	stw	ra,8(sp)
   120ac:	80000015 	stw	zero,0(r16)
   120b0:	00138440 	call	13844 <sbrk>
   120b4:	00ffffc4 	movi	r3,-1
   120b8:	10c00526 	beq	r2,r3,120d0 <_sbrk_r+0x44>
   120bc:	dfc00217 	ldw	ra,8(sp)
   120c0:	dc400117 	ldw	r17,4(sp)
   120c4:	dc000017 	ldw	r16,0(sp)
   120c8:	dec00304 	addi	sp,sp,12
   120cc:	f800283a 	ret
   120d0:	80c00017 	ldw	r3,0(r16)
   120d4:	183ff926 	beq	r3,zero,120bc <_gp+0xffff2ebc>
   120d8:	88c00015 	stw	r3,0(r17)
   120dc:	003ff706 	br	120bc <_gp+0xffff2ebc>

000120e0 <__sread>:
   120e0:	defffe04 	addi	sp,sp,-8
   120e4:	dc000015 	stw	r16,0(sp)
   120e8:	2821883a 	mov	r16,r5
   120ec:	2940038f 	ldh	r5,14(r5)
   120f0:	dfc00115 	stw	ra,4(sp)
   120f4:	0012e200 	call	12e20 <_read_r>
   120f8:	10000716 	blt	r2,zero,12118 <__sread+0x38>
   120fc:	80c01417 	ldw	r3,80(r16)
   12100:	1887883a 	add	r3,r3,r2
   12104:	80c01415 	stw	r3,80(r16)
   12108:	dfc00117 	ldw	ra,4(sp)
   1210c:	dc000017 	ldw	r16,0(sp)
   12110:	dec00204 	addi	sp,sp,8
   12114:	f800283a 	ret
   12118:	80c0030b 	ldhu	r3,12(r16)
   1211c:	18fbffcc 	andi	r3,r3,61439
   12120:	80c0030d 	sth	r3,12(r16)
   12124:	dfc00117 	ldw	ra,4(sp)
   12128:	dc000017 	ldw	r16,0(sp)
   1212c:	dec00204 	addi	sp,sp,8
   12130:	f800283a 	ret

00012134 <__seofread>:
   12134:	0005883a 	mov	r2,zero
   12138:	f800283a 	ret

0001213c <__swrite>:
   1213c:	2880030b 	ldhu	r2,12(r5)
   12140:	defffb04 	addi	sp,sp,-20
   12144:	dcc00315 	stw	r19,12(sp)
   12148:	dc800215 	stw	r18,8(sp)
   1214c:	dc400115 	stw	r17,4(sp)
   12150:	dc000015 	stw	r16,0(sp)
   12154:	dfc00415 	stw	ra,16(sp)
   12158:	10c0400c 	andi	r3,r2,256
   1215c:	2821883a 	mov	r16,r5
   12160:	2023883a 	mov	r17,r4
   12164:	3025883a 	mov	r18,r6
   12168:	3827883a 	mov	r19,r7
   1216c:	18000526 	beq	r3,zero,12184 <__swrite+0x48>
   12170:	2940038f 	ldh	r5,14(r5)
   12174:	01c00084 	movi	r7,2
   12178:	000d883a 	mov	r6,zero
   1217c:	0012c040 	call	12c04 <_lseek_r>
   12180:	8080030b 	ldhu	r2,12(r16)
   12184:	8140038f 	ldh	r5,14(r16)
   12188:	10bbffcc 	andi	r2,r2,61439
   1218c:	980f883a 	mov	r7,r19
   12190:	900d883a 	mov	r6,r18
   12194:	8809883a 	mov	r4,r17
   12198:	8080030d 	sth	r2,12(r16)
   1219c:	dfc00417 	ldw	ra,16(sp)
   121a0:	dcc00317 	ldw	r19,12(sp)
   121a4:	dc800217 	ldw	r18,8(sp)
   121a8:	dc400117 	ldw	r17,4(sp)
   121ac:	dc000017 	ldw	r16,0(sp)
   121b0:	dec00504 	addi	sp,sp,20
   121b4:	001221c1 	jmpi	1221c <_write_r>

000121b8 <__sseek>:
   121b8:	defffe04 	addi	sp,sp,-8
   121bc:	dc000015 	stw	r16,0(sp)
   121c0:	2821883a 	mov	r16,r5
   121c4:	2940038f 	ldh	r5,14(r5)
   121c8:	dfc00115 	stw	ra,4(sp)
   121cc:	0012c040 	call	12c04 <_lseek_r>
   121d0:	00ffffc4 	movi	r3,-1
   121d4:	10c00826 	beq	r2,r3,121f8 <__sseek+0x40>
   121d8:	80c0030b 	ldhu	r3,12(r16)
   121dc:	80801415 	stw	r2,80(r16)
   121e0:	18c40014 	ori	r3,r3,4096
   121e4:	80c0030d 	sth	r3,12(r16)
   121e8:	dfc00117 	ldw	ra,4(sp)
   121ec:	dc000017 	ldw	r16,0(sp)
   121f0:	dec00204 	addi	sp,sp,8
   121f4:	f800283a 	ret
   121f8:	80c0030b 	ldhu	r3,12(r16)
   121fc:	18fbffcc 	andi	r3,r3,61439
   12200:	80c0030d 	sth	r3,12(r16)
   12204:	dfc00117 	ldw	ra,4(sp)
   12208:	dc000017 	ldw	r16,0(sp)
   1220c:	dec00204 	addi	sp,sp,8
   12210:	f800283a 	ret

00012214 <__sclose>:
   12214:	2940038f 	ldh	r5,14(r5)
   12218:	00123d01 	jmpi	123d0 <_close_r>

0001221c <_write_r>:
   1221c:	defffd04 	addi	sp,sp,-12
   12220:	2805883a 	mov	r2,r5
   12224:	dc000015 	stw	r16,0(sp)
   12228:	040000b4 	movhi	r16,2
   1222c:	dc400115 	stw	r17,4(sp)
   12230:	300b883a 	mov	r5,r6
   12234:	84233004 	addi	r16,r16,-29504
   12238:	2023883a 	mov	r17,r4
   1223c:	380d883a 	mov	r6,r7
   12240:	1009883a 	mov	r4,r2
   12244:	dfc00215 	stw	ra,8(sp)
   12248:	80000015 	stw	zero,0(r16)
   1224c:	00139300 	call	13930 <write>
   12250:	00ffffc4 	movi	r3,-1
   12254:	10c00526 	beq	r2,r3,1226c <_write_r+0x50>
   12258:	dfc00217 	ldw	ra,8(sp)
   1225c:	dc400117 	ldw	r17,4(sp)
   12260:	dc000017 	ldw	r16,0(sp)
   12264:	dec00304 	addi	sp,sp,12
   12268:	f800283a 	ret
   1226c:	80c00017 	ldw	r3,0(r16)
   12270:	183ff926 	beq	r3,zero,12258 <_gp+0xffff3058>
   12274:	88c00015 	stw	r3,0(r17)
   12278:	003ff706 	br	12258 <_gp+0xffff3058>

0001227c <__swsetup_r>:
   1227c:	00800074 	movhi	r2,1
   12280:	defffd04 	addi	sp,sp,-12
   12284:	109c8304 	addi	r2,r2,29196
   12288:	dc400115 	stw	r17,4(sp)
   1228c:	2023883a 	mov	r17,r4
   12290:	11000017 	ldw	r4,0(r2)
   12294:	dc000015 	stw	r16,0(sp)
   12298:	dfc00215 	stw	ra,8(sp)
   1229c:	2821883a 	mov	r16,r5
   122a0:	20000226 	beq	r4,zero,122ac <__swsetup_r+0x30>
   122a4:	20800e17 	ldw	r2,56(r4)
   122a8:	10003126 	beq	r2,zero,12370 <__swsetup_r+0xf4>
   122ac:	8080030b 	ldhu	r2,12(r16)
   122b0:	10c0020c 	andi	r3,r2,8
   122b4:	1009883a 	mov	r4,r2
   122b8:	18000f26 	beq	r3,zero,122f8 <__swsetup_r+0x7c>
   122bc:	80c00417 	ldw	r3,16(r16)
   122c0:	18001526 	beq	r3,zero,12318 <__swsetup_r+0x9c>
   122c4:	1100004c 	andi	r4,r2,1
   122c8:	20001c1e 	bne	r4,zero,1233c <__swsetup_r+0xc0>
   122cc:	1080008c 	andi	r2,r2,2
   122d0:	1000291e 	bne	r2,zero,12378 <__swsetup_r+0xfc>
   122d4:	80800517 	ldw	r2,20(r16)
   122d8:	80800215 	stw	r2,8(r16)
   122dc:	18001c26 	beq	r3,zero,12350 <__swsetup_r+0xd4>
   122e0:	0005883a 	mov	r2,zero
   122e4:	dfc00217 	ldw	ra,8(sp)
   122e8:	dc400117 	ldw	r17,4(sp)
   122ec:	dc000017 	ldw	r16,0(sp)
   122f0:	dec00304 	addi	sp,sp,12
   122f4:	f800283a 	ret
   122f8:	2080040c 	andi	r2,r4,16
   122fc:	10002e26 	beq	r2,zero,123b8 <__swsetup_r+0x13c>
   12300:	2080010c 	andi	r2,r4,4
   12304:	10001e1e 	bne	r2,zero,12380 <__swsetup_r+0x104>
   12308:	80c00417 	ldw	r3,16(r16)
   1230c:	20800214 	ori	r2,r4,8
   12310:	8080030d 	sth	r2,12(r16)
   12314:	183feb1e 	bne	r3,zero,122c4 <_gp+0xffff30c4>
   12318:	1100a00c 	andi	r4,r2,640
   1231c:	01408004 	movi	r5,512
   12320:	217fe826 	beq	r4,r5,122c4 <_gp+0xffff30c4>
   12324:	800b883a 	mov	r5,r16
   12328:	8809883a 	mov	r4,r17
   1232c:	0012c640 	call	12c64 <__smakebuf_r>
   12330:	8080030b 	ldhu	r2,12(r16)
   12334:	80c00417 	ldw	r3,16(r16)
   12338:	003fe206 	br	122c4 <_gp+0xffff30c4>
   1233c:	80800517 	ldw	r2,20(r16)
   12340:	80000215 	stw	zero,8(r16)
   12344:	0085c83a 	sub	r2,zero,r2
   12348:	80800615 	stw	r2,24(r16)
   1234c:	183fe41e 	bne	r3,zero,122e0 <_gp+0xffff30e0>
   12350:	80c0030b 	ldhu	r3,12(r16)
   12354:	0005883a 	mov	r2,zero
   12358:	1900200c 	andi	r4,r3,128
   1235c:	203fe126 	beq	r4,zero,122e4 <_gp+0xffff30e4>
   12360:	18c01014 	ori	r3,r3,64
   12364:	80c0030d 	sth	r3,12(r16)
   12368:	00bfffc4 	movi	r2,-1
   1236c:	003fdd06 	br	122e4 <_gp+0xffff30e4>
   12370:	00107d80 	call	107d8 <__sinit>
   12374:	003fcd06 	br	122ac <_gp+0xffff30ac>
   12378:	0005883a 	mov	r2,zero
   1237c:	003fd606 	br	122d8 <_gp+0xffff30d8>
   12380:	81400c17 	ldw	r5,48(r16)
   12384:	28000626 	beq	r5,zero,123a0 <__swsetup_r+0x124>
   12388:	80801004 	addi	r2,r16,64
   1238c:	28800326 	beq	r5,r2,1239c <__swsetup_r+0x120>
   12390:	8809883a 	mov	r4,r17
   12394:	00128f40 	call	128f4 <_free_r>
   12398:	8100030b 	ldhu	r4,12(r16)
   1239c:	80000c15 	stw	zero,48(r16)
   123a0:	80c00417 	ldw	r3,16(r16)
   123a4:	00bff6c4 	movi	r2,-37
   123a8:	1108703a 	and	r4,r2,r4
   123ac:	80000115 	stw	zero,4(r16)
   123b0:	80c00015 	stw	r3,0(r16)
   123b4:	003fd506 	br	1230c <_gp+0xffff310c>
   123b8:	00800244 	movi	r2,9
   123bc:	88800015 	stw	r2,0(r17)
   123c0:	20801014 	ori	r2,r4,64
   123c4:	8080030d 	sth	r2,12(r16)
   123c8:	00bfffc4 	movi	r2,-1
   123cc:	003fc506 	br	122e4 <_gp+0xffff30e4>

000123d0 <_close_r>:
   123d0:	defffd04 	addi	sp,sp,-12
   123d4:	dc000015 	stw	r16,0(sp)
   123d8:	040000b4 	movhi	r16,2
   123dc:	dc400115 	stw	r17,4(sp)
   123e0:	84233004 	addi	r16,r16,-29504
   123e4:	2023883a 	mov	r17,r4
   123e8:	2809883a 	mov	r4,r5
   123ec:	dfc00215 	stw	ra,8(sp)
   123f0:	80000015 	stw	zero,0(r16)
   123f4:	00131200 	call	13120 <close>
   123f8:	00ffffc4 	movi	r3,-1
   123fc:	10c00526 	beq	r2,r3,12414 <_close_r+0x44>
   12400:	dfc00217 	ldw	ra,8(sp)
   12404:	dc400117 	ldw	r17,4(sp)
   12408:	dc000017 	ldw	r16,0(sp)
   1240c:	dec00304 	addi	sp,sp,12
   12410:	f800283a 	ret
   12414:	80c00017 	ldw	r3,0(r16)
   12418:	183ff926 	beq	r3,zero,12400 <_gp+0xffff3200>
   1241c:	88c00015 	stw	r3,0(r17)
   12420:	003ff706 	br	12400 <_gp+0xffff3200>

00012424 <_fclose_r>:
   12424:	28003926 	beq	r5,zero,1250c <_fclose_r+0xe8>
   12428:	defffc04 	addi	sp,sp,-16
   1242c:	dc400115 	stw	r17,4(sp)
   12430:	dc000015 	stw	r16,0(sp)
   12434:	dfc00315 	stw	ra,12(sp)
   12438:	dc800215 	stw	r18,8(sp)
   1243c:	2023883a 	mov	r17,r4
   12440:	2821883a 	mov	r16,r5
   12444:	20000226 	beq	r4,zero,12450 <_fclose_r+0x2c>
   12448:	20800e17 	ldw	r2,56(r4)
   1244c:	10002726 	beq	r2,zero,124ec <_fclose_r+0xc8>
   12450:	8080030f 	ldh	r2,12(r16)
   12454:	1000071e 	bne	r2,zero,12474 <_fclose_r+0x50>
   12458:	0005883a 	mov	r2,zero
   1245c:	dfc00317 	ldw	ra,12(sp)
   12460:	dc800217 	ldw	r18,8(sp)
   12464:	dc400117 	ldw	r17,4(sp)
   12468:	dc000017 	ldw	r16,0(sp)
   1246c:	dec00404 	addi	sp,sp,16
   12470:	f800283a 	ret
   12474:	800b883a 	mov	r5,r16
   12478:	8809883a 	mov	r4,r17
   1247c:	00125280 	call	12528 <__sflush_r>
   12480:	1025883a 	mov	r18,r2
   12484:	80800b17 	ldw	r2,44(r16)
   12488:	10000426 	beq	r2,zero,1249c <_fclose_r+0x78>
   1248c:	81400717 	ldw	r5,28(r16)
   12490:	8809883a 	mov	r4,r17
   12494:	103ee83a 	callr	r2
   12498:	10001616 	blt	r2,zero,124f4 <_fclose_r+0xd0>
   1249c:	8080030b 	ldhu	r2,12(r16)
   124a0:	1080200c 	andi	r2,r2,128
   124a4:	1000151e 	bne	r2,zero,124fc <_fclose_r+0xd8>
   124a8:	81400c17 	ldw	r5,48(r16)
   124ac:	28000526 	beq	r5,zero,124c4 <_fclose_r+0xa0>
   124b0:	80801004 	addi	r2,r16,64
   124b4:	28800226 	beq	r5,r2,124c0 <_fclose_r+0x9c>
   124b8:	8809883a 	mov	r4,r17
   124bc:	00128f40 	call	128f4 <_free_r>
   124c0:	80000c15 	stw	zero,48(r16)
   124c4:	81401117 	ldw	r5,68(r16)
   124c8:	28000326 	beq	r5,zero,124d8 <_fclose_r+0xb4>
   124cc:	8809883a 	mov	r4,r17
   124d0:	00128f40 	call	128f4 <_free_r>
   124d4:	80001115 	stw	zero,68(r16)
   124d8:	00107e80 	call	107e8 <__sfp_lock_acquire>
   124dc:	8000030d 	sth	zero,12(r16)
   124e0:	00107ec0 	call	107ec <__sfp_lock_release>
   124e4:	9005883a 	mov	r2,r18
   124e8:	003fdc06 	br	1245c <_gp+0xffff325c>
   124ec:	00107d80 	call	107d8 <__sinit>
   124f0:	003fd706 	br	12450 <_gp+0xffff3250>
   124f4:	04bfffc4 	movi	r18,-1
   124f8:	003fe806 	br	1249c <_gp+0xffff329c>
   124fc:	81400417 	ldw	r5,16(r16)
   12500:	8809883a 	mov	r4,r17
   12504:	00128f40 	call	128f4 <_free_r>
   12508:	003fe706 	br	124a8 <_gp+0xffff32a8>
   1250c:	0005883a 	mov	r2,zero
   12510:	f800283a 	ret

00012514 <fclose>:
   12514:	00800074 	movhi	r2,1
   12518:	109c8304 	addi	r2,r2,29196
   1251c:	200b883a 	mov	r5,r4
   12520:	11000017 	ldw	r4,0(r2)
   12524:	00124241 	jmpi	12424 <_fclose_r>

00012528 <__sflush_r>:
   12528:	2880030b 	ldhu	r2,12(r5)
   1252c:	defffb04 	addi	sp,sp,-20
   12530:	dcc00315 	stw	r19,12(sp)
   12534:	dc400115 	stw	r17,4(sp)
   12538:	dfc00415 	stw	ra,16(sp)
   1253c:	dc800215 	stw	r18,8(sp)
   12540:	dc000015 	stw	r16,0(sp)
   12544:	10c0020c 	andi	r3,r2,8
   12548:	2823883a 	mov	r17,r5
   1254c:	2027883a 	mov	r19,r4
   12550:	1800311e 	bne	r3,zero,12618 <__sflush_r+0xf0>
   12554:	28c00117 	ldw	r3,4(r5)
   12558:	10820014 	ori	r2,r2,2048
   1255c:	2880030d 	sth	r2,12(r5)
   12560:	00c04b0e 	bge	zero,r3,12690 <__sflush_r+0x168>
   12564:	8a000a17 	ldw	r8,40(r17)
   12568:	40002326 	beq	r8,zero,125f8 <__sflush_r+0xd0>
   1256c:	9c000017 	ldw	r16,0(r19)
   12570:	10c4000c 	andi	r3,r2,4096
   12574:	98000015 	stw	zero,0(r19)
   12578:	18004826 	beq	r3,zero,1269c <__sflush_r+0x174>
   1257c:	89801417 	ldw	r6,80(r17)
   12580:	10c0010c 	andi	r3,r2,4
   12584:	18000626 	beq	r3,zero,125a0 <__sflush_r+0x78>
   12588:	88c00117 	ldw	r3,4(r17)
   1258c:	88800c17 	ldw	r2,48(r17)
   12590:	30cdc83a 	sub	r6,r6,r3
   12594:	10000226 	beq	r2,zero,125a0 <__sflush_r+0x78>
   12598:	88800f17 	ldw	r2,60(r17)
   1259c:	308dc83a 	sub	r6,r6,r2
   125a0:	89400717 	ldw	r5,28(r17)
   125a4:	000f883a 	mov	r7,zero
   125a8:	9809883a 	mov	r4,r19
   125ac:	403ee83a 	callr	r8
   125b0:	00ffffc4 	movi	r3,-1
   125b4:	10c04426 	beq	r2,r3,126c8 <__sflush_r+0x1a0>
   125b8:	88c0030b 	ldhu	r3,12(r17)
   125bc:	89000417 	ldw	r4,16(r17)
   125c0:	88000115 	stw	zero,4(r17)
   125c4:	197dffcc 	andi	r5,r3,63487
   125c8:	8940030d 	sth	r5,12(r17)
   125cc:	89000015 	stw	r4,0(r17)
   125d0:	18c4000c 	andi	r3,r3,4096
   125d4:	18002c1e 	bne	r3,zero,12688 <__sflush_r+0x160>
   125d8:	89400c17 	ldw	r5,48(r17)
   125dc:	9c000015 	stw	r16,0(r19)
   125e0:	28000526 	beq	r5,zero,125f8 <__sflush_r+0xd0>
   125e4:	88801004 	addi	r2,r17,64
   125e8:	28800226 	beq	r5,r2,125f4 <__sflush_r+0xcc>
   125ec:	9809883a 	mov	r4,r19
   125f0:	00128f40 	call	128f4 <_free_r>
   125f4:	88000c15 	stw	zero,48(r17)
   125f8:	0005883a 	mov	r2,zero
   125fc:	dfc00417 	ldw	ra,16(sp)
   12600:	dcc00317 	ldw	r19,12(sp)
   12604:	dc800217 	ldw	r18,8(sp)
   12608:	dc400117 	ldw	r17,4(sp)
   1260c:	dc000017 	ldw	r16,0(sp)
   12610:	dec00504 	addi	sp,sp,20
   12614:	f800283a 	ret
   12618:	2c800417 	ldw	r18,16(r5)
   1261c:	903ff626 	beq	r18,zero,125f8 <_gp+0xffff33f8>
   12620:	2c000017 	ldw	r16,0(r5)
   12624:	108000cc 	andi	r2,r2,3
   12628:	2c800015 	stw	r18,0(r5)
   1262c:	84a1c83a 	sub	r16,r16,r18
   12630:	1000131e 	bne	r2,zero,12680 <__sflush_r+0x158>
   12634:	28800517 	ldw	r2,20(r5)
   12638:	88800215 	stw	r2,8(r17)
   1263c:	04000316 	blt	zero,r16,1264c <__sflush_r+0x124>
   12640:	003fed06 	br	125f8 <_gp+0xffff33f8>
   12644:	90a5883a 	add	r18,r18,r2
   12648:	043feb0e 	bge	zero,r16,125f8 <_gp+0xffff33f8>
   1264c:	88800917 	ldw	r2,36(r17)
   12650:	89400717 	ldw	r5,28(r17)
   12654:	800f883a 	mov	r7,r16
   12658:	900d883a 	mov	r6,r18
   1265c:	9809883a 	mov	r4,r19
   12660:	103ee83a 	callr	r2
   12664:	80a1c83a 	sub	r16,r16,r2
   12668:	00bff616 	blt	zero,r2,12644 <_gp+0xffff3444>
   1266c:	88c0030b 	ldhu	r3,12(r17)
   12670:	00bfffc4 	movi	r2,-1
   12674:	18c01014 	ori	r3,r3,64
   12678:	88c0030d 	sth	r3,12(r17)
   1267c:	003fdf06 	br	125fc <_gp+0xffff33fc>
   12680:	0005883a 	mov	r2,zero
   12684:	003fec06 	br	12638 <_gp+0xffff3438>
   12688:	88801415 	stw	r2,80(r17)
   1268c:	003fd206 	br	125d8 <_gp+0xffff33d8>
   12690:	28c00f17 	ldw	r3,60(r5)
   12694:	00ffb316 	blt	zero,r3,12564 <_gp+0xffff3364>
   12698:	003fd706 	br	125f8 <_gp+0xffff33f8>
   1269c:	89400717 	ldw	r5,28(r17)
   126a0:	000d883a 	mov	r6,zero
   126a4:	01c00044 	movi	r7,1
   126a8:	9809883a 	mov	r4,r19
   126ac:	403ee83a 	callr	r8
   126b0:	100d883a 	mov	r6,r2
   126b4:	00bfffc4 	movi	r2,-1
   126b8:	30801426 	beq	r6,r2,1270c <__sflush_r+0x1e4>
   126bc:	8880030b 	ldhu	r2,12(r17)
   126c0:	8a000a17 	ldw	r8,40(r17)
   126c4:	003fae06 	br	12580 <_gp+0xffff3380>
   126c8:	98c00017 	ldw	r3,0(r19)
   126cc:	183fba26 	beq	r3,zero,125b8 <_gp+0xffff33b8>
   126d0:	01000744 	movi	r4,29
   126d4:	19000626 	beq	r3,r4,126f0 <__sflush_r+0x1c8>
   126d8:	01000584 	movi	r4,22
   126dc:	19000426 	beq	r3,r4,126f0 <__sflush_r+0x1c8>
   126e0:	88c0030b 	ldhu	r3,12(r17)
   126e4:	18c01014 	ori	r3,r3,64
   126e8:	88c0030d 	sth	r3,12(r17)
   126ec:	003fc306 	br	125fc <_gp+0xffff33fc>
   126f0:	8880030b 	ldhu	r2,12(r17)
   126f4:	88c00417 	ldw	r3,16(r17)
   126f8:	88000115 	stw	zero,4(r17)
   126fc:	10bdffcc 	andi	r2,r2,63487
   12700:	8880030d 	sth	r2,12(r17)
   12704:	88c00015 	stw	r3,0(r17)
   12708:	003fb306 	br	125d8 <_gp+0xffff33d8>
   1270c:	98800017 	ldw	r2,0(r19)
   12710:	103fea26 	beq	r2,zero,126bc <_gp+0xffff34bc>
   12714:	00c00744 	movi	r3,29
   12718:	10c00226 	beq	r2,r3,12724 <__sflush_r+0x1fc>
   1271c:	00c00584 	movi	r3,22
   12720:	10c0031e 	bne	r2,r3,12730 <__sflush_r+0x208>
   12724:	9c000015 	stw	r16,0(r19)
   12728:	0005883a 	mov	r2,zero
   1272c:	003fb306 	br	125fc <_gp+0xffff33fc>
   12730:	88c0030b 	ldhu	r3,12(r17)
   12734:	3005883a 	mov	r2,r6
   12738:	18c01014 	ori	r3,r3,64
   1273c:	88c0030d 	sth	r3,12(r17)
   12740:	003fae06 	br	125fc <_gp+0xffff33fc>

00012744 <_fflush_r>:
   12744:	defffd04 	addi	sp,sp,-12
   12748:	dc000115 	stw	r16,4(sp)
   1274c:	dfc00215 	stw	ra,8(sp)
   12750:	2021883a 	mov	r16,r4
   12754:	20000226 	beq	r4,zero,12760 <_fflush_r+0x1c>
   12758:	20800e17 	ldw	r2,56(r4)
   1275c:	10000c26 	beq	r2,zero,12790 <_fflush_r+0x4c>
   12760:	2880030f 	ldh	r2,12(r5)
   12764:	1000051e 	bne	r2,zero,1277c <_fflush_r+0x38>
   12768:	0005883a 	mov	r2,zero
   1276c:	dfc00217 	ldw	ra,8(sp)
   12770:	dc000117 	ldw	r16,4(sp)
   12774:	dec00304 	addi	sp,sp,12
   12778:	f800283a 	ret
   1277c:	8009883a 	mov	r4,r16
   12780:	dfc00217 	ldw	ra,8(sp)
   12784:	dc000117 	ldw	r16,4(sp)
   12788:	dec00304 	addi	sp,sp,12
   1278c:	00125281 	jmpi	12528 <__sflush_r>
   12790:	d9400015 	stw	r5,0(sp)
   12794:	00107d80 	call	107d8 <__sinit>
   12798:	d9400017 	ldw	r5,0(sp)
   1279c:	003ff006 	br	12760 <_gp+0xffff3560>

000127a0 <fflush>:
   127a0:	20000526 	beq	r4,zero,127b8 <fflush+0x18>
   127a4:	00800074 	movhi	r2,1
   127a8:	109c8304 	addi	r2,r2,29196
   127ac:	200b883a 	mov	r5,r4
   127b0:	11000017 	ldw	r4,0(r2)
   127b4:	00127441 	jmpi	12744 <_fflush_r>
   127b8:	00800074 	movhi	r2,1
   127bc:	109c8204 	addi	r2,r2,29192
   127c0:	11000017 	ldw	r4,0(r2)
   127c4:	01400074 	movhi	r5,1
   127c8:	2949d104 	addi	r5,r5,10052
   127cc:	0010da81 	jmpi	10da8 <_fwalk_reent>

000127d0 <_malloc_trim_r>:
   127d0:	defffb04 	addi	sp,sp,-20
   127d4:	dcc00315 	stw	r19,12(sp)
   127d8:	04c00074 	movhi	r19,1
   127dc:	dc800215 	stw	r18,8(sp)
   127e0:	dc400115 	stw	r17,4(sp)
   127e4:	dc000015 	stw	r16,0(sp)
   127e8:	dfc00415 	stw	ra,16(sp)
   127ec:	2821883a 	mov	r16,r5
   127f0:	9cd6fc04 	addi	r19,r19,23536
   127f4:	2025883a 	mov	r18,r4
   127f8:	00136600 	call	13660 <__malloc_lock>
   127fc:	98800217 	ldw	r2,8(r19)
   12800:	14400117 	ldw	r17,4(r2)
   12804:	00bfff04 	movi	r2,-4
   12808:	88a2703a 	and	r17,r17,r2
   1280c:	8c21c83a 	sub	r16,r17,r16
   12810:	8403fbc4 	addi	r16,r16,4079
   12814:	8020d33a 	srli	r16,r16,12
   12818:	0083ffc4 	movi	r2,4095
   1281c:	843fffc4 	addi	r16,r16,-1
   12820:	8020933a 	slli	r16,r16,12
   12824:	1400060e 	bge	r2,r16,12840 <_malloc_trim_r+0x70>
   12828:	000b883a 	mov	r5,zero
   1282c:	9009883a 	mov	r4,r18
   12830:	001208c0 	call	1208c <_sbrk_r>
   12834:	98c00217 	ldw	r3,8(r19)
   12838:	1c47883a 	add	r3,r3,r17
   1283c:	10c00a26 	beq	r2,r3,12868 <_malloc_trim_r+0x98>
   12840:	9009883a 	mov	r4,r18
   12844:	00136840 	call	13684 <__malloc_unlock>
   12848:	0005883a 	mov	r2,zero
   1284c:	dfc00417 	ldw	ra,16(sp)
   12850:	dcc00317 	ldw	r19,12(sp)
   12854:	dc800217 	ldw	r18,8(sp)
   12858:	dc400117 	ldw	r17,4(sp)
   1285c:	dc000017 	ldw	r16,0(sp)
   12860:	dec00504 	addi	sp,sp,20
   12864:	f800283a 	ret
   12868:	040bc83a 	sub	r5,zero,r16
   1286c:	9009883a 	mov	r4,r18
   12870:	001208c0 	call	1208c <_sbrk_r>
   12874:	00ffffc4 	movi	r3,-1
   12878:	10c00d26 	beq	r2,r3,128b0 <_malloc_trim_r+0xe0>
   1287c:	00c000b4 	movhi	r3,2
   12880:	18e33804 	addi	r3,r3,-29472
   12884:	18800017 	ldw	r2,0(r3)
   12888:	99000217 	ldw	r4,8(r19)
   1288c:	8c23c83a 	sub	r17,r17,r16
   12890:	8c400054 	ori	r17,r17,1
   12894:	1421c83a 	sub	r16,r2,r16
   12898:	24400115 	stw	r17,4(r4)
   1289c:	9009883a 	mov	r4,r18
   128a0:	1c000015 	stw	r16,0(r3)
   128a4:	00136840 	call	13684 <__malloc_unlock>
   128a8:	00800044 	movi	r2,1
   128ac:	003fe706 	br	1284c <_gp+0xffff364c>
   128b0:	000b883a 	mov	r5,zero
   128b4:	9009883a 	mov	r4,r18
   128b8:	001208c0 	call	1208c <_sbrk_r>
   128bc:	99000217 	ldw	r4,8(r19)
   128c0:	014003c4 	movi	r5,15
   128c4:	1107c83a 	sub	r3,r2,r4
   128c8:	28ffdd0e 	bge	r5,r3,12840 <_gp+0xffff3640>
   128cc:	01400074 	movhi	r5,1
   128d0:	295c8404 	addi	r5,r5,29200
   128d4:	29400017 	ldw	r5,0(r5)
   128d8:	18c00054 	ori	r3,r3,1
   128dc:	20c00115 	stw	r3,4(r4)
   128e0:	00c000b4 	movhi	r3,2
   128e4:	1145c83a 	sub	r2,r2,r5
   128e8:	18e33804 	addi	r3,r3,-29472
   128ec:	18800015 	stw	r2,0(r3)
   128f0:	003fd306 	br	12840 <_gp+0xffff3640>

000128f4 <_free_r>:
   128f4:	28004126 	beq	r5,zero,129fc <_free_r+0x108>
   128f8:	defffd04 	addi	sp,sp,-12
   128fc:	dc400115 	stw	r17,4(sp)
   12900:	dc000015 	stw	r16,0(sp)
   12904:	2023883a 	mov	r17,r4
   12908:	2821883a 	mov	r16,r5
   1290c:	dfc00215 	stw	ra,8(sp)
   12910:	00136600 	call	13660 <__malloc_lock>
   12914:	81ffff17 	ldw	r7,-4(r16)
   12918:	00bfff84 	movi	r2,-2
   1291c:	01000074 	movhi	r4,1
   12920:	81bffe04 	addi	r6,r16,-8
   12924:	3884703a 	and	r2,r7,r2
   12928:	2116fc04 	addi	r4,r4,23536
   1292c:	308b883a 	add	r5,r6,r2
   12930:	2a400117 	ldw	r9,4(r5)
   12934:	22000217 	ldw	r8,8(r4)
   12938:	00ffff04 	movi	r3,-4
   1293c:	48c6703a 	and	r3,r9,r3
   12940:	2a005726 	beq	r5,r8,12aa0 <_free_r+0x1ac>
   12944:	28c00115 	stw	r3,4(r5)
   12948:	39c0004c 	andi	r7,r7,1
   1294c:	3800091e 	bne	r7,zero,12974 <_free_r+0x80>
   12950:	823ffe17 	ldw	r8,-8(r16)
   12954:	22400204 	addi	r9,r4,8
   12958:	320dc83a 	sub	r6,r6,r8
   1295c:	31c00217 	ldw	r7,8(r6)
   12960:	1205883a 	add	r2,r2,r8
   12964:	3a406526 	beq	r7,r9,12afc <_free_r+0x208>
   12968:	32000317 	ldw	r8,12(r6)
   1296c:	3a000315 	stw	r8,12(r7)
   12970:	41c00215 	stw	r7,8(r8)
   12974:	28cf883a 	add	r7,r5,r3
   12978:	39c00117 	ldw	r7,4(r7)
   1297c:	39c0004c 	andi	r7,r7,1
   12980:	38003a26 	beq	r7,zero,12a6c <_free_r+0x178>
   12984:	10c00054 	ori	r3,r2,1
   12988:	30c00115 	stw	r3,4(r6)
   1298c:	3087883a 	add	r3,r6,r2
   12990:	18800015 	stw	r2,0(r3)
   12994:	00c07fc4 	movi	r3,511
   12998:	18801936 	bltu	r3,r2,12a00 <_free_r+0x10c>
   1299c:	1004d0fa 	srli	r2,r2,3
   129a0:	01c00044 	movi	r7,1
   129a4:	21400117 	ldw	r5,4(r4)
   129a8:	10c00044 	addi	r3,r2,1
   129ac:	18c7883a 	add	r3,r3,r3
   129b0:	1005d0ba 	srai	r2,r2,2
   129b4:	18c7883a 	add	r3,r3,r3
   129b8:	18c7883a 	add	r3,r3,r3
   129bc:	1907883a 	add	r3,r3,r4
   129c0:	3884983a 	sll	r2,r7,r2
   129c4:	19c00017 	ldw	r7,0(r3)
   129c8:	1a3ffe04 	addi	r8,r3,-8
   129cc:	1144b03a 	or	r2,r2,r5
   129d0:	32000315 	stw	r8,12(r6)
   129d4:	31c00215 	stw	r7,8(r6)
   129d8:	20800115 	stw	r2,4(r4)
   129dc:	19800015 	stw	r6,0(r3)
   129e0:	39800315 	stw	r6,12(r7)
   129e4:	8809883a 	mov	r4,r17
   129e8:	dfc00217 	ldw	ra,8(sp)
   129ec:	dc400117 	ldw	r17,4(sp)
   129f0:	dc000017 	ldw	r16,0(sp)
   129f4:	dec00304 	addi	sp,sp,12
   129f8:	00136841 	jmpi	13684 <__malloc_unlock>
   129fc:	f800283a 	ret
   12a00:	100ad27a 	srli	r5,r2,9
   12a04:	00c00104 	movi	r3,4
   12a08:	19404a36 	bltu	r3,r5,12b34 <_free_r+0x240>
   12a0c:	100ad1ba 	srli	r5,r2,6
   12a10:	28c00e44 	addi	r3,r5,57
   12a14:	18c7883a 	add	r3,r3,r3
   12a18:	29400e04 	addi	r5,r5,56
   12a1c:	18c7883a 	add	r3,r3,r3
   12a20:	18c7883a 	add	r3,r3,r3
   12a24:	1909883a 	add	r4,r3,r4
   12a28:	20c00017 	ldw	r3,0(r4)
   12a2c:	01c00074 	movhi	r7,1
   12a30:	213ffe04 	addi	r4,r4,-8
   12a34:	39d6fc04 	addi	r7,r7,23536
   12a38:	20c04426 	beq	r4,r3,12b4c <_free_r+0x258>
   12a3c:	01ffff04 	movi	r7,-4
   12a40:	19400117 	ldw	r5,4(r3)
   12a44:	29ca703a 	and	r5,r5,r7
   12a48:	1140022e 	bgeu	r2,r5,12a54 <_free_r+0x160>
   12a4c:	18c00217 	ldw	r3,8(r3)
   12a50:	20fffb1e 	bne	r4,r3,12a40 <_gp+0xffff3840>
   12a54:	19000317 	ldw	r4,12(r3)
   12a58:	31000315 	stw	r4,12(r6)
   12a5c:	30c00215 	stw	r3,8(r6)
   12a60:	21800215 	stw	r6,8(r4)
   12a64:	19800315 	stw	r6,12(r3)
   12a68:	003fde06 	br	129e4 <_gp+0xffff37e4>
   12a6c:	29c00217 	ldw	r7,8(r5)
   12a70:	10c5883a 	add	r2,r2,r3
   12a74:	00c00074 	movhi	r3,1
   12a78:	18d6fe04 	addi	r3,r3,23544
   12a7c:	38c03b26 	beq	r7,r3,12b6c <_free_r+0x278>
   12a80:	2a000317 	ldw	r8,12(r5)
   12a84:	11400054 	ori	r5,r2,1
   12a88:	3087883a 	add	r3,r6,r2
   12a8c:	3a000315 	stw	r8,12(r7)
   12a90:	41c00215 	stw	r7,8(r8)
   12a94:	31400115 	stw	r5,4(r6)
   12a98:	18800015 	stw	r2,0(r3)
   12a9c:	003fbd06 	br	12994 <_gp+0xffff3794>
   12aa0:	39c0004c 	andi	r7,r7,1
   12aa4:	10c5883a 	add	r2,r2,r3
   12aa8:	3800071e 	bne	r7,zero,12ac8 <_free_r+0x1d4>
   12aac:	81fffe17 	ldw	r7,-8(r16)
   12ab0:	31cdc83a 	sub	r6,r6,r7
   12ab4:	30c00317 	ldw	r3,12(r6)
   12ab8:	31400217 	ldw	r5,8(r6)
   12abc:	11c5883a 	add	r2,r2,r7
   12ac0:	28c00315 	stw	r3,12(r5)
   12ac4:	19400215 	stw	r5,8(r3)
   12ac8:	10c00054 	ori	r3,r2,1
   12acc:	30c00115 	stw	r3,4(r6)
   12ad0:	00c00074 	movhi	r3,1
   12ad4:	18dc8504 	addi	r3,r3,29204
   12ad8:	18c00017 	ldw	r3,0(r3)
   12adc:	21800215 	stw	r6,8(r4)
   12ae0:	10ffc036 	bltu	r2,r3,129e4 <_gp+0xffff37e4>
   12ae4:	008000b4 	movhi	r2,2
   12ae8:	10a32f04 	addi	r2,r2,-29508
   12aec:	11400017 	ldw	r5,0(r2)
   12af0:	8809883a 	mov	r4,r17
   12af4:	00127d00 	call	127d0 <_malloc_trim_r>
   12af8:	003fba06 	br	129e4 <_gp+0xffff37e4>
   12afc:	28c9883a 	add	r4,r5,r3
   12b00:	21000117 	ldw	r4,4(r4)
   12b04:	2100004c 	andi	r4,r4,1
   12b08:	2000391e 	bne	r4,zero,12bf0 <_free_r+0x2fc>
   12b0c:	29c00217 	ldw	r7,8(r5)
   12b10:	29000317 	ldw	r4,12(r5)
   12b14:	1885883a 	add	r2,r3,r2
   12b18:	10c00054 	ori	r3,r2,1
   12b1c:	39000315 	stw	r4,12(r7)
   12b20:	21c00215 	stw	r7,8(r4)
   12b24:	30c00115 	stw	r3,4(r6)
   12b28:	308d883a 	add	r6,r6,r2
   12b2c:	30800015 	stw	r2,0(r6)
   12b30:	003fac06 	br	129e4 <_gp+0xffff37e4>
   12b34:	00c00504 	movi	r3,20
   12b38:	19401536 	bltu	r3,r5,12b90 <_free_r+0x29c>
   12b3c:	28c01704 	addi	r3,r5,92
   12b40:	18c7883a 	add	r3,r3,r3
   12b44:	294016c4 	addi	r5,r5,91
   12b48:	003fb406 	br	12a1c <_gp+0xffff381c>
   12b4c:	280bd0ba 	srai	r5,r5,2
   12b50:	00c00044 	movi	r3,1
   12b54:	38800117 	ldw	r2,4(r7)
   12b58:	194a983a 	sll	r5,r3,r5
   12b5c:	2007883a 	mov	r3,r4
   12b60:	2884b03a 	or	r2,r5,r2
   12b64:	38800115 	stw	r2,4(r7)
   12b68:	003fbb06 	br	12a58 <_gp+0xffff3858>
   12b6c:	21800515 	stw	r6,20(r4)
   12b70:	21800415 	stw	r6,16(r4)
   12b74:	10c00054 	ori	r3,r2,1
   12b78:	31c00315 	stw	r7,12(r6)
   12b7c:	31c00215 	stw	r7,8(r6)
   12b80:	30c00115 	stw	r3,4(r6)
   12b84:	308d883a 	add	r6,r6,r2
   12b88:	30800015 	stw	r2,0(r6)
   12b8c:	003f9506 	br	129e4 <_gp+0xffff37e4>
   12b90:	00c01504 	movi	r3,84
   12b94:	19400536 	bltu	r3,r5,12bac <_free_r+0x2b8>
   12b98:	100ad33a 	srli	r5,r2,12
   12b9c:	28c01bc4 	addi	r3,r5,111
   12ba0:	18c7883a 	add	r3,r3,r3
   12ba4:	29401b84 	addi	r5,r5,110
   12ba8:	003f9c06 	br	12a1c <_gp+0xffff381c>
   12bac:	00c05504 	movi	r3,340
   12bb0:	19400536 	bltu	r3,r5,12bc8 <_free_r+0x2d4>
   12bb4:	100ad3fa 	srli	r5,r2,15
   12bb8:	28c01e04 	addi	r3,r5,120
   12bbc:	18c7883a 	add	r3,r3,r3
   12bc0:	29401dc4 	addi	r5,r5,119
   12bc4:	003f9506 	br	12a1c <_gp+0xffff381c>
   12bc8:	00c15504 	movi	r3,1364
   12bcc:	19400536 	bltu	r3,r5,12be4 <_free_r+0x2f0>
   12bd0:	100ad4ba 	srli	r5,r2,18
   12bd4:	28c01f44 	addi	r3,r5,125
   12bd8:	18c7883a 	add	r3,r3,r3
   12bdc:	29401f04 	addi	r5,r5,124
   12be0:	003f8e06 	br	12a1c <_gp+0xffff381c>
   12be4:	00c03f84 	movi	r3,254
   12be8:	01401f84 	movi	r5,126
   12bec:	003f8b06 	br	12a1c <_gp+0xffff381c>
   12bf0:	10c00054 	ori	r3,r2,1
   12bf4:	30c00115 	stw	r3,4(r6)
   12bf8:	308d883a 	add	r6,r6,r2
   12bfc:	30800015 	stw	r2,0(r6)
   12c00:	003f7806 	br	129e4 <_gp+0xffff37e4>

00012c04 <_lseek_r>:
   12c04:	defffd04 	addi	sp,sp,-12
   12c08:	2805883a 	mov	r2,r5
   12c0c:	dc000015 	stw	r16,0(sp)
   12c10:	040000b4 	movhi	r16,2
   12c14:	dc400115 	stw	r17,4(sp)
   12c18:	300b883a 	mov	r5,r6
   12c1c:	84233004 	addi	r16,r16,-29504
   12c20:	2023883a 	mov	r17,r4
   12c24:	380d883a 	mov	r6,r7
   12c28:	1009883a 	mov	r4,r2
   12c2c:	dfc00215 	stw	ra,8(sp)
   12c30:	80000015 	stw	zero,0(r16)
   12c34:	00135100 	call	13510 <lseek>
   12c38:	00ffffc4 	movi	r3,-1
   12c3c:	10c00526 	beq	r2,r3,12c54 <_lseek_r+0x50>
   12c40:	dfc00217 	ldw	ra,8(sp)
   12c44:	dc400117 	ldw	r17,4(sp)
   12c48:	dc000017 	ldw	r16,0(sp)
   12c4c:	dec00304 	addi	sp,sp,12
   12c50:	f800283a 	ret
   12c54:	80c00017 	ldw	r3,0(r16)
   12c58:	183ff926 	beq	r3,zero,12c40 <_gp+0xffff3a40>
   12c5c:	88c00015 	stw	r3,0(r17)
   12c60:	003ff706 	br	12c40 <_gp+0xffff3a40>

00012c64 <__smakebuf_r>:
   12c64:	2880030b 	ldhu	r2,12(r5)
   12c68:	10c0008c 	andi	r3,r2,2
   12c6c:	1800411e 	bne	r3,zero,12d74 <__smakebuf_r+0x110>
   12c70:	deffec04 	addi	sp,sp,-80
   12c74:	dc000f15 	stw	r16,60(sp)
   12c78:	2821883a 	mov	r16,r5
   12c7c:	2940038f 	ldh	r5,14(r5)
   12c80:	dc401015 	stw	r17,64(sp)
   12c84:	dfc01315 	stw	ra,76(sp)
   12c88:	dcc01215 	stw	r19,72(sp)
   12c8c:	dc801115 	stw	r18,68(sp)
   12c90:	2023883a 	mov	r17,r4
   12c94:	28001c16 	blt	r5,zero,12d08 <__smakebuf_r+0xa4>
   12c98:	d80d883a 	mov	r6,sp
   12c9c:	0012e800 	call	12e80 <_fstat_r>
   12ca0:	10001816 	blt	r2,zero,12d04 <__smakebuf_r+0xa0>
   12ca4:	d8800117 	ldw	r2,4(sp)
   12ca8:	00e00014 	movui	r3,32768
   12cac:	10bc000c 	andi	r2,r2,61440
   12cb0:	14c80020 	cmpeqi	r19,r2,8192
   12cb4:	10c03726 	beq	r2,r3,12d94 <__smakebuf_r+0x130>
   12cb8:	80c0030b 	ldhu	r3,12(r16)
   12cbc:	18c20014 	ori	r3,r3,2048
   12cc0:	80c0030d 	sth	r3,12(r16)
   12cc4:	00c80004 	movi	r3,8192
   12cc8:	10c0521e 	bne	r2,r3,12e14 <__smakebuf_r+0x1b0>
   12ccc:	8140038f 	ldh	r5,14(r16)
   12cd0:	8809883a 	mov	r4,r17
   12cd4:	0012edc0 	call	12edc <_isatty_r>
   12cd8:	10004c26 	beq	r2,zero,12e0c <__smakebuf_r+0x1a8>
   12cdc:	8080030b 	ldhu	r2,12(r16)
   12ce0:	80c010c4 	addi	r3,r16,67
   12ce4:	80c00015 	stw	r3,0(r16)
   12ce8:	10800054 	ori	r2,r2,1
   12cec:	8080030d 	sth	r2,12(r16)
   12cf0:	00800044 	movi	r2,1
   12cf4:	80c00415 	stw	r3,16(r16)
   12cf8:	80800515 	stw	r2,20(r16)
   12cfc:	04810004 	movi	r18,1024
   12d00:	00000706 	br	12d20 <__smakebuf_r+0xbc>
   12d04:	8080030b 	ldhu	r2,12(r16)
   12d08:	10c0200c 	andi	r3,r2,128
   12d0c:	18001f1e 	bne	r3,zero,12d8c <__smakebuf_r+0x128>
   12d10:	04810004 	movi	r18,1024
   12d14:	10820014 	ori	r2,r2,2048
   12d18:	8080030d 	sth	r2,12(r16)
   12d1c:	0027883a 	mov	r19,zero
   12d20:	900b883a 	mov	r5,r18
   12d24:	8809883a 	mov	r4,r17
   12d28:	0010e6c0 	call	10e6c <_malloc_r>
   12d2c:	10002c26 	beq	r2,zero,12de0 <__smakebuf_r+0x17c>
   12d30:	80c0030b 	ldhu	r3,12(r16)
   12d34:	01000074 	movhi	r4,1
   12d38:	21012404 	addi	r4,r4,1168
   12d3c:	89000f15 	stw	r4,60(r17)
   12d40:	18c02014 	ori	r3,r3,128
   12d44:	80c0030d 	sth	r3,12(r16)
   12d48:	80800015 	stw	r2,0(r16)
   12d4c:	80800415 	stw	r2,16(r16)
   12d50:	84800515 	stw	r18,20(r16)
   12d54:	98001a1e 	bne	r19,zero,12dc0 <__smakebuf_r+0x15c>
   12d58:	dfc01317 	ldw	ra,76(sp)
   12d5c:	dcc01217 	ldw	r19,72(sp)
   12d60:	dc801117 	ldw	r18,68(sp)
   12d64:	dc401017 	ldw	r17,64(sp)
   12d68:	dc000f17 	ldw	r16,60(sp)
   12d6c:	dec01404 	addi	sp,sp,80
   12d70:	f800283a 	ret
   12d74:	288010c4 	addi	r2,r5,67
   12d78:	28800015 	stw	r2,0(r5)
   12d7c:	28800415 	stw	r2,16(r5)
   12d80:	00800044 	movi	r2,1
   12d84:	28800515 	stw	r2,20(r5)
   12d88:	f800283a 	ret
   12d8c:	04801004 	movi	r18,64
   12d90:	003fe006 	br	12d14 <_gp+0xffff3b14>
   12d94:	81000a17 	ldw	r4,40(r16)
   12d98:	00c00074 	movhi	r3,1
   12d9c:	18c86e04 	addi	r3,r3,8632
   12da0:	20ffc51e 	bne	r4,r3,12cb8 <_gp+0xffff3ab8>
   12da4:	8080030b 	ldhu	r2,12(r16)
   12da8:	04810004 	movi	r18,1024
   12dac:	84801315 	stw	r18,76(r16)
   12db0:	1484b03a 	or	r2,r2,r18
   12db4:	8080030d 	sth	r2,12(r16)
   12db8:	0027883a 	mov	r19,zero
   12dbc:	003fd806 	br	12d20 <_gp+0xffff3b20>
   12dc0:	8140038f 	ldh	r5,14(r16)
   12dc4:	8809883a 	mov	r4,r17
   12dc8:	0012edc0 	call	12edc <_isatty_r>
   12dcc:	103fe226 	beq	r2,zero,12d58 <_gp+0xffff3b58>
   12dd0:	8080030b 	ldhu	r2,12(r16)
   12dd4:	10800054 	ori	r2,r2,1
   12dd8:	8080030d 	sth	r2,12(r16)
   12ddc:	003fde06 	br	12d58 <_gp+0xffff3b58>
   12de0:	8080030b 	ldhu	r2,12(r16)
   12de4:	10c0800c 	andi	r3,r2,512
   12de8:	183fdb1e 	bne	r3,zero,12d58 <_gp+0xffff3b58>
   12dec:	10800094 	ori	r2,r2,2
   12df0:	80c010c4 	addi	r3,r16,67
   12df4:	8080030d 	sth	r2,12(r16)
   12df8:	00800044 	movi	r2,1
   12dfc:	80c00015 	stw	r3,0(r16)
   12e00:	80c00415 	stw	r3,16(r16)
   12e04:	80800515 	stw	r2,20(r16)
   12e08:	003fd306 	br	12d58 <_gp+0xffff3b58>
   12e0c:	04810004 	movi	r18,1024
   12e10:	003fc306 	br	12d20 <_gp+0xffff3b20>
   12e14:	0027883a 	mov	r19,zero
   12e18:	04810004 	movi	r18,1024
   12e1c:	003fc006 	br	12d20 <_gp+0xffff3b20>

00012e20 <_read_r>:
   12e20:	defffd04 	addi	sp,sp,-12
   12e24:	2805883a 	mov	r2,r5
   12e28:	dc000015 	stw	r16,0(sp)
   12e2c:	040000b4 	movhi	r16,2
   12e30:	dc400115 	stw	r17,4(sp)
   12e34:	300b883a 	mov	r5,r6
   12e38:	84233004 	addi	r16,r16,-29504
   12e3c:	2023883a 	mov	r17,r4
   12e40:	380d883a 	mov	r6,r7
   12e44:	1009883a 	mov	r4,r2
   12e48:	dfc00215 	stw	ra,8(sp)
   12e4c:	80000015 	stw	zero,0(r16)
   12e50:	00136e40 	call	136e4 <read>
   12e54:	00ffffc4 	movi	r3,-1
   12e58:	10c00526 	beq	r2,r3,12e70 <_read_r+0x50>
   12e5c:	dfc00217 	ldw	ra,8(sp)
   12e60:	dc400117 	ldw	r17,4(sp)
   12e64:	dc000017 	ldw	r16,0(sp)
   12e68:	dec00304 	addi	sp,sp,12
   12e6c:	f800283a 	ret
   12e70:	80c00017 	ldw	r3,0(r16)
   12e74:	183ff926 	beq	r3,zero,12e5c <_gp+0xffff3c5c>
   12e78:	88c00015 	stw	r3,0(r17)
   12e7c:	003ff706 	br	12e5c <_gp+0xffff3c5c>

00012e80 <_fstat_r>:
   12e80:	defffd04 	addi	sp,sp,-12
   12e84:	2805883a 	mov	r2,r5
   12e88:	dc000015 	stw	r16,0(sp)
   12e8c:	040000b4 	movhi	r16,2
   12e90:	dc400115 	stw	r17,4(sp)
   12e94:	84233004 	addi	r16,r16,-29504
   12e98:	2023883a 	mov	r17,r4
   12e9c:	300b883a 	mov	r5,r6
   12ea0:	1009883a 	mov	r4,r2
   12ea4:	dfc00215 	stw	ra,8(sp)
   12ea8:	80000015 	stw	zero,0(r16)
   12eac:	00132580 	call	13258 <fstat>
   12eb0:	00ffffc4 	movi	r3,-1
   12eb4:	10c00526 	beq	r2,r3,12ecc <_fstat_r+0x4c>
   12eb8:	dfc00217 	ldw	ra,8(sp)
   12ebc:	dc400117 	ldw	r17,4(sp)
   12ec0:	dc000017 	ldw	r16,0(sp)
   12ec4:	dec00304 	addi	sp,sp,12
   12ec8:	f800283a 	ret
   12ecc:	80c00017 	ldw	r3,0(r16)
   12ed0:	183ff926 	beq	r3,zero,12eb8 <_gp+0xffff3cb8>
   12ed4:	88c00015 	stw	r3,0(r17)
   12ed8:	003ff706 	br	12eb8 <_gp+0xffff3cb8>

00012edc <_isatty_r>:
   12edc:	defffd04 	addi	sp,sp,-12
   12ee0:	dc000015 	stw	r16,0(sp)
   12ee4:	040000b4 	movhi	r16,2
   12ee8:	dc400115 	stw	r17,4(sp)
   12eec:	84233004 	addi	r16,r16,-29504
   12ef0:	2023883a 	mov	r17,r4
   12ef4:	2809883a 	mov	r4,r5
   12ef8:	dfc00215 	stw	ra,8(sp)
   12efc:	80000015 	stw	zero,0(r16)
   12f00:	00133440 	call	13344 <isatty>
   12f04:	00ffffc4 	movi	r3,-1
   12f08:	10c00526 	beq	r2,r3,12f20 <_isatty_r+0x44>
   12f0c:	dfc00217 	ldw	ra,8(sp)
   12f10:	dc400117 	ldw	r17,4(sp)
   12f14:	dc000017 	ldw	r16,0(sp)
   12f18:	dec00304 	addi	sp,sp,12
   12f1c:	f800283a 	ret
   12f20:	80c00017 	ldw	r3,0(r16)
   12f24:	183ff926 	beq	r3,zero,12f0c <_gp+0xffff3d0c>
   12f28:	88c00015 	stw	r3,0(r17)
   12f2c:	003ff706 	br	12f0c <_gp+0xffff3d0c>

00012f30 <__divsi3>:
   12f30:	20001b16 	blt	r4,zero,12fa0 <__divsi3+0x70>
   12f34:	000f883a 	mov	r7,zero
   12f38:	28001616 	blt	r5,zero,12f94 <__divsi3+0x64>
   12f3c:	200d883a 	mov	r6,r4
   12f40:	29001a2e 	bgeu	r5,r4,12fac <__divsi3+0x7c>
   12f44:	00800804 	movi	r2,32
   12f48:	00c00044 	movi	r3,1
   12f4c:	00000106 	br	12f54 <__divsi3+0x24>
   12f50:	10000d26 	beq	r2,zero,12f88 <__divsi3+0x58>
   12f54:	294b883a 	add	r5,r5,r5
   12f58:	10bfffc4 	addi	r2,r2,-1
   12f5c:	18c7883a 	add	r3,r3,r3
   12f60:	293ffb36 	bltu	r5,r4,12f50 <_gp+0xffff3d50>
   12f64:	0005883a 	mov	r2,zero
   12f68:	18000726 	beq	r3,zero,12f88 <__divsi3+0x58>
   12f6c:	0005883a 	mov	r2,zero
   12f70:	31400236 	bltu	r6,r5,12f7c <__divsi3+0x4c>
   12f74:	314dc83a 	sub	r6,r6,r5
   12f78:	10c4b03a 	or	r2,r2,r3
   12f7c:	1806d07a 	srli	r3,r3,1
   12f80:	280ad07a 	srli	r5,r5,1
   12f84:	183ffa1e 	bne	r3,zero,12f70 <_gp+0xffff3d70>
   12f88:	38000126 	beq	r7,zero,12f90 <__divsi3+0x60>
   12f8c:	0085c83a 	sub	r2,zero,r2
   12f90:	f800283a 	ret
   12f94:	014bc83a 	sub	r5,zero,r5
   12f98:	39c0005c 	xori	r7,r7,1
   12f9c:	003fe706 	br	12f3c <_gp+0xffff3d3c>
   12fa0:	0109c83a 	sub	r4,zero,r4
   12fa4:	01c00044 	movi	r7,1
   12fa8:	003fe306 	br	12f38 <_gp+0xffff3d38>
   12fac:	00c00044 	movi	r3,1
   12fb0:	003fee06 	br	12f6c <_gp+0xffff3d6c>

00012fb4 <__modsi3>:
   12fb4:	20001716 	blt	r4,zero,13014 <__modsi3+0x60>
   12fb8:	000f883a 	mov	r7,zero
   12fbc:	2005883a 	mov	r2,r4
   12fc0:	28001216 	blt	r5,zero,1300c <__modsi3+0x58>
   12fc4:	2900162e 	bgeu	r5,r4,13020 <__modsi3+0x6c>
   12fc8:	01800804 	movi	r6,32
   12fcc:	00c00044 	movi	r3,1
   12fd0:	00000106 	br	12fd8 <__modsi3+0x24>
   12fd4:	30000a26 	beq	r6,zero,13000 <__modsi3+0x4c>
   12fd8:	294b883a 	add	r5,r5,r5
   12fdc:	31bfffc4 	addi	r6,r6,-1
   12fe0:	18c7883a 	add	r3,r3,r3
   12fe4:	293ffb36 	bltu	r5,r4,12fd4 <_gp+0xffff3dd4>
   12fe8:	18000526 	beq	r3,zero,13000 <__modsi3+0x4c>
   12fec:	1806d07a 	srli	r3,r3,1
   12ff0:	11400136 	bltu	r2,r5,12ff8 <__modsi3+0x44>
   12ff4:	1145c83a 	sub	r2,r2,r5
   12ff8:	280ad07a 	srli	r5,r5,1
   12ffc:	183ffb1e 	bne	r3,zero,12fec <_gp+0xffff3dec>
   13000:	38000126 	beq	r7,zero,13008 <__modsi3+0x54>
   13004:	0085c83a 	sub	r2,zero,r2
   13008:	f800283a 	ret
   1300c:	014bc83a 	sub	r5,zero,r5
   13010:	003fec06 	br	12fc4 <_gp+0xffff3dc4>
   13014:	0109c83a 	sub	r4,zero,r4
   13018:	01c00044 	movi	r7,1
   1301c:	003fe706 	br	12fbc <_gp+0xffff3dbc>
   13020:	00c00044 	movi	r3,1
   13024:	003ff106 	br	12fec <_gp+0xffff3dec>

00013028 <__udivsi3>:
   13028:	200d883a 	mov	r6,r4
   1302c:	2900152e 	bgeu	r5,r4,13084 <__udivsi3+0x5c>
   13030:	28001416 	blt	r5,zero,13084 <__udivsi3+0x5c>
   13034:	00800804 	movi	r2,32
   13038:	00c00044 	movi	r3,1
   1303c:	00000206 	br	13048 <__udivsi3+0x20>
   13040:	10000e26 	beq	r2,zero,1307c <__udivsi3+0x54>
   13044:	28000516 	blt	r5,zero,1305c <__udivsi3+0x34>
   13048:	294b883a 	add	r5,r5,r5
   1304c:	10bfffc4 	addi	r2,r2,-1
   13050:	18c7883a 	add	r3,r3,r3
   13054:	293ffa36 	bltu	r5,r4,13040 <_gp+0xffff3e40>
   13058:	18000826 	beq	r3,zero,1307c <__udivsi3+0x54>
   1305c:	0005883a 	mov	r2,zero
   13060:	31400236 	bltu	r6,r5,1306c <__udivsi3+0x44>
   13064:	314dc83a 	sub	r6,r6,r5
   13068:	10c4b03a 	or	r2,r2,r3
   1306c:	1806d07a 	srli	r3,r3,1
   13070:	280ad07a 	srli	r5,r5,1
   13074:	183ffa1e 	bne	r3,zero,13060 <_gp+0xffff3e60>
   13078:	f800283a 	ret
   1307c:	0005883a 	mov	r2,zero
   13080:	f800283a 	ret
   13084:	00c00044 	movi	r3,1
   13088:	003ff406 	br	1305c <_gp+0xffff3e5c>

0001308c <__umodsi3>:
   1308c:	2005883a 	mov	r2,r4
   13090:	2900122e 	bgeu	r5,r4,130dc <__umodsi3+0x50>
   13094:	28001116 	blt	r5,zero,130dc <__umodsi3+0x50>
   13098:	01800804 	movi	r6,32
   1309c:	00c00044 	movi	r3,1
   130a0:	00000206 	br	130ac <__umodsi3+0x20>
   130a4:	30000c26 	beq	r6,zero,130d8 <__umodsi3+0x4c>
   130a8:	28000516 	blt	r5,zero,130c0 <__umodsi3+0x34>
   130ac:	294b883a 	add	r5,r5,r5
   130b0:	31bfffc4 	addi	r6,r6,-1
   130b4:	18c7883a 	add	r3,r3,r3
   130b8:	293ffa36 	bltu	r5,r4,130a4 <_gp+0xffff3ea4>
   130bc:	18000626 	beq	r3,zero,130d8 <__umodsi3+0x4c>
   130c0:	1806d07a 	srli	r3,r3,1
   130c4:	11400136 	bltu	r2,r5,130cc <__umodsi3+0x40>
   130c8:	1145c83a 	sub	r2,r2,r5
   130cc:	280ad07a 	srli	r5,r5,1
   130d0:	183ffb1e 	bne	r3,zero,130c0 <_gp+0xffff3ec0>
   130d4:	f800283a 	ret
   130d8:	f800283a 	ret
   130dc:	00c00044 	movi	r3,1
   130e0:	003ff706 	br	130c0 <_gp+0xffff3ec0>

000130e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130e4:	defffe04 	addi	sp,sp,-8
   130e8:	dfc00115 	stw	ra,4(sp)
   130ec:	df000015 	stw	fp,0(sp)
   130f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   130f4:	d0a00b17 	ldw	r2,-32724(gp)
   130f8:	10000326 	beq	r2,zero,13108 <alt_get_errno+0x24>
   130fc:	d0a00b17 	ldw	r2,-32724(gp)
   13100:	103ee83a 	callr	r2
   13104:	00000106 	br	1310c <alt_get_errno+0x28>
   13108:	d0a6b004 	addi	r2,gp,-25920
}
   1310c:	e037883a 	mov	sp,fp
   13110:	dfc00117 	ldw	ra,4(sp)
   13114:	df000017 	ldw	fp,0(sp)
   13118:	dec00204 	addi	sp,sp,8
   1311c:	f800283a 	ret

00013120 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13120:	defffb04 	addi	sp,sp,-20
   13124:	dfc00415 	stw	ra,16(sp)
   13128:	df000315 	stw	fp,12(sp)
   1312c:	df000304 	addi	fp,sp,12
   13130:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13134:	e0bfff17 	ldw	r2,-4(fp)
   13138:	10000616 	blt	r2,zero,13154 <close+0x34>
   1313c:	e0bfff17 	ldw	r2,-4(fp)
   13140:	10c00324 	muli	r3,r2,12
   13144:	00800074 	movhi	r2,1
   13148:	10980804 	addi	r2,r2,24608
   1314c:	1885883a 	add	r2,r3,r2
   13150:	00000106 	br	13158 <close+0x38>
   13154:	0005883a 	mov	r2,zero
   13158:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1315c:	e0bffd17 	ldw	r2,-12(fp)
   13160:	10001926 	beq	r2,zero,131c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13164:	e0bffd17 	ldw	r2,-12(fp)
   13168:	10800017 	ldw	r2,0(r2)
   1316c:	10800417 	ldw	r2,16(r2)
   13170:	10000626 	beq	r2,zero,1318c <close+0x6c>
   13174:	e0bffd17 	ldw	r2,-12(fp)
   13178:	10800017 	ldw	r2,0(r2)
   1317c:	10800417 	ldw	r2,16(r2)
   13180:	e13ffd17 	ldw	r4,-12(fp)
   13184:	103ee83a 	callr	r2
   13188:	00000106 	br	13190 <close+0x70>
   1318c:	0005883a 	mov	r2,zero
   13190:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13194:	e13fff17 	ldw	r4,-4(fp)
   13198:	00137e00 	call	137e0 <alt_release_fd>
    if (rval < 0)
   1319c:	e0bffe17 	ldw	r2,-8(fp)
   131a0:	1000070e 	bge	r2,zero,131c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   131a4:	00130e40 	call	130e4 <alt_get_errno>
   131a8:	1007883a 	mov	r3,r2
   131ac:	e0bffe17 	ldw	r2,-8(fp)
   131b0:	0085c83a 	sub	r2,zero,r2
   131b4:	18800015 	stw	r2,0(r3)
      return -1;
   131b8:	00bfffc4 	movi	r2,-1
   131bc:	00000706 	br	131dc <close+0xbc>
    }
    return 0;
   131c0:	0005883a 	mov	r2,zero
   131c4:	00000506 	br	131dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   131c8:	00130e40 	call	130e4 <alt_get_errno>
   131cc:	1007883a 	mov	r3,r2
   131d0:	00801444 	movi	r2,81
   131d4:	18800015 	stw	r2,0(r3)
    return -1;
   131d8:	00bfffc4 	movi	r2,-1
  }
}
   131dc:	e037883a 	mov	sp,fp
   131e0:	dfc00117 	ldw	ra,4(sp)
   131e4:	df000017 	ldw	fp,0(sp)
   131e8:	dec00204 	addi	sp,sp,8
   131ec:	f800283a 	ret

000131f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   131f0:	defffc04 	addi	sp,sp,-16
   131f4:	df000315 	stw	fp,12(sp)
   131f8:	df000304 	addi	fp,sp,12
   131fc:	e13ffd15 	stw	r4,-12(fp)
   13200:	e17ffe15 	stw	r5,-8(fp)
   13204:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13208:	e0bfff17 	ldw	r2,-4(fp)
}
   1320c:	e037883a 	mov	sp,fp
   13210:	df000017 	ldw	fp,0(sp)
   13214:	dec00104 	addi	sp,sp,4
   13218:	f800283a 	ret

0001321c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1321c:	defffe04 	addi	sp,sp,-8
   13220:	dfc00115 	stw	ra,4(sp)
   13224:	df000015 	stw	fp,0(sp)
   13228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1322c:	d0a00b17 	ldw	r2,-32724(gp)
   13230:	10000326 	beq	r2,zero,13240 <alt_get_errno+0x24>
   13234:	d0a00b17 	ldw	r2,-32724(gp)
   13238:	103ee83a 	callr	r2
   1323c:	00000106 	br	13244 <alt_get_errno+0x28>
   13240:	d0a6b004 	addi	r2,gp,-25920
}
   13244:	e037883a 	mov	sp,fp
   13248:	dfc00117 	ldw	ra,4(sp)
   1324c:	df000017 	ldw	fp,0(sp)
   13250:	dec00204 	addi	sp,sp,8
   13254:	f800283a 	ret

00013258 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13258:	defffb04 	addi	sp,sp,-20
   1325c:	dfc00415 	stw	ra,16(sp)
   13260:	df000315 	stw	fp,12(sp)
   13264:	df000304 	addi	fp,sp,12
   13268:	e13ffe15 	stw	r4,-8(fp)
   1326c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13270:	e0bffe17 	ldw	r2,-8(fp)
   13274:	10000616 	blt	r2,zero,13290 <fstat+0x38>
   13278:	e0bffe17 	ldw	r2,-8(fp)
   1327c:	10c00324 	muli	r3,r2,12
   13280:	00800074 	movhi	r2,1
   13284:	10980804 	addi	r2,r2,24608
   13288:	1885883a 	add	r2,r3,r2
   1328c:	00000106 	br	13294 <fstat+0x3c>
   13290:	0005883a 	mov	r2,zero
   13294:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13298:	e0bffd17 	ldw	r2,-12(fp)
   1329c:	10001026 	beq	r2,zero,132e0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   132a0:	e0bffd17 	ldw	r2,-12(fp)
   132a4:	10800017 	ldw	r2,0(r2)
   132a8:	10800817 	ldw	r2,32(r2)
   132ac:	10000726 	beq	r2,zero,132cc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   132b0:	e0bffd17 	ldw	r2,-12(fp)
   132b4:	10800017 	ldw	r2,0(r2)
   132b8:	10800817 	ldw	r2,32(r2)
   132bc:	e17fff17 	ldw	r5,-4(fp)
   132c0:	e13ffd17 	ldw	r4,-12(fp)
   132c4:	103ee83a 	callr	r2
   132c8:	00000a06 	br	132f4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   132cc:	e0bfff17 	ldw	r2,-4(fp)
   132d0:	00c80004 	movi	r3,8192
   132d4:	10c00115 	stw	r3,4(r2)
      return 0;
   132d8:	0005883a 	mov	r2,zero
   132dc:	00000506 	br	132f4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   132e0:	001321c0 	call	1321c <alt_get_errno>
   132e4:	1007883a 	mov	r3,r2
   132e8:	00801444 	movi	r2,81
   132ec:	18800015 	stw	r2,0(r3)
    return -1;
   132f0:	00bfffc4 	movi	r2,-1
  }
}
   132f4:	e037883a 	mov	sp,fp
   132f8:	dfc00117 	ldw	ra,4(sp)
   132fc:	df000017 	ldw	fp,0(sp)
   13300:	dec00204 	addi	sp,sp,8
   13304:	f800283a 	ret

00013308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13308:	defffe04 	addi	sp,sp,-8
   1330c:	dfc00115 	stw	ra,4(sp)
   13310:	df000015 	stw	fp,0(sp)
   13314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13318:	d0a00b17 	ldw	r2,-32724(gp)
   1331c:	10000326 	beq	r2,zero,1332c <alt_get_errno+0x24>
   13320:	d0a00b17 	ldw	r2,-32724(gp)
   13324:	103ee83a 	callr	r2
   13328:	00000106 	br	13330 <alt_get_errno+0x28>
   1332c:	d0a6b004 	addi	r2,gp,-25920
}
   13330:	e037883a 	mov	sp,fp
   13334:	dfc00117 	ldw	ra,4(sp)
   13338:	df000017 	ldw	fp,0(sp)
   1333c:	dec00204 	addi	sp,sp,8
   13340:	f800283a 	ret

00013344 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13344:	deffed04 	addi	sp,sp,-76
   13348:	dfc01215 	stw	ra,72(sp)
   1334c:	df001115 	stw	fp,68(sp)
   13350:	df001104 	addi	fp,sp,68
   13354:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13358:	e0bfff17 	ldw	r2,-4(fp)
   1335c:	10000616 	blt	r2,zero,13378 <isatty+0x34>
   13360:	e0bfff17 	ldw	r2,-4(fp)
   13364:	10c00324 	muli	r3,r2,12
   13368:	00800074 	movhi	r2,1
   1336c:	10980804 	addi	r2,r2,24608
   13370:	1885883a 	add	r2,r3,r2
   13374:	00000106 	br	1337c <isatty+0x38>
   13378:	0005883a 	mov	r2,zero
   1337c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13380:	e0bfef17 	ldw	r2,-68(fp)
   13384:	10000e26 	beq	r2,zero,133c0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13388:	e0bfef17 	ldw	r2,-68(fp)
   1338c:	10800017 	ldw	r2,0(r2)
   13390:	10800817 	ldw	r2,32(r2)
   13394:	1000021e 	bne	r2,zero,133a0 <isatty+0x5c>
    {
      return 1;
   13398:	00800044 	movi	r2,1
   1339c:	00000d06 	br	133d4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   133a0:	e0bff004 	addi	r2,fp,-64
   133a4:	100b883a 	mov	r5,r2
   133a8:	e13fff17 	ldw	r4,-4(fp)
   133ac:	00132580 	call	13258 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   133b0:	e0bff117 	ldw	r2,-60(fp)
   133b4:	10880020 	cmpeqi	r2,r2,8192
   133b8:	10803fcc 	andi	r2,r2,255
   133bc:	00000506 	br	133d4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   133c0:	00133080 	call	13308 <alt_get_errno>
   133c4:	1007883a 	mov	r3,r2
   133c8:	00801444 	movi	r2,81
   133cc:	18800015 	stw	r2,0(r3)
    return 0;
   133d0:	0005883a 	mov	r2,zero
  }
}
   133d4:	e037883a 	mov	sp,fp
   133d8:	dfc00117 	ldw	ra,4(sp)
   133dc:	df000017 	ldw	fp,0(sp)
   133e0:	dec00204 	addi	sp,sp,8
   133e4:	f800283a 	ret

000133e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   133e8:	defffc04 	addi	sp,sp,-16
   133ec:	df000315 	stw	fp,12(sp)
   133f0:	df000304 	addi	fp,sp,12
   133f4:	e13ffd15 	stw	r4,-12(fp)
   133f8:	e17ffe15 	stw	r5,-8(fp)
   133fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13400:	e0fffe17 	ldw	r3,-8(fp)
   13404:	e0bffd17 	ldw	r2,-12(fp)
   13408:	18800c26 	beq	r3,r2,1343c <alt_load_section+0x54>
  {
    while( to != end )
   1340c:	00000806 	br	13430 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13410:	e0bffe17 	ldw	r2,-8(fp)
   13414:	10c00104 	addi	r3,r2,4
   13418:	e0fffe15 	stw	r3,-8(fp)
   1341c:	e0fffd17 	ldw	r3,-12(fp)
   13420:	19000104 	addi	r4,r3,4
   13424:	e13ffd15 	stw	r4,-12(fp)
   13428:	18c00017 	ldw	r3,0(r3)
   1342c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13430:	e0fffe17 	ldw	r3,-8(fp)
   13434:	e0bfff17 	ldw	r2,-4(fp)
   13438:	18bff51e 	bne	r3,r2,13410 <_gp+0xffff4210>
    {
      *to++ = *from++;
    }
  }
}
   1343c:	0001883a 	nop
   13440:	e037883a 	mov	sp,fp
   13444:	df000017 	ldw	fp,0(sp)
   13448:	dec00104 	addi	sp,sp,4
   1344c:	f800283a 	ret

00013450 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13450:	defffe04 	addi	sp,sp,-8
   13454:	dfc00115 	stw	ra,4(sp)
   13458:	df000015 	stw	fp,0(sp)
   1345c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13460:	01800074 	movhi	r6,1
   13464:	319c9004 	addi	r6,r6,29248
   13468:	01400074 	movhi	r5,1
   1346c:	2955f304 	addi	r5,r5,22476
   13470:	01000074 	movhi	r4,1
   13474:	211c9004 	addi	r4,r4,29248
   13478:	00133e80 	call	133e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1347c:	01800074 	movhi	r6,1
   13480:	31809104 	addi	r6,r6,580
   13484:	01400074 	movhi	r5,1
   13488:	29400804 	addi	r5,r5,32
   1348c:	01000074 	movhi	r4,1
   13490:	21000804 	addi	r4,r4,32
   13494:	00133e80 	call	133e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13498:	01800074 	movhi	r6,1
   1349c:	3195f304 	addi	r6,r6,22476
   134a0:	01400074 	movhi	r5,1
   134a4:	2955e204 	addi	r5,r5,22408
   134a8:	01000074 	movhi	r4,1
   134ac:	2115e204 	addi	r4,r4,22408
   134b0:	00133e80 	call	133e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   134b4:	00146740 	call	14674 <alt_dcache_flush_all>
  alt_icache_flush_all();
   134b8:	001485c0 	call	1485c <alt_icache_flush_all>
}
   134bc:	0001883a 	nop
   134c0:	e037883a 	mov	sp,fp
   134c4:	dfc00117 	ldw	ra,4(sp)
   134c8:	df000017 	ldw	fp,0(sp)
   134cc:	dec00204 	addi	sp,sp,8
   134d0:	f800283a 	ret

000134d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   134d4:	defffe04 	addi	sp,sp,-8
   134d8:	dfc00115 	stw	ra,4(sp)
   134dc:	df000015 	stw	fp,0(sp)
   134e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   134e4:	d0a00b17 	ldw	r2,-32724(gp)
   134e8:	10000326 	beq	r2,zero,134f8 <alt_get_errno+0x24>
   134ec:	d0a00b17 	ldw	r2,-32724(gp)
   134f0:	103ee83a 	callr	r2
   134f4:	00000106 	br	134fc <alt_get_errno+0x28>
   134f8:	d0a6b004 	addi	r2,gp,-25920
}
   134fc:	e037883a 	mov	sp,fp
   13500:	dfc00117 	ldw	ra,4(sp)
   13504:	df000017 	ldw	fp,0(sp)
   13508:	dec00204 	addi	sp,sp,8
   1350c:	f800283a 	ret

00013510 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13510:	defff904 	addi	sp,sp,-28
   13514:	dfc00615 	stw	ra,24(sp)
   13518:	df000515 	stw	fp,20(sp)
   1351c:	df000504 	addi	fp,sp,20
   13520:	e13ffd15 	stw	r4,-12(fp)
   13524:	e17ffe15 	stw	r5,-8(fp)
   13528:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1352c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13530:	e0bffd17 	ldw	r2,-12(fp)
   13534:	10000616 	blt	r2,zero,13550 <lseek+0x40>
   13538:	e0bffd17 	ldw	r2,-12(fp)
   1353c:	10c00324 	muli	r3,r2,12
   13540:	00800074 	movhi	r2,1
   13544:	10980804 	addi	r2,r2,24608
   13548:	1885883a 	add	r2,r3,r2
   1354c:	00000106 	br	13554 <lseek+0x44>
   13550:	0005883a 	mov	r2,zero
   13554:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13558:	e0bffc17 	ldw	r2,-16(fp)
   1355c:	10001026 	beq	r2,zero,135a0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13560:	e0bffc17 	ldw	r2,-16(fp)
   13564:	10800017 	ldw	r2,0(r2)
   13568:	10800717 	ldw	r2,28(r2)
   1356c:	10000926 	beq	r2,zero,13594 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13570:	e0bffc17 	ldw	r2,-16(fp)
   13574:	10800017 	ldw	r2,0(r2)
   13578:	10800717 	ldw	r2,28(r2)
   1357c:	e1bfff17 	ldw	r6,-4(fp)
   13580:	e17ffe17 	ldw	r5,-8(fp)
   13584:	e13ffc17 	ldw	r4,-16(fp)
   13588:	103ee83a 	callr	r2
   1358c:	e0bffb15 	stw	r2,-20(fp)
   13590:	00000506 	br	135a8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13594:	00bfde84 	movi	r2,-134
   13598:	e0bffb15 	stw	r2,-20(fp)
   1359c:	00000206 	br	135a8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   135a0:	00bfebc4 	movi	r2,-81
   135a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   135a8:	e0bffb17 	ldw	r2,-20(fp)
   135ac:	1000070e 	bge	r2,zero,135cc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   135b0:	00134d40 	call	134d4 <alt_get_errno>
   135b4:	1007883a 	mov	r3,r2
   135b8:	e0bffb17 	ldw	r2,-20(fp)
   135bc:	0085c83a 	sub	r2,zero,r2
   135c0:	18800015 	stw	r2,0(r3)
    rc = -1;
   135c4:	00bfffc4 	movi	r2,-1
   135c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   135cc:	e0bffb17 	ldw	r2,-20(fp)
}
   135d0:	e037883a 	mov	sp,fp
   135d4:	dfc00117 	ldw	ra,4(sp)
   135d8:	df000017 	ldw	fp,0(sp)
   135dc:	dec00204 	addi	sp,sp,8
   135e0:	f800283a 	ret

000135e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   135e4:	defffd04 	addi	sp,sp,-12
   135e8:	dfc00215 	stw	ra,8(sp)
   135ec:	df000115 	stw	fp,4(sp)
   135f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   135f4:	0009883a 	mov	r4,zero
   135f8:	0013a5c0 	call	13a5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   135fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13600:	0013a940 	call	13a94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13604:	01800074 	movhi	r6,1
   13608:	3195eb04 	addi	r6,r6,22444
   1360c:	01400074 	movhi	r5,1
   13610:	2955eb04 	addi	r5,r5,22444
   13614:	01000074 	movhi	r4,1
   13618:	2115eb04 	addi	r4,r4,22444
   1361c:	0014bf40 	call	14bf4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13620:	001479c0 	call	1479c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13624:	01000074 	movhi	r4,1
   13628:	2111ff04 	addi	r4,r4,18428
   1362c:	00153f40 	call	153f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13630:	d0a6b117 	ldw	r2,-25916(gp)
   13634:	d0e6b217 	ldw	r3,-25912(gp)
   13638:	d126b317 	ldw	r4,-25908(gp)
   1363c:	200d883a 	mov	r6,r4
   13640:	180b883a 	mov	r5,r3
   13644:	1009883a 	mov	r4,r2
   13648:	00102900 	call	10290 <main>
   1364c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13650:	01000044 	movi	r4,1
   13654:	00131200 	call	13120 <close>
  exit (result);
   13658:	e13fff17 	ldw	r4,-4(fp)
   1365c:	00154080 	call	15408 <exit>

00013660 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13660:	defffe04 	addi	sp,sp,-8
   13664:	df000115 	stw	fp,4(sp)
   13668:	df000104 	addi	fp,sp,4
   1366c:	e13fff15 	stw	r4,-4(fp)
}
   13670:	0001883a 	nop
   13674:	e037883a 	mov	sp,fp
   13678:	df000017 	ldw	fp,0(sp)
   1367c:	dec00104 	addi	sp,sp,4
   13680:	f800283a 	ret

00013684 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13684:	defffe04 	addi	sp,sp,-8
   13688:	df000115 	stw	fp,4(sp)
   1368c:	df000104 	addi	fp,sp,4
   13690:	e13fff15 	stw	r4,-4(fp)
}
   13694:	0001883a 	nop
   13698:	e037883a 	mov	sp,fp
   1369c:	df000017 	ldw	fp,0(sp)
   136a0:	dec00104 	addi	sp,sp,4
   136a4:	f800283a 	ret

000136a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   136a8:	defffe04 	addi	sp,sp,-8
   136ac:	dfc00115 	stw	ra,4(sp)
   136b0:	df000015 	stw	fp,0(sp)
   136b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   136b8:	d0a00b17 	ldw	r2,-32724(gp)
   136bc:	10000326 	beq	r2,zero,136cc <alt_get_errno+0x24>
   136c0:	d0a00b17 	ldw	r2,-32724(gp)
   136c4:	103ee83a 	callr	r2
   136c8:	00000106 	br	136d0 <alt_get_errno+0x28>
   136cc:	d0a6b004 	addi	r2,gp,-25920
}
   136d0:	e037883a 	mov	sp,fp
   136d4:	dfc00117 	ldw	ra,4(sp)
   136d8:	df000017 	ldw	fp,0(sp)
   136dc:	dec00204 	addi	sp,sp,8
   136e0:	f800283a 	ret

000136e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   136e4:	defff904 	addi	sp,sp,-28
   136e8:	dfc00615 	stw	ra,24(sp)
   136ec:	df000515 	stw	fp,20(sp)
   136f0:	df000504 	addi	fp,sp,20
   136f4:	e13ffd15 	stw	r4,-12(fp)
   136f8:	e17ffe15 	stw	r5,-8(fp)
   136fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13700:	e0bffd17 	ldw	r2,-12(fp)
   13704:	10000616 	blt	r2,zero,13720 <read+0x3c>
   13708:	e0bffd17 	ldw	r2,-12(fp)
   1370c:	10c00324 	muli	r3,r2,12
   13710:	00800074 	movhi	r2,1
   13714:	10980804 	addi	r2,r2,24608
   13718:	1885883a 	add	r2,r3,r2
   1371c:	00000106 	br	13724 <read+0x40>
   13720:	0005883a 	mov	r2,zero
   13724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13728:	e0bffb17 	ldw	r2,-20(fp)
   1372c:	10002226 	beq	r2,zero,137b8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13730:	e0bffb17 	ldw	r2,-20(fp)
   13734:	10800217 	ldw	r2,8(r2)
   13738:	108000cc 	andi	r2,r2,3
   1373c:	10800060 	cmpeqi	r2,r2,1
   13740:	1000181e 	bne	r2,zero,137a4 <read+0xc0>
        (fd->dev->read))
   13744:	e0bffb17 	ldw	r2,-20(fp)
   13748:	10800017 	ldw	r2,0(r2)
   1374c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13750:	10001426 	beq	r2,zero,137a4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13754:	e0bffb17 	ldw	r2,-20(fp)
   13758:	10800017 	ldw	r2,0(r2)
   1375c:	10800517 	ldw	r2,20(r2)
   13760:	e0ffff17 	ldw	r3,-4(fp)
   13764:	180d883a 	mov	r6,r3
   13768:	e17ffe17 	ldw	r5,-8(fp)
   1376c:	e13ffb17 	ldw	r4,-20(fp)
   13770:	103ee83a 	callr	r2
   13774:	e0bffc15 	stw	r2,-16(fp)
   13778:	e0bffc17 	ldw	r2,-16(fp)
   1377c:	1000070e 	bge	r2,zero,1379c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13780:	00136a80 	call	136a8 <alt_get_errno>
   13784:	1007883a 	mov	r3,r2
   13788:	e0bffc17 	ldw	r2,-16(fp)
   1378c:	0085c83a 	sub	r2,zero,r2
   13790:	18800015 	stw	r2,0(r3)
          return -1;
   13794:	00bfffc4 	movi	r2,-1
   13798:	00000c06 	br	137cc <read+0xe8>
        }
        return rval;
   1379c:	e0bffc17 	ldw	r2,-16(fp)
   137a0:	00000a06 	br	137cc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   137a4:	00136a80 	call	136a8 <alt_get_errno>
   137a8:	1007883a 	mov	r3,r2
   137ac:	00800344 	movi	r2,13
   137b0:	18800015 	stw	r2,0(r3)
   137b4:	00000406 	br	137c8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   137b8:	00136a80 	call	136a8 <alt_get_errno>
   137bc:	1007883a 	mov	r3,r2
   137c0:	00801444 	movi	r2,81
   137c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   137c8:	00bfffc4 	movi	r2,-1
}
   137cc:	e037883a 	mov	sp,fp
   137d0:	dfc00117 	ldw	ra,4(sp)
   137d4:	df000017 	ldw	fp,0(sp)
   137d8:	dec00204 	addi	sp,sp,8
   137dc:	f800283a 	ret

000137e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   137e0:	defffe04 	addi	sp,sp,-8
   137e4:	df000115 	stw	fp,4(sp)
   137e8:	df000104 	addi	fp,sp,4
   137ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   137f0:	e0bfff17 	ldw	r2,-4(fp)
   137f4:	108000d0 	cmplti	r2,r2,3
   137f8:	10000d1e 	bne	r2,zero,13830 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   137fc:	00800074 	movhi	r2,1
   13800:	10980804 	addi	r2,r2,24608
   13804:	e0ffff17 	ldw	r3,-4(fp)
   13808:	18c00324 	muli	r3,r3,12
   1380c:	10c5883a 	add	r2,r2,r3
   13810:	10800204 	addi	r2,r2,8
   13814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13818:	00800074 	movhi	r2,1
   1381c:	10980804 	addi	r2,r2,24608
   13820:	e0ffff17 	ldw	r3,-4(fp)
   13824:	18c00324 	muli	r3,r3,12
   13828:	10c5883a 	add	r2,r2,r3
   1382c:	10000015 	stw	zero,0(r2)
  }
}
   13830:	0001883a 	nop
   13834:	e037883a 	mov	sp,fp
   13838:	df000017 	ldw	fp,0(sp)
   1383c:	dec00104 	addi	sp,sp,4
   13840:	f800283a 	ret

00013844 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13844:	defff904 	addi	sp,sp,-28
   13848:	df000615 	stw	fp,24(sp)
   1384c:	df000604 	addi	fp,sp,24
   13850:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13854:	0005303a 	rdctl	r2,status
   13858:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1385c:	e0fffe17 	ldw	r3,-8(fp)
   13860:	00bfff84 	movi	r2,-2
   13864:	1884703a 	and	r2,r3,r2
   13868:	1001703a 	wrctl	status,r2
  
  return context;
   1386c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13870:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13874:	d0a00c17 	ldw	r2,-32720(gp)
   13878:	10c000c4 	addi	r3,r2,3
   1387c:	00bfff04 	movi	r2,-4
   13880:	1884703a 	and	r2,r3,r2
   13884:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13888:	d0e00c17 	ldw	r3,-32720(gp)
   1388c:	e0bfff17 	ldw	r2,-4(fp)
   13890:	1887883a 	add	r3,r3,r2
   13894:	008000b4 	movhi	r2,2
   13898:	10a80004 	addi	r2,r2,-24576
   1389c:	10c0062e 	bgeu	r2,r3,138b8 <sbrk+0x74>
   138a0:	e0bffb17 	ldw	r2,-20(fp)
   138a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138a8:	e0bffa17 	ldw	r2,-24(fp)
   138ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   138b0:	00bfffc4 	movi	r2,-1
   138b4:	00000b06 	br	138e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   138b8:	d0a00c17 	ldw	r2,-32720(gp)
   138bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   138c0:	d0e00c17 	ldw	r3,-32720(gp)
   138c4:	e0bfff17 	ldw	r2,-4(fp)
   138c8:	1885883a 	add	r2,r3,r2
   138cc:	d0a00c15 	stw	r2,-32720(gp)
   138d0:	e0bffb17 	ldw	r2,-20(fp)
   138d4:	e0bffc15 	stw	r2,-16(fp)
   138d8:	e0bffc17 	ldw	r2,-16(fp)
   138dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   138e0:	e0bffd17 	ldw	r2,-12(fp)
} 
   138e4:	e037883a 	mov	sp,fp
   138e8:	df000017 	ldw	fp,0(sp)
   138ec:	dec00104 	addi	sp,sp,4
   138f0:	f800283a 	ret

000138f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   138f4:	defffe04 	addi	sp,sp,-8
   138f8:	dfc00115 	stw	ra,4(sp)
   138fc:	df000015 	stw	fp,0(sp)
   13900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13904:	d0a00b17 	ldw	r2,-32724(gp)
   13908:	10000326 	beq	r2,zero,13918 <alt_get_errno+0x24>
   1390c:	d0a00b17 	ldw	r2,-32724(gp)
   13910:	103ee83a 	callr	r2
   13914:	00000106 	br	1391c <alt_get_errno+0x28>
   13918:	d0a6b004 	addi	r2,gp,-25920
}
   1391c:	e037883a 	mov	sp,fp
   13920:	dfc00117 	ldw	ra,4(sp)
   13924:	df000017 	ldw	fp,0(sp)
   13928:	dec00204 	addi	sp,sp,8
   1392c:	f800283a 	ret

00013930 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13930:	defff904 	addi	sp,sp,-28
   13934:	dfc00615 	stw	ra,24(sp)
   13938:	df000515 	stw	fp,20(sp)
   1393c:	df000504 	addi	fp,sp,20
   13940:	e13ffd15 	stw	r4,-12(fp)
   13944:	e17ffe15 	stw	r5,-8(fp)
   13948:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1394c:	e0bffd17 	ldw	r2,-12(fp)
   13950:	10000616 	blt	r2,zero,1396c <write+0x3c>
   13954:	e0bffd17 	ldw	r2,-12(fp)
   13958:	10c00324 	muli	r3,r2,12
   1395c:	00800074 	movhi	r2,1
   13960:	10980804 	addi	r2,r2,24608
   13964:	1885883a 	add	r2,r3,r2
   13968:	00000106 	br	13970 <write+0x40>
   1396c:	0005883a 	mov	r2,zero
   13970:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13974:	e0bffb17 	ldw	r2,-20(fp)
   13978:	10002126 	beq	r2,zero,13a00 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1397c:	e0bffb17 	ldw	r2,-20(fp)
   13980:	10800217 	ldw	r2,8(r2)
   13984:	108000cc 	andi	r2,r2,3
   13988:	10001826 	beq	r2,zero,139ec <write+0xbc>
   1398c:	e0bffb17 	ldw	r2,-20(fp)
   13990:	10800017 	ldw	r2,0(r2)
   13994:	10800617 	ldw	r2,24(r2)
   13998:	10001426 	beq	r2,zero,139ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1399c:	e0bffb17 	ldw	r2,-20(fp)
   139a0:	10800017 	ldw	r2,0(r2)
   139a4:	10800617 	ldw	r2,24(r2)
   139a8:	e0ffff17 	ldw	r3,-4(fp)
   139ac:	180d883a 	mov	r6,r3
   139b0:	e17ffe17 	ldw	r5,-8(fp)
   139b4:	e13ffb17 	ldw	r4,-20(fp)
   139b8:	103ee83a 	callr	r2
   139bc:	e0bffc15 	stw	r2,-16(fp)
   139c0:	e0bffc17 	ldw	r2,-16(fp)
   139c4:	1000070e 	bge	r2,zero,139e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   139c8:	00138f40 	call	138f4 <alt_get_errno>
   139cc:	1007883a 	mov	r3,r2
   139d0:	e0bffc17 	ldw	r2,-16(fp)
   139d4:	0085c83a 	sub	r2,zero,r2
   139d8:	18800015 	stw	r2,0(r3)
        return -1;
   139dc:	00bfffc4 	movi	r2,-1
   139e0:	00000c06 	br	13a14 <write+0xe4>
      }
      return rval;
   139e4:	e0bffc17 	ldw	r2,-16(fp)
   139e8:	00000a06 	br	13a14 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   139ec:	00138f40 	call	138f4 <alt_get_errno>
   139f0:	1007883a 	mov	r3,r2
   139f4:	00800344 	movi	r2,13
   139f8:	18800015 	stw	r2,0(r3)
   139fc:	00000406 	br	13a10 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13a00:	00138f40 	call	138f4 <alt_get_errno>
   13a04:	1007883a 	mov	r3,r2
   13a08:	00801444 	movi	r2,81
   13a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13a10:	00bfffc4 	movi	r2,-1
}
   13a14:	e037883a 	mov	sp,fp
   13a18:	dfc00117 	ldw	ra,4(sp)
   13a1c:	df000017 	ldw	fp,0(sp)
   13a20:	dec00204 	addi	sp,sp,8
   13a24:	f800283a 	ret

00013a28 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13a28:	defffd04 	addi	sp,sp,-12
   13a2c:	dfc00215 	stw	ra,8(sp)
   13a30:	df000115 	stw	fp,4(sp)
   13a34:	df000104 	addi	fp,sp,4
   13a38:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13a3c:	d1600804 	addi	r5,gp,-32736
   13a40:	e13fff17 	ldw	r4,-4(fp)
   13a44:	00146f80 	call	146f8 <alt_dev_llist_insert>
}
   13a48:	e037883a 	mov	sp,fp
   13a4c:	dfc00117 	ldw	ra,4(sp)
   13a50:	df000017 	ldw	fp,0(sp)
   13a54:	dec00204 	addi	sp,sp,8
   13a58:	f800283a 	ret

00013a5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13a5c:	defffd04 	addi	sp,sp,-12
   13a60:	dfc00215 	stw	ra,8(sp)
   13a64:	df000115 	stw	fp,4(sp)
   13a68:	df000104 	addi	fp,sp,4
   13a6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   13a70:	00150680 	call	15068 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13a74:	00800044 	movi	r2,1
   13a78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13a7c:	0001883a 	nop
   13a80:	e037883a 	mov	sp,fp
   13a84:	dfc00117 	ldw	ra,4(sp)
   13a88:	df000017 	ldw	fp,0(sp)
   13a8c:	dec00204 	addi	sp,sp,8
   13a90:	f800283a 	ret

00013a94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13a94:	defffe04 	addi	sp,sp,-8
   13a98:	dfc00115 	stw	ra,4(sp)
   13a9c:	df000015 	stw	fp,0(sp)
   13aa0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13aa4:	000d883a 	mov	r6,zero
   13aa8:	000b883a 	mov	r5,zero
   13aac:	01000074 	movhi	r4,1
   13ab0:	21187204 	addi	r4,r4,25032
   13ab4:	0013c440 	call	13c44 <altera_avalon_jtag_uart_init>
   13ab8:	01000074 	movhi	r4,1
   13abc:	21186804 	addi	r4,r4,24992
   13ac0:	0013a280 	call	13a28 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   13ac4:	0001883a 	nop
}
   13ac8:	0001883a 	nop
   13acc:	e037883a 	mov	sp,fp
   13ad0:	dfc00117 	ldw	ra,4(sp)
   13ad4:	df000017 	ldw	fp,0(sp)
   13ad8:	dec00204 	addi	sp,sp,8
   13adc:	f800283a 	ret

00013ae0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13ae0:	defffa04 	addi	sp,sp,-24
   13ae4:	dfc00515 	stw	ra,20(sp)
   13ae8:	df000415 	stw	fp,16(sp)
   13aec:	df000404 	addi	fp,sp,16
   13af0:	e13ffd15 	stw	r4,-12(fp)
   13af4:	e17ffe15 	stw	r5,-8(fp)
   13af8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13afc:	e0bffd17 	ldw	r2,-12(fp)
   13b00:	10800017 	ldw	r2,0(r2)
   13b04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13b08:	e0bffc17 	ldw	r2,-16(fp)
   13b0c:	10c00a04 	addi	r3,r2,40
   13b10:	e0bffd17 	ldw	r2,-12(fp)
   13b14:	10800217 	ldw	r2,8(r2)
   13b18:	100f883a 	mov	r7,r2
   13b1c:	e1bfff17 	ldw	r6,-4(fp)
   13b20:	e17ffe17 	ldw	r5,-8(fp)
   13b24:	1809883a 	mov	r4,r3
   13b28:	00141080 	call	14108 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13b2c:	e037883a 	mov	sp,fp
   13b30:	dfc00117 	ldw	ra,4(sp)
   13b34:	df000017 	ldw	fp,0(sp)
   13b38:	dec00204 	addi	sp,sp,8
   13b3c:	f800283a 	ret

00013b40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13b40:	defffa04 	addi	sp,sp,-24
   13b44:	dfc00515 	stw	ra,20(sp)
   13b48:	df000415 	stw	fp,16(sp)
   13b4c:	df000404 	addi	fp,sp,16
   13b50:	e13ffd15 	stw	r4,-12(fp)
   13b54:	e17ffe15 	stw	r5,-8(fp)
   13b58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13b5c:	e0bffd17 	ldw	r2,-12(fp)
   13b60:	10800017 	ldw	r2,0(r2)
   13b64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13b68:	e0bffc17 	ldw	r2,-16(fp)
   13b6c:	10c00a04 	addi	r3,r2,40
   13b70:	e0bffd17 	ldw	r2,-12(fp)
   13b74:	10800217 	ldw	r2,8(r2)
   13b78:	100f883a 	mov	r7,r2
   13b7c:	e1bfff17 	ldw	r6,-4(fp)
   13b80:	e17ffe17 	ldw	r5,-8(fp)
   13b84:	1809883a 	mov	r4,r3
   13b88:	00143240 	call	14324 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13b8c:	e037883a 	mov	sp,fp
   13b90:	dfc00117 	ldw	ra,4(sp)
   13b94:	df000017 	ldw	fp,0(sp)
   13b98:	dec00204 	addi	sp,sp,8
   13b9c:	f800283a 	ret

00013ba0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13ba0:	defffc04 	addi	sp,sp,-16
   13ba4:	dfc00315 	stw	ra,12(sp)
   13ba8:	df000215 	stw	fp,8(sp)
   13bac:	df000204 	addi	fp,sp,8
   13bb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13bb4:	e0bfff17 	ldw	r2,-4(fp)
   13bb8:	10800017 	ldw	r2,0(r2)
   13bbc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13bc0:	e0bffe17 	ldw	r2,-8(fp)
   13bc4:	10c00a04 	addi	r3,r2,40
   13bc8:	e0bfff17 	ldw	r2,-4(fp)
   13bcc:	10800217 	ldw	r2,8(r2)
   13bd0:	100b883a 	mov	r5,r2
   13bd4:	1809883a 	mov	r4,r3
   13bd8:	0013fb00 	call	13fb0 <altera_avalon_jtag_uart_close>
}
   13bdc:	e037883a 	mov	sp,fp
   13be0:	dfc00117 	ldw	ra,4(sp)
   13be4:	df000017 	ldw	fp,0(sp)
   13be8:	dec00204 	addi	sp,sp,8
   13bec:	f800283a 	ret

00013bf0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13bf0:	defffa04 	addi	sp,sp,-24
   13bf4:	dfc00515 	stw	ra,20(sp)
   13bf8:	df000415 	stw	fp,16(sp)
   13bfc:	df000404 	addi	fp,sp,16
   13c00:	e13ffd15 	stw	r4,-12(fp)
   13c04:	e17ffe15 	stw	r5,-8(fp)
   13c08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13c0c:	e0bffd17 	ldw	r2,-12(fp)
   13c10:	10800017 	ldw	r2,0(r2)
   13c14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13c18:	e0bffc17 	ldw	r2,-16(fp)
   13c1c:	10800a04 	addi	r2,r2,40
   13c20:	e1bfff17 	ldw	r6,-4(fp)
   13c24:	e17ffe17 	ldw	r5,-8(fp)
   13c28:	1009883a 	mov	r4,r2
   13c2c:	00140180 	call	14018 <altera_avalon_jtag_uart_ioctl>
}
   13c30:	e037883a 	mov	sp,fp
   13c34:	dfc00117 	ldw	ra,4(sp)
   13c38:	df000017 	ldw	fp,0(sp)
   13c3c:	dec00204 	addi	sp,sp,8
   13c40:	f800283a 	ret

00013c44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13c44:	defffa04 	addi	sp,sp,-24
   13c48:	dfc00515 	stw	ra,20(sp)
   13c4c:	df000415 	stw	fp,16(sp)
   13c50:	df000404 	addi	fp,sp,16
   13c54:	e13ffd15 	stw	r4,-12(fp)
   13c58:	e17ffe15 	stw	r5,-8(fp)
   13c5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13c60:	e0bffd17 	ldw	r2,-12(fp)
   13c64:	00c00044 	movi	r3,1
   13c68:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13c6c:	e0bffd17 	ldw	r2,-12(fp)
   13c70:	10800017 	ldw	r2,0(r2)
   13c74:	10800104 	addi	r2,r2,4
   13c78:	1007883a 	mov	r3,r2
   13c7c:	e0bffd17 	ldw	r2,-12(fp)
   13c80:	10800817 	ldw	r2,32(r2)
   13c84:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13c88:	e0bffe17 	ldw	r2,-8(fp)
   13c8c:	e0ffff17 	ldw	r3,-4(fp)
   13c90:	d8000015 	stw	zero,0(sp)
   13c94:	e1fffd17 	ldw	r7,-12(fp)
   13c98:	01800074 	movhi	r6,1
   13c9c:	318f4104 	addi	r6,r6,15620
   13ca0:	180b883a 	mov	r5,r3
   13ca4:	1009883a 	mov	r4,r2
   13ca8:	00148900 	call	14890 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13cac:	e0bffd17 	ldw	r2,-12(fp)
   13cb0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13cb4:	e0bffd17 	ldw	r2,-12(fp)
   13cb8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13cbc:	d0e6b517 	ldw	r3,-25900(gp)
   13cc0:	e1fffd17 	ldw	r7,-12(fp)
   13cc4:	01800074 	movhi	r6,1
   13cc8:	318fc404 	addi	r6,r6,16144
   13ccc:	180b883a 	mov	r5,r3
   13cd0:	1009883a 	mov	r4,r2
   13cd4:	00145480 	call	14548 <alt_alarm_start>
   13cd8:	1000040e 	bge	r2,zero,13cec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13cdc:	e0fffd17 	ldw	r3,-12(fp)
   13ce0:	00a00034 	movhi	r2,32768
   13ce4:	10bfffc4 	addi	r2,r2,-1
   13ce8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13cec:	0001883a 	nop
   13cf0:	e037883a 	mov	sp,fp
   13cf4:	dfc00117 	ldw	ra,4(sp)
   13cf8:	df000017 	ldw	fp,0(sp)
   13cfc:	dec00204 	addi	sp,sp,8
   13d00:	f800283a 	ret

00013d04 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13d04:	defff804 	addi	sp,sp,-32
   13d08:	df000715 	stw	fp,28(sp)
   13d0c:	df000704 	addi	fp,sp,28
   13d10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13d14:	e0bfff17 	ldw	r2,-4(fp)
   13d18:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13d1c:	e0bffb17 	ldw	r2,-20(fp)
   13d20:	10800017 	ldw	r2,0(r2)
   13d24:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13d28:	e0bffc17 	ldw	r2,-16(fp)
   13d2c:	10800104 	addi	r2,r2,4
   13d30:	10800037 	ldwio	r2,0(r2)
   13d34:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13d38:	e0bffd17 	ldw	r2,-12(fp)
   13d3c:	1080c00c 	andi	r2,r2,768
   13d40:	10006d26 	beq	r2,zero,13ef8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13d44:	e0bffd17 	ldw	r2,-12(fp)
   13d48:	1080400c 	andi	r2,r2,256
   13d4c:	10003526 	beq	r2,zero,13e24 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13d50:	00800074 	movhi	r2,1
   13d54:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13d58:	e0bffb17 	ldw	r2,-20(fp)
   13d5c:	10800a17 	ldw	r2,40(r2)
   13d60:	10800044 	addi	r2,r2,1
   13d64:	1081ffcc 	andi	r2,r2,2047
   13d68:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13d6c:	e0bffb17 	ldw	r2,-20(fp)
   13d70:	10c00b17 	ldw	r3,44(r2)
   13d74:	e0bffe17 	ldw	r2,-8(fp)
   13d78:	18801526 	beq	r3,r2,13dd0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13d7c:	e0bffc17 	ldw	r2,-16(fp)
   13d80:	10800037 	ldwio	r2,0(r2)
   13d84:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13d88:	e0bff917 	ldw	r2,-28(fp)
   13d8c:	10a0000c 	andi	r2,r2,32768
   13d90:	10001126 	beq	r2,zero,13dd8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13d94:	e0bffb17 	ldw	r2,-20(fp)
   13d98:	10800a17 	ldw	r2,40(r2)
   13d9c:	e0fff917 	ldw	r3,-28(fp)
   13da0:	1809883a 	mov	r4,r3
   13da4:	e0fffb17 	ldw	r3,-20(fp)
   13da8:	1885883a 	add	r2,r3,r2
   13dac:	10800e04 	addi	r2,r2,56
   13db0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13db4:	e0bffb17 	ldw	r2,-20(fp)
   13db8:	10800a17 	ldw	r2,40(r2)
   13dbc:	10800044 	addi	r2,r2,1
   13dc0:	10c1ffcc 	andi	r3,r2,2047
   13dc4:	e0bffb17 	ldw	r2,-20(fp)
   13dc8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13dcc:	003fe206 	br	13d58 <_gp+0xffff4b58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   13dd0:	0001883a 	nop
   13dd4:	00000106 	br	13ddc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   13dd8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13ddc:	e0bff917 	ldw	r2,-28(fp)
   13de0:	10bfffec 	andhi	r2,r2,65535
   13de4:	10000f26 	beq	r2,zero,13e24 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13de8:	e0bffb17 	ldw	r2,-20(fp)
   13dec:	10c00817 	ldw	r3,32(r2)
   13df0:	00bfff84 	movi	r2,-2
   13df4:	1886703a 	and	r3,r3,r2
   13df8:	e0bffb17 	ldw	r2,-20(fp)
   13dfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13e00:	e0bffc17 	ldw	r2,-16(fp)
   13e04:	10800104 	addi	r2,r2,4
   13e08:	1007883a 	mov	r3,r2
   13e0c:	e0bffb17 	ldw	r2,-20(fp)
   13e10:	10800817 	ldw	r2,32(r2)
   13e14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13e18:	e0bffc17 	ldw	r2,-16(fp)
   13e1c:	10800104 	addi	r2,r2,4
   13e20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13e24:	e0bffd17 	ldw	r2,-12(fp)
   13e28:	1080800c 	andi	r2,r2,512
   13e2c:	103fbe26 	beq	r2,zero,13d28 <_gp+0xffff4b28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13e30:	e0bffd17 	ldw	r2,-12(fp)
   13e34:	1004d43a 	srli	r2,r2,16
   13e38:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13e3c:	00001406 	br	13e90 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13e40:	e0bffc17 	ldw	r2,-16(fp)
   13e44:	e0fffb17 	ldw	r3,-20(fp)
   13e48:	18c00d17 	ldw	r3,52(r3)
   13e4c:	e13ffb17 	ldw	r4,-20(fp)
   13e50:	20c7883a 	add	r3,r4,r3
   13e54:	18c20e04 	addi	r3,r3,2104
   13e58:	18c00003 	ldbu	r3,0(r3)
   13e5c:	18c03fcc 	andi	r3,r3,255
   13e60:	18c0201c 	xori	r3,r3,128
   13e64:	18ffe004 	addi	r3,r3,-128
   13e68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13e6c:	e0bffb17 	ldw	r2,-20(fp)
   13e70:	10800d17 	ldw	r2,52(r2)
   13e74:	10800044 	addi	r2,r2,1
   13e78:	10c1ffcc 	andi	r3,r2,2047
   13e7c:	e0bffb17 	ldw	r2,-20(fp)
   13e80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13e84:	e0bffa17 	ldw	r2,-24(fp)
   13e88:	10bfffc4 	addi	r2,r2,-1
   13e8c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13e90:	e0bffa17 	ldw	r2,-24(fp)
   13e94:	10000526 	beq	r2,zero,13eac <altera_avalon_jtag_uart_irq+0x1a8>
   13e98:	e0bffb17 	ldw	r2,-20(fp)
   13e9c:	10c00d17 	ldw	r3,52(r2)
   13ea0:	e0bffb17 	ldw	r2,-20(fp)
   13ea4:	10800c17 	ldw	r2,48(r2)
   13ea8:	18bfe51e 	bne	r3,r2,13e40 <_gp+0xffff4c40>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13eac:	e0bffa17 	ldw	r2,-24(fp)
   13eb0:	103f9d26 	beq	r2,zero,13d28 <_gp+0xffff4b28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13eb4:	e0bffb17 	ldw	r2,-20(fp)
   13eb8:	10c00817 	ldw	r3,32(r2)
   13ebc:	00bfff44 	movi	r2,-3
   13ec0:	1886703a 	and	r3,r3,r2
   13ec4:	e0bffb17 	ldw	r2,-20(fp)
   13ec8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13ecc:	e0bffb17 	ldw	r2,-20(fp)
   13ed0:	10800017 	ldw	r2,0(r2)
   13ed4:	10800104 	addi	r2,r2,4
   13ed8:	1007883a 	mov	r3,r2
   13edc:	e0bffb17 	ldw	r2,-20(fp)
   13ee0:	10800817 	ldw	r2,32(r2)
   13ee4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13ee8:	e0bffc17 	ldw	r2,-16(fp)
   13eec:	10800104 	addi	r2,r2,4
   13ef0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13ef4:	003f8c06 	br	13d28 <_gp+0xffff4b28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   13ef8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   13efc:	0001883a 	nop
   13f00:	e037883a 	mov	sp,fp
   13f04:	df000017 	ldw	fp,0(sp)
   13f08:	dec00104 	addi	sp,sp,4
   13f0c:	f800283a 	ret

00013f10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13f10:	defff804 	addi	sp,sp,-32
   13f14:	df000715 	stw	fp,28(sp)
   13f18:	df000704 	addi	fp,sp,28
   13f1c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13f20:	e0bffb17 	ldw	r2,-20(fp)
   13f24:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13f28:	e0bff917 	ldw	r2,-28(fp)
   13f2c:	10800017 	ldw	r2,0(r2)
   13f30:	10800104 	addi	r2,r2,4
   13f34:	10800037 	ldwio	r2,0(r2)
   13f38:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13f3c:	e0bffa17 	ldw	r2,-24(fp)
   13f40:	1081000c 	andi	r2,r2,1024
   13f44:	10000b26 	beq	r2,zero,13f74 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13f48:	e0bff917 	ldw	r2,-28(fp)
   13f4c:	10800017 	ldw	r2,0(r2)
   13f50:	10800104 	addi	r2,r2,4
   13f54:	1007883a 	mov	r3,r2
   13f58:	e0bff917 	ldw	r2,-28(fp)
   13f5c:	10800817 	ldw	r2,32(r2)
   13f60:	10810014 	ori	r2,r2,1024
   13f64:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13f68:	e0bff917 	ldw	r2,-28(fp)
   13f6c:	10000915 	stw	zero,36(r2)
   13f70:	00000a06 	br	13f9c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13f74:	e0bff917 	ldw	r2,-28(fp)
   13f78:	10c00917 	ldw	r3,36(r2)
   13f7c:	00a00034 	movhi	r2,32768
   13f80:	10bfff04 	addi	r2,r2,-4
   13f84:	10c00536 	bltu	r2,r3,13f9c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   13f88:	e0bff917 	ldw	r2,-28(fp)
   13f8c:	10800917 	ldw	r2,36(r2)
   13f90:	10c00044 	addi	r3,r2,1
   13f94:	e0bff917 	ldw	r2,-28(fp)
   13f98:	10c00915 	stw	r3,36(r2)
   13f9c:	d0a6b517 	ldw	r2,-25900(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13fa0:	e037883a 	mov	sp,fp
   13fa4:	df000017 	ldw	fp,0(sp)
   13fa8:	dec00104 	addi	sp,sp,4
   13fac:	f800283a 	ret

00013fb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13fb0:	defffd04 	addi	sp,sp,-12
   13fb4:	df000215 	stw	fp,8(sp)
   13fb8:	df000204 	addi	fp,sp,8
   13fbc:	e13ffe15 	stw	r4,-8(fp)
   13fc0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13fc4:	00000506 	br	13fdc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13fc8:	e0bfff17 	ldw	r2,-4(fp)
   13fcc:	1090000c 	andi	r2,r2,16384
   13fd0:	10000226 	beq	r2,zero,13fdc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13fd4:	00bffd44 	movi	r2,-11
   13fd8:	00000b06 	br	14008 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13fdc:	e0bffe17 	ldw	r2,-8(fp)
   13fe0:	10c00d17 	ldw	r3,52(r2)
   13fe4:	e0bffe17 	ldw	r2,-8(fp)
   13fe8:	10800c17 	ldw	r2,48(r2)
   13fec:	18800526 	beq	r3,r2,14004 <altera_avalon_jtag_uart_close+0x54>
   13ff0:	e0bffe17 	ldw	r2,-8(fp)
   13ff4:	10c00917 	ldw	r3,36(r2)
   13ff8:	e0bffe17 	ldw	r2,-8(fp)
   13ffc:	10800117 	ldw	r2,4(r2)
   14000:	18bff136 	bltu	r3,r2,13fc8 <_gp+0xffff4dc8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14004:	0005883a 	mov	r2,zero
}
   14008:	e037883a 	mov	sp,fp
   1400c:	df000017 	ldw	fp,0(sp)
   14010:	dec00104 	addi	sp,sp,4
   14014:	f800283a 	ret

00014018 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14018:	defffa04 	addi	sp,sp,-24
   1401c:	df000515 	stw	fp,20(sp)
   14020:	df000504 	addi	fp,sp,20
   14024:	e13ffd15 	stw	r4,-12(fp)
   14028:	e17ffe15 	stw	r5,-8(fp)
   1402c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14030:	00bff9c4 	movi	r2,-25
   14034:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14038:	e0bffe17 	ldw	r2,-8(fp)
   1403c:	10da8060 	cmpeqi	r3,r2,27137
   14040:	1800031e 	bne	r3,zero,14050 <altera_avalon_jtag_uart_ioctl+0x38>
   14044:	109a80a0 	cmpeqi	r2,r2,27138
   14048:	1000181e 	bne	r2,zero,140ac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1404c:	00002906 	br	140f4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14050:	e0bffd17 	ldw	r2,-12(fp)
   14054:	10c00117 	ldw	r3,4(r2)
   14058:	00a00034 	movhi	r2,32768
   1405c:	10bfffc4 	addi	r2,r2,-1
   14060:	18802126 	beq	r3,r2,140e8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14064:	e0bfff17 	ldw	r2,-4(fp)
   14068:	10800017 	ldw	r2,0(r2)
   1406c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14070:	e0bffc17 	ldw	r2,-16(fp)
   14074:	10800090 	cmplti	r2,r2,2
   14078:	1000061e 	bne	r2,zero,14094 <altera_avalon_jtag_uart_ioctl+0x7c>
   1407c:	e0fffc17 	ldw	r3,-16(fp)
   14080:	00a00034 	movhi	r2,32768
   14084:	10bfffc4 	addi	r2,r2,-1
   14088:	18800226 	beq	r3,r2,14094 <altera_avalon_jtag_uart_ioctl+0x7c>
   1408c:	e0bffc17 	ldw	r2,-16(fp)
   14090:	00000206 	br	1409c <altera_avalon_jtag_uart_ioctl+0x84>
   14094:	00a00034 	movhi	r2,32768
   14098:	10bfff84 	addi	r2,r2,-2
   1409c:	e0fffd17 	ldw	r3,-12(fp)
   140a0:	18800115 	stw	r2,4(r3)
      rc = 0;
   140a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   140a8:	00000f06 	br	140e8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   140ac:	e0bffd17 	ldw	r2,-12(fp)
   140b0:	10c00117 	ldw	r3,4(r2)
   140b4:	00a00034 	movhi	r2,32768
   140b8:	10bfffc4 	addi	r2,r2,-1
   140bc:	18800c26 	beq	r3,r2,140f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   140c0:	e0bffd17 	ldw	r2,-12(fp)
   140c4:	10c00917 	ldw	r3,36(r2)
   140c8:	e0bffd17 	ldw	r2,-12(fp)
   140cc:	10800117 	ldw	r2,4(r2)
   140d0:	1885803a 	cmpltu	r2,r3,r2
   140d4:	10c03fcc 	andi	r3,r2,255
   140d8:	e0bfff17 	ldw	r2,-4(fp)
   140dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   140e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   140e4:	00000206 	br	140f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   140e8:	0001883a 	nop
   140ec:	00000106 	br	140f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   140f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   140f4:	e0bffb17 	ldw	r2,-20(fp)
}
   140f8:	e037883a 	mov	sp,fp
   140fc:	df000017 	ldw	fp,0(sp)
   14100:	dec00104 	addi	sp,sp,4
   14104:	f800283a 	ret

00014108 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14108:	defff304 	addi	sp,sp,-52
   1410c:	dfc00c15 	stw	ra,48(sp)
   14110:	df000b15 	stw	fp,44(sp)
   14114:	df000b04 	addi	fp,sp,44
   14118:	e13ffc15 	stw	r4,-16(fp)
   1411c:	e17ffd15 	stw	r5,-12(fp)
   14120:	e1bffe15 	stw	r6,-8(fp)
   14124:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14128:	e0bffd17 	ldw	r2,-12(fp)
   1412c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14130:	00004706 	br	14250 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14134:	e0bffc17 	ldw	r2,-16(fp)
   14138:	10800a17 	ldw	r2,40(r2)
   1413c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14140:	e0bffc17 	ldw	r2,-16(fp)
   14144:	10800b17 	ldw	r2,44(r2)
   14148:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1414c:	e0fff717 	ldw	r3,-36(fp)
   14150:	e0bff817 	ldw	r2,-32(fp)
   14154:	18800536 	bltu	r3,r2,1416c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14158:	e0fff717 	ldw	r3,-36(fp)
   1415c:	e0bff817 	ldw	r2,-32(fp)
   14160:	1885c83a 	sub	r2,r3,r2
   14164:	e0bff615 	stw	r2,-40(fp)
   14168:	00000406 	br	1417c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1416c:	00c20004 	movi	r3,2048
   14170:	e0bff817 	ldw	r2,-32(fp)
   14174:	1885c83a 	sub	r2,r3,r2
   14178:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1417c:	e0bff617 	ldw	r2,-40(fp)
   14180:	10001e26 	beq	r2,zero,141fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14184:	e0fffe17 	ldw	r3,-8(fp)
   14188:	e0bff617 	ldw	r2,-40(fp)
   1418c:	1880022e 	bgeu	r3,r2,14198 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14190:	e0bffe17 	ldw	r2,-8(fp)
   14194:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14198:	e0bffc17 	ldw	r2,-16(fp)
   1419c:	10c00e04 	addi	r3,r2,56
   141a0:	e0bff817 	ldw	r2,-32(fp)
   141a4:	1885883a 	add	r2,r3,r2
   141a8:	e1bff617 	ldw	r6,-40(fp)
   141ac:	100b883a 	mov	r5,r2
   141b0:	e13ff517 	ldw	r4,-44(fp)
   141b4:	001175c0 	call	1175c <memcpy>
      ptr   += n;
   141b8:	e0fff517 	ldw	r3,-44(fp)
   141bc:	e0bff617 	ldw	r2,-40(fp)
   141c0:	1885883a 	add	r2,r3,r2
   141c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   141c8:	e0fffe17 	ldw	r3,-8(fp)
   141cc:	e0bff617 	ldw	r2,-40(fp)
   141d0:	1885c83a 	sub	r2,r3,r2
   141d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   141d8:	e0fff817 	ldw	r3,-32(fp)
   141dc:	e0bff617 	ldw	r2,-40(fp)
   141e0:	1885883a 	add	r2,r3,r2
   141e4:	10c1ffcc 	andi	r3,r2,2047
   141e8:	e0bffc17 	ldw	r2,-16(fp)
   141ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   141f0:	e0bffe17 	ldw	r2,-8(fp)
   141f4:	00bfcf16 	blt	zero,r2,14134 <_gp+0xffff4f34>
   141f8:	00000106 	br	14200 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   141fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14200:	e0fff517 	ldw	r3,-44(fp)
   14204:	e0bffd17 	ldw	r2,-12(fp)
   14208:	1880141e 	bne	r3,r2,1425c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1420c:	e0bfff17 	ldw	r2,-4(fp)
   14210:	1090000c 	andi	r2,r2,16384
   14214:	1000131e 	bne	r2,zero,14264 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14218:	0001883a 	nop
   1421c:	e0bffc17 	ldw	r2,-16(fp)
   14220:	10c00a17 	ldw	r3,40(r2)
   14224:	e0bff717 	ldw	r2,-36(fp)
   14228:	1880051e 	bne	r3,r2,14240 <altera_avalon_jtag_uart_read+0x138>
   1422c:	e0bffc17 	ldw	r2,-16(fp)
   14230:	10c00917 	ldw	r3,36(r2)
   14234:	e0bffc17 	ldw	r2,-16(fp)
   14238:	10800117 	ldw	r2,4(r2)
   1423c:	18bff736 	bltu	r3,r2,1421c <_gp+0xffff501c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14240:	e0bffc17 	ldw	r2,-16(fp)
   14244:	10c00a17 	ldw	r3,40(r2)
   14248:	e0bff717 	ldw	r2,-36(fp)
   1424c:	18800726 	beq	r3,r2,1426c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14250:	e0bffe17 	ldw	r2,-8(fp)
   14254:	00bfb716 	blt	zero,r2,14134 <_gp+0xffff4f34>
   14258:	00000506 	br	14270 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1425c:	0001883a 	nop
   14260:	00000306 	br	14270 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14264:	0001883a 	nop
   14268:	00000106 	br	14270 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1426c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14270:	e0fff517 	ldw	r3,-44(fp)
   14274:	e0bffd17 	ldw	r2,-12(fp)
   14278:	18801826 	beq	r3,r2,142dc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1427c:	0005303a 	rdctl	r2,status
   14280:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14284:	e0fffb17 	ldw	r3,-20(fp)
   14288:	00bfff84 	movi	r2,-2
   1428c:	1884703a 	and	r2,r3,r2
   14290:	1001703a 	wrctl	status,r2
  
  return context;
   14294:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14298:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1429c:	e0bffc17 	ldw	r2,-16(fp)
   142a0:	10800817 	ldw	r2,32(r2)
   142a4:	10c00054 	ori	r3,r2,1
   142a8:	e0bffc17 	ldw	r2,-16(fp)
   142ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   142b0:	e0bffc17 	ldw	r2,-16(fp)
   142b4:	10800017 	ldw	r2,0(r2)
   142b8:	10800104 	addi	r2,r2,4
   142bc:	1007883a 	mov	r3,r2
   142c0:	e0bffc17 	ldw	r2,-16(fp)
   142c4:	10800817 	ldw	r2,32(r2)
   142c8:	18800035 	stwio	r2,0(r3)
   142cc:	e0bffa17 	ldw	r2,-24(fp)
   142d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142d4:	e0bff917 	ldw	r2,-28(fp)
   142d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   142dc:	e0fff517 	ldw	r3,-44(fp)
   142e0:	e0bffd17 	ldw	r2,-12(fp)
   142e4:	18800426 	beq	r3,r2,142f8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   142e8:	e0fff517 	ldw	r3,-44(fp)
   142ec:	e0bffd17 	ldw	r2,-12(fp)
   142f0:	1885c83a 	sub	r2,r3,r2
   142f4:	00000606 	br	14310 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   142f8:	e0bfff17 	ldw	r2,-4(fp)
   142fc:	1090000c 	andi	r2,r2,16384
   14300:	10000226 	beq	r2,zero,1430c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14304:	00bffd44 	movi	r2,-11
   14308:	00000106 	br	14310 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1430c:	00bffec4 	movi	r2,-5
}
   14310:	e037883a 	mov	sp,fp
   14314:	dfc00117 	ldw	ra,4(sp)
   14318:	df000017 	ldw	fp,0(sp)
   1431c:	dec00204 	addi	sp,sp,8
   14320:	f800283a 	ret

00014324 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14324:	defff304 	addi	sp,sp,-52
   14328:	dfc00c15 	stw	ra,48(sp)
   1432c:	df000b15 	stw	fp,44(sp)
   14330:	df000b04 	addi	fp,sp,44
   14334:	e13ffc15 	stw	r4,-16(fp)
   14338:	e17ffd15 	stw	r5,-12(fp)
   1433c:	e1bffe15 	stw	r6,-8(fp)
   14340:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14344:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14348:	e0bffd17 	ldw	r2,-12(fp)
   1434c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14350:	00003706 	br	14430 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14354:	e0bffc17 	ldw	r2,-16(fp)
   14358:	10800c17 	ldw	r2,48(r2)
   1435c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   14360:	e0bffc17 	ldw	r2,-16(fp)
   14364:	10800d17 	ldw	r2,52(r2)
   14368:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1436c:	e0fff917 	ldw	r3,-28(fp)
   14370:	e0bff517 	ldw	r2,-44(fp)
   14374:	1880062e 	bgeu	r3,r2,14390 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14378:	e0fff517 	ldw	r3,-44(fp)
   1437c:	e0bff917 	ldw	r2,-28(fp)
   14380:	1885c83a 	sub	r2,r3,r2
   14384:	10bfffc4 	addi	r2,r2,-1
   14388:	e0bff615 	stw	r2,-40(fp)
   1438c:	00000b06 	br	143bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14390:	e0bff517 	ldw	r2,-44(fp)
   14394:	10000526 	beq	r2,zero,143ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14398:	00c20004 	movi	r3,2048
   1439c:	e0bff917 	ldw	r2,-28(fp)
   143a0:	1885c83a 	sub	r2,r3,r2
   143a4:	e0bff615 	stw	r2,-40(fp)
   143a8:	00000406 	br	143bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   143ac:	00c1ffc4 	movi	r3,2047
   143b0:	e0bff917 	ldw	r2,-28(fp)
   143b4:	1885c83a 	sub	r2,r3,r2
   143b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   143bc:	e0bff617 	ldw	r2,-40(fp)
   143c0:	10001e26 	beq	r2,zero,1443c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   143c4:	e0fffe17 	ldw	r3,-8(fp)
   143c8:	e0bff617 	ldw	r2,-40(fp)
   143cc:	1880022e 	bgeu	r3,r2,143d8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   143d0:	e0bffe17 	ldw	r2,-8(fp)
   143d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   143d8:	e0bffc17 	ldw	r2,-16(fp)
   143dc:	10c20e04 	addi	r3,r2,2104
   143e0:	e0bff917 	ldw	r2,-28(fp)
   143e4:	1885883a 	add	r2,r3,r2
   143e8:	e1bff617 	ldw	r6,-40(fp)
   143ec:	e17ffd17 	ldw	r5,-12(fp)
   143f0:	1009883a 	mov	r4,r2
   143f4:	001175c0 	call	1175c <memcpy>
      ptr   += n;
   143f8:	e0fffd17 	ldw	r3,-12(fp)
   143fc:	e0bff617 	ldw	r2,-40(fp)
   14400:	1885883a 	add	r2,r3,r2
   14404:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14408:	e0fffe17 	ldw	r3,-8(fp)
   1440c:	e0bff617 	ldw	r2,-40(fp)
   14410:	1885c83a 	sub	r2,r3,r2
   14414:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14418:	e0fff917 	ldw	r3,-28(fp)
   1441c:	e0bff617 	ldw	r2,-40(fp)
   14420:	1885883a 	add	r2,r3,r2
   14424:	10c1ffcc 	andi	r3,r2,2047
   14428:	e0bffc17 	ldw	r2,-16(fp)
   1442c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14430:	e0bffe17 	ldw	r2,-8(fp)
   14434:	00bfc716 	blt	zero,r2,14354 <_gp+0xffff5154>
   14438:	00000106 	br	14440 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1443c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14440:	0005303a 	rdctl	r2,status
   14444:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14448:	e0fffb17 	ldw	r3,-20(fp)
   1444c:	00bfff84 	movi	r2,-2
   14450:	1884703a 	and	r2,r3,r2
   14454:	1001703a 	wrctl	status,r2
  
  return context;
   14458:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1445c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14460:	e0bffc17 	ldw	r2,-16(fp)
   14464:	10800817 	ldw	r2,32(r2)
   14468:	10c00094 	ori	r3,r2,2
   1446c:	e0bffc17 	ldw	r2,-16(fp)
   14470:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14474:	e0bffc17 	ldw	r2,-16(fp)
   14478:	10800017 	ldw	r2,0(r2)
   1447c:	10800104 	addi	r2,r2,4
   14480:	1007883a 	mov	r3,r2
   14484:	e0bffc17 	ldw	r2,-16(fp)
   14488:	10800817 	ldw	r2,32(r2)
   1448c:	18800035 	stwio	r2,0(r3)
   14490:	e0bffa17 	ldw	r2,-24(fp)
   14494:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14498:	e0bff817 	ldw	r2,-32(fp)
   1449c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   144a0:	e0bffe17 	ldw	r2,-8(fp)
   144a4:	0080100e 	bge	zero,r2,144e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   144a8:	e0bfff17 	ldw	r2,-4(fp)
   144ac:	1090000c 	andi	r2,r2,16384
   144b0:	1000101e 	bne	r2,zero,144f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   144b4:	0001883a 	nop
   144b8:	e0bffc17 	ldw	r2,-16(fp)
   144bc:	10c00d17 	ldw	r3,52(r2)
   144c0:	e0bff517 	ldw	r2,-44(fp)
   144c4:	1880051e 	bne	r3,r2,144dc <altera_avalon_jtag_uart_write+0x1b8>
   144c8:	e0bffc17 	ldw	r2,-16(fp)
   144cc:	10c00917 	ldw	r3,36(r2)
   144d0:	e0bffc17 	ldw	r2,-16(fp)
   144d4:	10800117 	ldw	r2,4(r2)
   144d8:	18bff736 	bltu	r3,r2,144b8 <_gp+0xffff52b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   144dc:	e0bffc17 	ldw	r2,-16(fp)
   144e0:	10800917 	ldw	r2,36(r2)
   144e4:	1000051e 	bne	r2,zero,144fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   144e8:	e0bffe17 	ldw	r2,-8(fp)
   144ec:	00bfd016 	blt	zero,r2,14430 <_gp+0xffff5230>
   144f0:	00000306 	br	14500 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   144f4:	0001883a 	nop
   144f8:	00000106 	br	14500 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   144fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14500:	e0fffd17 	ldw	r3,-12(fp)
   14504:	e0bff717 	ldw	r2,-36(fp)
   14508:	18800426 	beq	r3,r2,1451c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1450c:	e0fffd17 	ldw	r3,-12(fp)
   14510:	e0bff717 	ldw	r2,-36(fp)
   14514:	1885c83a 	sub	r2,r3,r2
   14518:	00000606 	br	14534 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1451c:	e0bfff17 	ldw	r2,-4(fp)
   14520:	1090000c 	andi	r2,r2,16384
   14524:	10000226 	beq	r2,zero,14530 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14528:	00bffd44 	movi	r2,-11
   1452c:	00000106 	br	14534 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14530:	00bffec4 	movi	r2,-5
}
   14534:	e037883a 	mov	sp,fp
   14538:	dfc00117 	ldw	ra,4(sp)
   1453c:	df000017 	ldw	fp,0(sp)
   14540:	dec00204 	addi	sp,sp,8
   14544:	f800283a 	ret

00014548 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14548:	defff504 	addi	sp,sp,-44
   1454c:	df000a15 	stw	fp,40(sp)
   14550:	df000a04 	addi	fp,sp,40
   14554:	e13ffc15 	stw	r4,-16(fp)
   14558:	e17ffd15 	stw	r5,-12(fp)
   1455c:	e1bffe15 	stw	r6,-8(fp)
   14560:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14564:	e03ff615 	stw	zero,-40(fp)
   14568:	d0a6b517 	ldw	r2,-25900(gp)
  
  if (alt_ticks_per_second ())
   1456c:	10003c26 	beq	r2,zero,14660 <alt_alarm_start+0x118>
  {
    if (alarm)
   14570:	e0bffc17 	ldw	r2,-16(fp)
   14574:	10003826 	beq	r2,zero,14658 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14578:	e0bffc17 	ldw	r2,-16(fp)
   1457c:	e0fffe17 	ldw	r3,-8(fp)
   14580:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14584:	e0bffc17 	ldw	r2,-16(fp)
   14588:	e0ffff17 	ldw	r3,-4(fp)
   1458c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14590:	0005303a 	rdctl	r2,status
   14594:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14598:	e0fff917 	ldw	r3,-28(fp)
   1459c:	00bfff84 	movi	r2,-2
   145a0:	1884703a 	and	r2,r3,r2
   145a4:	1001703a 	wrctl	status,r2
  
  return context;
   145a8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   145ac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   145b0:	d0a6b617 	ldw	r2,-25896(gp)
      
      current_nticks = alt_nticks();
   145b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   145b8:	e0fffd17 	ldw	r3,-12(fp)
   145bc:	e0bff617 	ldw	r2,-40(fp)
   145c0:	1885883a 	add	r2,r3,r2
   145c4:	10c00044 	addi	r3,r2,1
   145c8:	e0bffc17 	ldw	r2,-16(fp)
   145cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   145d0:	e0bffc17 	ldw	r2,-16(fp)
   145d4:	10c00217 	ldw	r3,8(r2)
   145d8:	e0bff617 	ldw	r2,-40(fp)
   145dc:	1880042e 	bgeu	r3,r2,145f0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   145e0:	e0bffc17 	ldw	r2,-16(fp)
   145e4:	00c00044 	movi	r3,1
   145e8:	10c00405 	stb	r3,16(r2)
   145ec:	00000206 	br	145f8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   145f0:	e0bffc17 	ldw	r2,-16(fp)
   145f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   145f8:	e0bffc17 	ldw	r2,-16(fp)
   145fc:	d0e00e04 	addi	r3,gp,-32712
   14600:	e0fffa15 	stw	r3,-24(fp)
   14604:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14608:	e0bffb17 	ldw	r2,-20(fp)
   1460c:	e0fffa17 	ldw	r3,-24(fp)
   14610:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14614:	e0bffa17 	ldw	r2,-24(fp)
   14618:	10c00017 	ldw	r3,0(r2)
   1461c:	e0bffb17 	ldw	r2,-20(fp)
   14620:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14624:	e0bffa17 	ldw	r2,-24(fp)
   14628:	10800017 	ldw	r2,0(r2)
   1462c:	e0fffb17 	ldw	r3,-20(fp)
   14630:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14634:	e0bffa17 	ldw	r2,-24(fp)
   14638:	e0fffb17 	ldw	r3,-20(fp)
   1463c:	10c00015 	stw	r3,0(r2)
   14640:	e0bff817 	ldw	r2,-32(fp)
   14644:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14648:	e0bff717 	ldw	r2,-36(fp)
   1464c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14650:	0005883a 	mov	r2,zero
   14654:	00000306 	br	14664 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14658:	00bffa84 	movi	r2,-22
   1465c:	00000106 	br	14664 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   14660:	00bfde84 	movi	r2,-134
  }
}
   14664:	e037883a 	mov	sp,fp
   14668:	df000017 	ldw	fp,0(sp)
   1466c:	dec00104 	addi	sp,sp,4
   14670:	f800283a 	ret

00014674 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14674:	defffe04 	addi	sp,sp,-8
   14678:	df000115 	stw	fp,4(sp)
   1467c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   14680:	e03fff15 	stw	zero,-4(fp)
   14684:	00000506 	br	1469c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   14688:	e0bfff17 	ldw	r2,-4(fp)
   1468c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   14690:	e0bfff17 	ldw	r2,-4(fp)
   14694:	10800804 	addi	r2,r2,32
   14698:	e0bfff15 	stw	r2,-4(fp)
   1469c:	e0bfff17 	ldw	r2,-4(fp)
   146a0:	10820030 	cmpltui	r2,r2,2048
   146a4:	103ff81e 	bne	r2,zero,14688 <_gp+0xffff5488>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   146a8:	0001883a 	nop
   146ac:	e037883a 	mov	sp,fp
   146b0:	df000017 	ldw	fp,0(sp)
   146b4:	dec00104 	addi	sp,sp,4
   146b8:	f800283a 	ret

000146bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   146bc:	defffe04 	addi	sp,sp,-8
   146c0:	dfc00115 	stw	ra,4(sp)
   146c4:	df000015 	stw	fp,0(sp)
   146c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   146cc:	d0a00b17 	ldw	r2,-32724(gp)
   146d0:	10000326 	beq	r2,zero,146e0 <alt_get_errno+0x24>
   146d4:	d0a00b17 	ldw	r2,-32724(gp)
   146d8:	103ee83a 	callr	r2
   146dc:	00000106 	br	146e4 <alt_get_errno+0x28>
   146e0:	d0a6b004 	addi	r2,gp,-25920
}
   146e4:	e037883a 	mov	sp,fp
   146e8:	dfc00117 	ldw	ra,4(sp)
   146ec:	df000017 	ldw	fp,0(sp)
   146f0:	dec00204 	addi	sp,sp,8
   146f4:	f800283a 	ret

000146f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   146f8:	defffa04 	addi	sp,sp,-24
   146fc:	dfc00515 	stw	ra,20(sp)
   14700:	df000415 	stw	fp,16(sp)
   14704:	df000404 	addi	fp,sp,16
   14708:	e13ffe15 	stw	r4,-8(fp)
   1470c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14710:	e0bffe17 	ldw	r2,-8(fp)
   14714:	10000326 	beq	r2,zero,14724 <alt_dev_llist_insert+0x2c>
   14718:	e0bffe17 	ldw	r2,-8(fp)
   1471c:	10800217 	ldw	r2,8(r2)
   14720:	1000061e 	bne	r2,zero,1473c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14724:	00146bc0 	call	146bc <alt_get_errno>
   14728:	1007883a 	mov	r3,r2
   1472c:	00800584 	movi	r2,22
   14730:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14734:	00bffa84 	movi	r2,-22
   14738:	00001306 	br	14788 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1473c:	e0bffe17 	ldw	r2,-8(fp)
   14740:	e0ffff17 	ldw	r3,-4(fp)
   14744:	e0fffc15 	stw	r3,-16(fp)
   14748:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1474c:	e0bffd17 	ldw	r2,-12(fp)
   14750:	e0fffc17 	ldw	r3,-16(fp)
   14754:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14758:	e0bffc17 	ldw	r2,-16(fp)
   1475c:	10c00017 	ldw	r3,0(r2)
   14760:	e0bffd17 	ldw	r2,-12(fp)
   14764:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14768:	e0bffc17 	ldw	r2,-16(fp)
   1476c:	10800017 	ldw	r2,0(r2)
   14770:	e0fffd17 	ldw	r3,-12(fp)
   14774:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14778:	e0bffc17 	ldw	r2,-16(fp)
   1477c:	e0fffd17 	ldw	r3,-12(fp)
   14780:	10c00015 	stw	r3,0(r2)

  return 0;  
   14784:	0005883a 	mov	r2,zero
}
   14788:	e037883a 	mov	sp,fp
   1478c:	dfc00117 	ldw	ra,4(sp)
   14790:	df000017 	ldw	fp,0(sp)
   14794:	dec00204 	addi	sp,sp,8
   14798:	f800283a 	ret

0001479c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1479c:	defffd04 	addi	sp,sp,-12
   147a0:	dfc00215 	stw	ra,8(sp)
   147a4:	df000115 	stw	fp,4(sp)
   147a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   147ac:	00800074 	movhi	r2,1
   147b0:	1095e104 	addi	r2,r2,22404
   147b4:	e0bfff15 	stw	r2,-4(fp)
   147b8:	00000606 	br	147d4 <_do_ctors+0x38>
        (*ctor) (); 
   147bc:	e0bfff17 	ldw	r2,-4(fp)
   147c0:	10800017 	ldw	r2,0(r2)
   147c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   147c8:	e0bfff17 	ldw	r2,-4(fp)
   147cc:	10bfff04 	addi	r2,r2,-4
   147d0:	e0bfff15 	stw	r2,-4(fp)
   147d4:	e0ffff17 	ldw	r3,-4(fp)
   147d8:	00800074 	movhi	r2,1
   147dc:	1095e204 	addi	r2,r2,22408
   147e0:	18bff62e 	bgeu	r3,r2,147bc <_gp+0xffff55bc>
        (*ctor) (); 
}
   147e4:	0001883a 	nop
   147e8:	e037883a 	mov	sp,fp
   147ec:	dfc00117 	ldw	ra,4(sp)
   147f0:	df000017 	ldw	fp,0(sp)
   147f4:	dec00204 	addi	sp,sp,8
   147f8:	f800283a 	ret

000147fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   147fc:	defffd04 	addi	sp,sp,-12
   14800:	dfc00215 	stw	ra,8(sp)
   14804:	df000115 	stw	fp,4(sp)
   14808:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1480c:	00800074 	movhi	r2,1
   14810:	1095e104 	addi	r2,r2,22404
   14814:	e0bfff15 	stw	r2,-4(fp)
   14818:	00000606 	br	14834 <_do_dtors+0x38>
        (*dtor) (); 
   1481c:	e0bfff17 	ldw	r2,-4(fp)
   14820:	10800017 	ldw	r2,0(r2)
   14824:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14828:	e0bfff17 	ldw	r2,-4(fp)
   1482c:	10bfff04 	addi	r2,r2,-4
   14830:	e0bfff15 	stw	r2,-4(fp)
   14834:	e0ffff17 	ldw	r3,-4(fp)
   14838:	00800074 	movhi	r2,1
   1483c:	1095e204 	addi	r2,r2,22408
   14840:	18bff62e 	bgeu	r3,r2,1481c <_gp+0xffff561c>
        (*dtor) (); 
}
   14844:	0001883a 	nop
   14848:	e037883a 	mov	sp,fp
   1484c:	dfc00117 	ldw	ra,4(sp)
   14850:	df000017 	ldw	fp,0(sp)
   14854:	dec00204 	addi	sp,sp,8
   14858:	f800283a 	ret

0001485c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1485c:	defffe04 	addi	sp,sp,-8
   14860:	dfc00115 	stw	ra,4(sp)
   14864:	df000015 	stw	fp,0(sp)
   14868:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1486c:	01440004 	movi	r5,4096
   14870:	0009883a 	mov	r4,zero
   14874:	00152c80 	call	152c8 <alt_icache_flush>
#endif
}
   14878:	0001883a 	nop
   1487c:	e037883a 	mov	sp,fp
   14880:	dfc00117 	ldw	ra,4(sp)
   14884:	df000017 	ldw	fp,0(sp)
   14888:	dec00204 	addi	sp,sp,8
   1488c:	f800283a 	ret

00014890 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14890:	defff904 	addi	sp,sp,-28
   14894:	dfc00615 	stw	ra,24(sp)
   14898:	df000515 	stw	fp,20(sp)
   1489c:	df000504 	addi	fp,sp,20
   148a0:	e13ffc15 	stw	r4,-16(fp)
   148a4:	e17ffd15 	stw	r5,-12(fp)
   148a8:	e1bffe15 	stw	r6,-8(fp)
   148ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   148b0:	e0800217 	ldw	r2,8(fp)
   148b4:	d8800015 	stw	r2,0(sp)
   148b8:	e1ffff17 	ldw	r7,-4(fp)
   148bc:	e1bffe17 	ldw	r6,-8(fp)
   148c0:	e17ffd17 	ldw	r5,-12(fp)
   148c4:	e13ffc17 	ldw	r4,-16(fp)
   148c8:	0014a400 	call	14a40 <alt_iic_isr_register>
}  
   148cc:	e037883a 	mov	sp,fp
   148d0:	dfc00117 	ldw	ra,4(sp)
   148d4:	df000017 	ldw	fp,0(sp)
   148d8:	dec00204 	addi	sp,sp,8
   148dc:	f800283a 	ret

000148e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   148e0:	defff904 	addi	sp,sp,-28
   148e4:	df000615 	stw	fp,24(sp)
   148e8:	df000604 	addi	fp,sp,24
   148ec:	e13ffe15 	stw	r4,-8(fp)
   148f0:	e17fff15 	stw	r5,-4(fp)
   148f4:	e0bfff17 	ldw	r2,-4(fp)
   148f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148fc:	0005303a 	rdctl	r2,status
   14900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14904:	e0fffb17 	ldw	r3,-20(fp)
   14908:	00bfff84 	movi	r2,-2
   1490c:	1884703a 	and	r2,r3,r2
   14910:	1001703a 	wrctl	status,r2
  
  return context;
   14914:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14918:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1491c:	00c00044 	movi	r3,1
   14920:	e0bffa17 	ldw	r2,-24(fp)
   14924:	1884983a 	sll	r2,r3,r2
   14928:	1007883a 	mov	r3,r2
   1492c:	d0a6b417 	ldw	r2,-25904(gp)
   14930:	1884b03a 	or	r2,r3,r2
   14934:	d0a6b415 	stw	r2,-25904(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14938:	d0a6b417 	ldw	r2,-25904(gp)
   1493c:	100170fa 	wrctl	ienable,r2
   14940:	e0bffc17 	ldw	r2,-16(fp)
   14944:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14948:	e0bffd17 	ldw	r2,-12(fp)
   1494c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14950:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14954:	0001883a 	nop
}
   14958:	e037883a 	mov	sp,fp
   1495c:	df000017 	ldw	fp,0(sp)
   14960:	dec00104 	addi	sp,sp,4
   14964:	f800283a 	ret

00014968 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14968:	defff904 	addi	sp,sp,-28
   1496c:	df000615 	stw	fp,24(sp)
   14970:	df000604 	addi	fp,sp,24
   14974:	e13ffe15 	stw	r4,-8(fp)
   14978:	e17fff15 	stw	r5,-4(fp)
   1497c:	e0bfff17 	ldw	r2,-4(fp)
   14980:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14984:	0005303a 	rdctl	r2,status
   14988:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1498c:	e0fffb17 	ldw	r3,-20(fp)
   14990:	00bfff84 	movi	r2,-2
   14994:	1884703a 	and	r2,r3,r2
   14998:	1001703a 	wrctl	status,r2
  
  return context;
   1499c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   149a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   149a4:	00c00044 	movi	r3,1
   149a8:	e0bffa17 	ldw	r2,-24(fp)
   149ac:	1884983a 	sll	r2,r3,r2
   149b0:	0084303a 	nor	r2,zero,r2
   149b4:	1007883a 	mov	r3,r2
   149b8:	d0a6b417 	ldw	r2,-25904(gp)
   149bc:	1884703a 	and	r2,r3,r2
   149c0:	d0a6b415 	stw	r2,-25904(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   149c4:	d0a6b417 	ldw	r2,-25904(gp)
   149c8:	100170fa 	wrctl	ienable,r2
   149cc:	e0bffc17 	ldw	r2,-16(fp)
   149d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149d4:	e0bffd17 	ldw	r2,-12(fp)
   149d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   149dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   149e0:	0001883a 	nop
}
   149e4:	e037883a 	mov	sp,fp
   149e8:	df000017 	ldw	fp,0(sp)
   149ec:	dec00104 	addi	sp,sp,4
   149f0:	f800283a 	ret

000149f4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   149f4:	defffc04 	addi	sp,sp,-16
   149f8:	df000315 	stw	fp,12(sp)
   149fc:	df000304 	addi	fp,sp,12
   14a00:	e13ffe15 	stw	r4,-8(fp)
   14a04:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14a08:	000530fa 	rdctl	r2,ienable
   14a0c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14a10:	00c00044 	movi	r3,1
   14a14:	e0bfff17 	ldw	r2,-4(fp)
   14a18:	1884983a 	sll	r2,r3,r2
   14a1c:	1007883a 	mov	r3,r2
   14a20:	e0bffd17 	ldw	r2,-12(fp)
   14a24:	1884703a 	and	r2,r3,r2
   14a28:	1004c03a 	cmpne	r2,r2,zero
   14a2c:	10803fcc 	andi	r2,r2,255
}
   14a30:	e037883a 	mov	sp,fp
   14a34:	df000017 	ldw	fp,0(sp)
   14a38:	dec00104 	addi	sp,sp,4
   14a3c:	f800283a 	ret

00014a40 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14a40:	defff504 	addi	sp,sp,-44
   14a44:	dfc00a15 	stw	ra,40(sp)
   14a48:	df000915 	stw	fp,36(sp)
   14a4c:	df000904 	addi	fp,sp,36
   14a50:	e13ffc15 	stw	r4,-16(fp)
   14a54:	e17ffd15 	stw	r5,-12(fp)
   14a58:	e1bffe15 	stw	r6,-8(fp)
   14a5c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14a60:	00bffa84 	movi	r2,-22
   14a64:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14a68:	e0bffd17 	ldw	r2,-12(fp)
   14a6c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14a70:	e0bff817 	ldw	r2,-32(fp)
   14a74:	10800808 	cmpgei	r2,r2,32
   14a78:	1000271e 	bne	r2,zero,14b18 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a7c:	0005303a 	rdctl	r2,status
   14a80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a84:	e0fffb17 	ldw	r3,-20(fp)
   14a88:	00bfff84 	movi	r2,-2
   14a8c:	1884703a 	and	r2,r3,r2
   14a90:	1001703a 	wrctl	status,r2
  
  return context;
   14a94:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14a98:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   14a9c:	008000b4 	movhi	r2,2
   14aa0:	10a34204 	addi	r2,r2,-29432
   14aa4:	e0fff817 	ldw	r3,-32(fp)
   14aa8:	180690fa 	slli	r3,r3,3
   14aac:	10c5883a 	add	r2,r2,r3
   14ab0:	e0fffe17 	ldw	r3,-8(fp)
   14ab4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14ab8:	008000b4 	movhi	r2,2
   14abc:	10a34204 	addi	r2,r2,-29432
   14ac0:	e0fff817 	ldw	r3,-32(fp)
   14ac4:	180690fa 	slli	r3,r3,3
   14ac8:	10c5883a 	add	r2,r2,r3
   14acc:	10800104 	addi	r2,r2,4
   14ad0:	e0ffff17 	ldw	r3,-4(fp)
   14ad4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14ad8:	e0bffe17 	ldw	r2,-8(fp)
   14adc:	10000526 	beq	r2,zero,14af4 <alt_iic_isr_register+0xb4>
   14ae0:	e0bff817 	ldw	r2,-32(fp)
   14ae4:	100b883a 	mov	r5,r2
   14ae8:	e13ffc17 	ldw	r4,-16(fp)
   14aec:	00148e00 	call	148e0 <alt_ic_irq_enable>
   14af0:	00000406 	br	14b04 <alt_iic_isr_register+0xc4>
   14af4:	e0bff817 	ldw	r2,-32(fp)
   14af8:	100b883a 	mov	r5,r2
   14afc:	e13ffc17 	ldw	r4,-16(fp)
   14b00:	00149680 	call	14968 <alt_ic_irq_disable>
   14b04:	e0bff715 	stw	r2,-36(fp)
   14b08:	e0bffa17 	ldw	r2,-24(fp)
   14b0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b10:	e0bff917 	ldw	r2,-28(fp)
   14b14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14b18:	e0bff717 	ldw	r2,-36(fp)
}
   14b1c:	e037883a 	mov	sp,fp
   14b20:	dfc00117 	ldw	ra,4(sp)
   14b24:	df000017 	ldw	fp,0(sp)
   14b28:	dec00204 	addi	sp,sp,8
   14b2c:	f800283a 	ret

00014b30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14b30:	defff904 	addi	sp,sp,-28
   14b34:	dfc00615 	stw	ra,24(sp)
   14b38:	df000515 	stw	fp,20(sp)
   14b3c:	df000504 	addi	fp,sp,20
   14b40:	e13ffc15 	stw	r4,-16(fp)
   14b44:	e17ffd15 	stw	r5,-12(fp)
   14b48:	e1bffe15 	stw	r6,-8(fp)
   14b4c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14b50:	e1bfff17 	ldw	r6,-4(fp)
   14b54:	e17ffe17 	ldw	r5,-8(fp)
   14b58:	e13ffd17 	ldw	r4,-12(fp)
   14b5c:	0014d700 	call	14d70 <open>
   14b60:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14b64:	e0bffb17 	ldw	r2,-20(fp)
   14b68:	10001c16 	blt	r2,zero,14bdc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   14b6c:	00800074 	movhi	r2,1
   14b70:	10980804 	addi	r2,r2,24608
   14b74:	e0fffb17 	ldw	r3,-20(fp)
   14b78:	18c00324 	muli	r3,r3,12
   14b7c:	10c5883a 	add	r2,r2,r3
   14b80:	10c00017 	ldw	r3,0(r2)
   14b84:	e0bffc17 	ldw	r2,-16(fp)
   14b88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14b8c:	00800074 	movhi	r2,1
   14b90:	10980804 	addi	r2,r2,24608
   14b94:	e0fffb17 	ldw	r3,-20(fp)
   14b98:	18c00324 	muli	r3,r3,12
   14b9c:	10c5883a 	add	r2,r2,r3
   14ba0:	10800104 	addi	r2,r2,4
   14ba4:	10c00017 	ldw	r3,0(r2)
   14ba8:	e0bffc17 	ldw	r2,-16(fp)
   14bac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14bb0:	00800074 	movhi	r2,1
   14bb4:	10980804 	addi	r2,r2,24608
   14bb8:	e0fffb17 	ldw	r3,-20(fp)
   14bbc:	18c00324 	muli	r3,r3,12
   14bc0:	10c5883a 	add	r2,r2,r3
   14bc4:	10800204 	addi	r2,r2,8
   14bc8:	10c00017 	ldw	r3,0(r2)
   14bcc:	e0bffc17 	ldw	r2,-16(fp)
   14bd0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14bd4:	e13ffb17 	ldw	r4,-20(fp)
   14bd8:	00137e00 	call	137e0 <alt_release_fd>
  }
} 
   14bdc:	0001883a 	nop
   14be0:	e037883a 	mov	sp,fp
   14be4:	dfc00117 	ldw	ra,4(sp)
   14be8:	df000017 	ldw	fp,0(sp)
   14bec:	dec00204 	addi	sp,sp,8
   14bf0:	f800283a 	ret

00014bf4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14bf4:	defffb04 	addi	sp,sp,-20
   14bf8:	dfc00415 	stw	ra,16(sp)
   14bfc:	df000315 	stw	fp,12(sp)
   14c00:	df000304 	addi	fp,sp,12
   14c04:	e13ffd15 	stw	r4,-12(fp)
   14c08:	e17ffe15 	stw	r5,-8(fp)
   14c0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14c10:	01c07fc4 	movi	r7,511
   14c14:	01800044 	movi	r6,1
   14c18:	e17ffd17 	ldw	r5,-12(fp)
   14c1c:	01000074 	movhi	r4,1
   14c20:	21180b04 	addi	r4,r4,24620
   14c24:	0014b300 	call	14b30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14c28:	01c07fc4 	movi	r7,511
   14c2c:	000d883a 	mov	r6,zero
   14c30:	e17ffe17 	ldw	r5,-8(fp)
   14c34:	01000074 	movhi	r4,1
   14c38:	21180804 	addi	r4,r4,24608
   14c3c:	0014b300 	call	14b30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14c40:	01c07fc4 	movi	r7,511
   14c44:	01800044 	movi	r6,1
   14c48:	e17fff17 	ldw	r5,-4(fp)
   14c4c:	01000074 	movhi	r4,1
   14c50:	21180e04 	addi	r4,r4,24632
   14c54:	0014b300 	call	14b30 <alt_open_fd>
}  
   14c58:	0001883a 	nop
   14c5c:	e037883a 	mov	sp,fp
   14c60:	dfc00117 	ldw	ra,4(sp)
   14c64:	df000017 	ldw	fp,0(sp)
   14c68:	dec00204 	addi	sp,sp,8
   14c6c:	f800283a 	ret

00014c70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14c70:	defffe04 	addi	sp,sp,-8
   14c74:	dfc00115 	stw	ra,4(sp)
   14c78:	df000015 	stw	fp,0(sp)
   14c7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14c80:	d0a00b17 	ldw	r2,-32724(gp)
   14c84:	10000326 	beq	r2,zero,14c94 <alt_get_errno+0x24>
   14c88:	d0a00b17 	ldw	r2,-32724(gp)
   14c8c:	103ee83a 	callr	r2
   14c90:	00000106 	br	14c98 <alt_get_errno+0x28>
   14c94:	d0a6b004 	addi	r2,gp,-25920
}
   14c98:	e037883a 	mov	sp,fp
   14c9c:	dfc00117 	ldw	ra,4(sp)
   14ca0:	df000017 	ldw	fp,0(sp)
   14ca4:	dec00204 	addi	sp,sp,8
   14ca8:	f800283a 	ret

00014cac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14cac:	defffd04 	addi	sp,sp,-12
   14cb0:	df000215 	stw	fp,8(sp)
   14cb4:	df000204 	addi	fp,sp,8
   14cb8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14cbc:	e0bfff17 	ldw	r2,-4(fp)
   14cc0:	10800217 	ldw	r2,8(r2)
   14cc4:	10d00034 	orhi	r3,r2,16384
   14cc8:	e0bfff17 	ldw	r2,-4(fp)
   14ccc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14cd0:	e03ffe15 	stw	zero,-8(fp)
   14cd4:	00001d06 	br	14d4c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14cd8:	00800074 	movhi	r2,1
   14cdc:	10980804 	addi	r2,r2,24608
   14ce0:	e0fffe17 	ldw	r3,-8(fp)
   14ce4:	18c00324 	muli	r3,r3,12
   14ce8:	10c5883a 	add	r2,r2,r3
   14cec:	10c00017 	ldw	r3,0(r2)
   14cf0:	e0bfff17 	ldw	r2,-4(fp)
   14cf4:	10800017 	ldw	r2,0(r2)
   14cf8:	1880111e 	bne	r3,r2,14d40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14cfc:	00800074 	movhi	r2,1
   14d00:	10980804 	addi	r2,r2,24608
   14d04:	e0fffe17 	ldw	r3,-8(fp)
   14d08:	18c00324 	muli	r3,r3,12
   14d0c:	10c5883a 	add	r2,r2,r3
   14d10:	10800204 	addi	r2,r2,8
   14d14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14d18:	1000090e 	bge	r2,zero,14d40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14d1c:	e0bffe17 	ldw	r2,-8(fp)
   14d20:	10c00324 	muli	r3,r2,12
   14d24:	00800074 	movhi	r2,1
   14d28:	10980804 	addi	r2,r2,24608
   14d2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14d30:	e0bfff17 	ldw	r2,-4(fp)
   14d34:	18800226 	beq	r3,r2,14d40 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14d38:	00bffcc4 	movi	r2,-13
   14d3c:	00000806 	br	14d60 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14d40:	e0bffe17 	ldw	r2,-8(fp)
   14d44:	10800044 	addi	r2,r2,1
   14d48:	e0bffe15 	stw	r2,-8(fp)
   14d4c:	d0a00a17 	ldw	r2,-32728(gp)
   14d50:	1007883a 	mov	r3,r2
   14d54:	e0bffe17 	ldw	r2,-8(fp)
   14d58:	18bfdf2e 	bgeu	r3,r2,14cd8 <_gp+0xffff5ad8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14d5c:	0005883a 	mov	r2,zero
}
   14d60:	e037883a 	mov	sp,fp
   14d64:	df000017 	ldw	fp,0(sp)
   14d68:	dec00104 	addi	sp,sp,4
   14d6c:	f800283a 	ret

00014d70 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14d70:	defff604 	addi	sp,sp,-40
   14d74:	dfc00915 	stw	ra,36(sp)
   14d78:	df000815 	stw	fp,32(sp)
   14d7c:	df000804 	addi	fp,sp,32
   14d80:	e13ffd15 	stw	r4,-12(fp)
   14d84:	e17ffe15 	stw	r5,-8(fp)
   14d88:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14d8c:	00bfffc4 	movi	r2,-1
   14d90:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14d94:	00bffb44 	movi	r2,-19
   14d98:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14d9c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14da0:	d1600804 	addi	r5,gp,-32736
   14da4:	e13ffd17 	ldw	r4,-12(fp)
   14da8:	001508c0 	call	1508c <alt_find_dev>
   14dac:	e0bff815 	stw	r2,-32(fp)
   14db0:	e0bff817 	ldw	r2,-32(fp)
   14db4:	1000051e 	bne	r2,zero,14dcc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14db8:	e13ffd17 	ldw	r4,-12(fp)
   14dbc:	001511c0 	call	1511c <alt_find_file>
   14dc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14dc4:	00800044 	movi	r2,1
   14dc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14dcc:	e0bff817 	ldw	r2,-32(fp)
   14dd0:	10002926 	beq	r2,zero,14e78 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14dd4:	e13ff817 	ldw	r4,-32(fp)
   14dd8:	00152240 	call	15224 <alt_get_fd>
   14ddc:	e0bff915 	stw	r2,-28(fp)
   14de0:	e0bff917 	ldw	r2,-28(fp)
   14de4:	1000030e 	bge	r2,zero,14df4 <open+0x84>
    {
      status = index;
   14de8:	e0bff917 	ldw	r2,-28(fp)
   14dec:	e0bffa15 	stw	r2,-24(fp)
   14df0:	00002306 	br	14e80 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   14df4:	e0bff917 	ldw	r2,-28(fp)
   14df8:	10c00324 	muli	r3,r2,12
   14dfc:	00800074 	movhi	r2,1
   14e00:	10980804 	addi	r2,r2,24608
   14e04:	1885883a 	add	r2,r3,r2
   14e08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14e0c:	e0fffe17 	ldw	r3,-8(fp)
   14e10:	00900034 	movhi	r2,16384
   14e14:	10bfffc4 	addi	r2,r2,-1
   14e18:	1886703a 	and	r3,r3,r2
   14e1c:	e0bffc17 	ldw	r2,-16(fp)
   14e20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14e24:	e0bffb17 	ldw	r2,-20(fp)
   14e28:	1000051e 	bne	r2,zero,14e40 <open+0xd0>
   14e2c:	e13ffc17 	ldw	r4,-16(fp)
   14e30:	0014cac0 	call	14cac <alt_file_locked>
   14e34:	e0bffa15 	stw	r2,-24(fp)
   14e38:	e0bffa17 	ldw	r2,-24(fp)
   14e3c:	10001016 	blt	r2,zero,14e80 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14e40:	e0bff817 	ldw	r2,-32(fp)
   14e44:	10800317 	ldw	r2,12(r2)
   14e48:	10000826 	beq	r2,zero,14e6c <open+0xfc>
   14e4c:	e0bff817 	ldw	r2,-32(fp)
   14e50:	10800317 	ldw	r2,12(r2)
   14e54:	e1ffff17 	ldw	r7,-4(fp)
   14e58:	e1bffe17 	ldw	r6,-8(fp)
   14e5c:	e17ffd17 	ldw	r5,-12(fp)
   14e60:	e13ffc17 	ldw	r4,-16(fp)
   14e64:	103ee83a 	callr	r2
   14e68:	00000106 	br	14e70 <open+0x100>
   14e6c:	0005883a 	mov	r2,zero
   14e70:	e0bffa15 	stw	r2,-24(fp)
   14e74:	00000206 	br	14e80 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14e78:	00bffb44 	movi	r2,-19
   14e7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14e80:	e0bffa17 	ldw	r2,-24(fp)
   14e84:	1000090e 	bge	r2,zero,14eac <open+0x13c>
  {
    alt_release_fd (index);  
   14e88:	e13ff917 	ldw	r4,-28(fp)
   14e8c:	00137e00 	call	137e0 <alt_release_fd>
    ALT_ERRNO = -status;
   14e90:	0014c700 	call	14c70 <alt_get_errno>
   14e94:	1007883a 	mov	r3,r2
   14e98:	e0bffa17 	ldw	r2,-24(fp)
   14e9c:	0085c83a 	sub	r2,zero,r2
   14ea0:	18800015 	stw	r2,0(r3)
    return -1;
   14ea4:	00bfffc4 	movi	r2,-1
   14ea8:	00000106 	br	14eb0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   14eac:	e0bff917 	ldw	r2,-28(fp)
}
   14eb0:	e037883a 	mov	sp,fp
   14eb4:	dfc00117 	ldw	ra,4(sp)
   14eb8:	df000017 	ldw	fp,0(sp)
   14ebc:	dec00204 	addi	sp,sp,8
   14ec0:	f800283a 	ret

00014ec4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14ec4:	defffa04 	addi	sp,sp,-24
   14ec8:	df000515 	stw	fp,20(sp)
   14ecc:	df000504 	addi	fp,sp,20
   14ed0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ed4:	0005303a 	rdctl	r2,status
   14ed8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14edc:	e0fffc17 	ldw	r3,-16(fp)
   14ee0:	00bfff84 	movi	r2,-2
   14ee4:	1884703a 	and	r2,r3,r2
   14ee8:	1001703a 	wrctl	status,r2
  
  return context;
   14eec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14ef0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14ef4:	e0bfff17 	ldw	r2,-4(fp)
   14ef8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14efc:	e0bffd17 	ldw	r2,-12(fp)
   14f00:	10800017 	ldw	r2,0(r2)
   14f04:	e0fffd17 	ldw	r3,-12(fp)
   14f08:	18c00117 	ldw	r3,4(r3)
   14f0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14f10:	e0bffd17 	ldw	r2,-12(fp)
   14f14:	10800117 	ldw	r2,4(r2)
   14f18:	e0fffd17 	ldw	r3,-12(fp)
   14f1c:	18c00017 	ldw	r3,0(r3)
   14f20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14f24:	e0bffd17 	ldw	r2,-12(fp)
   14f28:	e0fffd17 	ldw	r3,-12(fp)
   14f2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14f30:	e0bffd17 	ldw	r2,-12(fp)
   14f34:	e0fffd17 	ldw	r3,-12(fp)
   14f38:	10c00015 	stw	r3,0(r2)
   14f3c:	e0bffb17 	ldw	r2,-20(fp)
   14f40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f44:	e0bffe17 	ldw	r2,-8(fp)
   14f48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14f4c:	0001883a 	nop
   14f50:	e037883a 	mov	sp,fp
   14f54:	df000017 	ldw	fp,0(sp)
   14f58:	dec00104 	addi	sp,sp,4
   14f5c:	f800283a 	ret

00014f60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14f60:	defffb04 	addi	sp,sp,-20
   14f64:	dfc00415 	stw	ra,16(sp)
   14f68:	df000315 	stw	fp,12(sp)
   14f6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14f70:	d0a00e17 	ldw	r2,-32712(gp)
   14f74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14f78:	d0a6b617 	ldw	r2,-25896(gp)
   14f7c:	10800044 	addi	r2,r2,1
   14f80:	d0a6b615 	stw	r2,-25896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14f84:	00002e06 	br	15040 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14f88:	e0bffd17 	ldw	r2,-12(fp)
   14f8c:	10800017 	ldw	r2,0(r2)
   14f90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14f94:	e0bffd17 	ldw	r2,-12(fp)
   14f98:	10800403 	ldbu	r2,16(r2)
   14f9c:	10803fcc 	andi	r2,r2,255
   14fa0:	10000426 	beq	r2,zero,14fb4 <alt_tick+0x54>
   14fa4:	d0a6b617 	ldw	r2,-25896(gp)
   14fa8:	1000021e 	bne	r2,zero,14fb4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14fac:	e0bffd17 	ldw	r2,-12(fp)
   14fb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14fb4:	e0bffd17 	ldw	r2,-12(fp)
   14fb8:	10800217 	ldw	r2,8(r2)
   14fbc:	d0e6b617 	ldw	r3,-25896(gp)
   14fc0:	18801d36 	bltu	r3,r2,15038 <alt_tick+0xd8>
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	10800403 	ldbu	r2,16(r2)
   14fcc:	10803fcc 	andi	r2,r2,255
   14fd0:	1000191e 	bne	r2,zero,15038 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14fd4:	e0bffd17 	ldw	r2,-12(fp)
   14fd8:	10800317 	ldw	r2,12(r2)
   14fdc:	e0fffd17 	ldw	r3,-12(fp)
   14fe0:	18c00517 	ldw	r3,20(r3)
   14fe4:	1809883a 	mov	r4,r3
   14fe8:	103ee83a 	callr	r2
   14fec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14ff0:	e0bfff17 	ldw	r2,-4(fp)
   14ff4:	1000031e 	bne	r2,zero,15004 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14ff8:	e13ffd17 	ldw	r4,-12(fp)
   14ffc:	0014ec40 	call	14ec4 <alt_alarm_stop>
   15000:	00000d06 	br	15038 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15004:	e0bffd17 	ldw	r2,-12(fp)
   15008:	10c00217 	ldw	r3,8(r2)
   1500c:	e0bfff17 	ldw	r2,-4(fp)
   15010:	1887883a 	add	r3,r3,r2
   15014:	e0bffd17 	ldw	r2,-12(fp)
   15018:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1501c:	e0bffd17 	ldw	r2,-12(fp)
   15020:	10c00217 	ldw	r3,8(r2)
   15024:	d0a6b617 	ldw	r2,-25896(gp)
   15028:	1880032e 	bgeu	r3,r2,15038 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1502c:	e0bffd17 	ldw	r2,-12(fp)
   15030:	00c00044 	movi	r3,1
   15034:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15038:	e0bffe17 	ldw	r2,-8(fp)
   1503c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15040:	e0fffd17 	ldw	r3,-12(fp)
   15044:	d0a00e04 	addi	r2,gp,-32712
   15048:	18bfcf1e 	bne	r3,r2,14f88 <_gp+0xffff5d88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1504c:	0001883a 	nop
}
   15050:	0001883a 	nop
   15054:	e037883a 	mov	sp,fp
   15058:	dfc00117 	ldw	ra,4(sp)
   1505c:	df000017 	ldw	fp,0(sp)
   15060:	dec00204 	addi	sp,sp,8
   15064:	f800283a 	ret

00015068 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15068:	deffff04 	addi	sp,sp,-4
   1506c:	df000015 	stw	fp,0(sp)
   15070:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15074:	000170fa 	wrctl	ienable,zero
}
   15078:	0001883a 	nop
   1507c:	e037883a 	mov	sp,fp
   15080:	df000017 	ldw	fp,0(sp)
   15084:	dec00104 	addi	sp,sp,4
   15088:	f800283a 	ret

0001508c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1508c:	defffa04 	addi	sp,sp,-24
   15090:	dfc00515 	stw	ra,20(sp)
   15094:	df000415 	stw	fp,16(sp)
   15098:	df000404 	addi	fp,sp,16
   1509c:	e13ffe15 	stw	r4,-8(fp)
   150a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   150a4:	e0bfff17 	ldw	r2,-4(fp)
   150a8:	10800017 	ldw	r2,0(r2)
   150ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   150b0:	e13ffe17 	ldw	r4,-8(fp)
   150b4:	00103f00 	call	103f0 <strlen>
   150b8:	10800044 	addi	r2,r2,1
   150bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   150c0:	00000d06 	br	150f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   150c4:	e0bffc17 	ldw	r2,-16(fp)
   150c8:	10800217 	ldw	r2,8(r2)
   150cc:	e0fffd17 	ldw	r3,-12(fp)
   150d0:	180d883a 	mov	r6,r3
   150d4:	e17ffe17 	ldw	r5,-8(fp)
   150d8:	1009883a 	mov	r4,r2
   150dc:	00154400 	call	15440 <memcmp>
   150e0:	1000021e 	bne	r2,zero,150ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   150e4:	e0bffc17 	ldw	r2,-16(fp)
   150e8:	00000706 	br	15108 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   150ec:	e0bffc17 	ldw	r2,-16(fp)
   150f0:	10800017 	ldw	r2,0(r2)
   150f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   150f8:	e0fffc17 	ldw	r3,-16(fp)
   150fc:	e0bfff17 	ldw	r2,-4(fp)
   15100:	18bff01e 	bne	r3,r2,150c4 <_gp+0xffff5ec4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15104:	0005883a 	mov	r2,zero
}
   15108:	e037883a 	mov	sp,fp
   1510c:	dfc00117 	ldw	ra,4(sp)
   15110:	df000017 	ldw	fp,0(sp)
   15114:	dec00204 	addi	sp,sp,8
   15118:	f800283a 	ret

0001511c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1511c:	defffb04 	addi	sp,sp,-20
   15120:	dfc00415 	stw	ra,16(sp)
   15124:	df000315 	stw	fp,12(sp)
   15128:	df000304 	addi	fp,sp,12
   1512c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15130:	d0a00617 	ldw	r2,-32744(gp)
   15134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15138:	00003106 	br	15200 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1513c:	e0bffd17 	ldw	r2,-12(fp)
   15140:	10800217 	ldw	r2,8(r2)
   15144:	1009883a 	mov	r4,r2
   15148:	00103f00 	call	103f0 <strlen>
   1514c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15150:	e0bffd17 	ldw	r2,-12(fp)
   15154:	10c00217 	ldw	r3,8(r2)
   15158:	e0bffe17 	ldw	r2,-8(fp)
   1515c:	10bfffc4 	addi	r2,r2,-1
   15160:	1885883a 	add	r2,r3,r2
   15164:	10800003 	ldbu	r2,0(r2)
   15168:	10803fcc 	andi	r2,r2,255
   1516c:	1080201c 	xori	r2,r2,128
   15170:	10bfe004 	addi	r2,r2,-128
   15174:	10800bd8 	cmpnei	r2,r2,47
   15178:	1000031e 	bne	r2,zero,15188 <alt_find_file+0x6c>
    {
      len -= 1;
   1517c:	e0bffe17 	ldw	r2,-8(fp)
   15180:	10bfffc4 	addi	r2,r2,-1
   15184:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15188:	e0bffe17 	ldw	r2,-8(fp)
   1518c:	e0ffff17 	ldw	r3,-4(fp)
   15190:	1885883a 	add	r2,r3,r2
   15194:	10800003 	ldbu	r2,0(r2)
   15198:	10803fcc 	andi	r2,r2,255
   1519c:	1080201c 	xori	r2,r2,128
   151a0:	10bfe004 	addi	r2,r2,-128
   151a4:	10800be0 	cmpeqi	r2,r2,47
   151a8:	1000081e 	bne	r2,zero,151cc <alt_find_file+0xb0>
   151ac:	e0bffe17 	ldw	r2,-8(fp)
   151b0:	e0ffff17 	ldw	r3,-4(fp)
   151b4:	1885883a 	add	r2,r3,r2
   151b8:	10800003 	ldbu	r2,0(r2)
   151bc:	10803fcc 	andi	r2,r2,255
   151c0:	1080201c 	xori	r2,r2,128
   151c4:	10bfe004 	addi	r2,r2,-128
   151c8:	10000a1e 	bne	r2,zero,151f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   151cc:	e0bffd17 	ldw	r2,-12(fp)
   151d0:	10800217 	ldw	r2,8(r2)
   151d4:	e0fffe17 	ldw	r3,-8(fp)
   151d8:	180d883a 	mov	r6,r3
   151dc:	e17fff17 	ldw	r5,-4(fp)
   151e0:	1009883a 	mov	r4,r2
   151e4:	00154400 	call	15440 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   151e8:	1000021e 	bne	r2,zero,151f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   151ec:	e0bffd17 	ldw	r2,-12(fp)
   151f0:	00000706 	br	15210 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   151f4:	e0bffd17 	ldw	r2,-12(fp)
   151f8:	10800017 	ldw	r2,0(r2)
   151fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15200:	e0fffd17 	ldw	r3,-12(fp)
   15204:	d0a00604 	addi	r2,gp,-32744
   15208:	18bfcc1e 	bne	r3,r2,1513c <_gp+0xffff5f3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1520c:	0005883a 	mov	r2,zero
}
   15210:	e037883a 	mov	sp,fp
   15214:	dfc00117 	ldw	ra,4(sp)
   15218:	df000017 	ldw	fp,0(sp)
   1521c:	dec00204 	addi	sp,sp,8
   15220:	f800283a 	ret

00015224 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15224:	defffc04 	addi	sp,sp,-16
   15228:	df000315 	stw	fp,12(sp)
   1522c:	df000304 	addi	fp,sp,12
   15230:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15234:	00bffa04 	movi	r2,-24
   15238:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1523c:	e03ffd15 	stw	zero,-12(fp)
   15240:	00001906 	br	152a8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   15244:	00800074 	movhi	r2,1
   15248:	10980804 	addi	r2,r2,24608
   1524c:	e0fffd17 	ldw	r3,-12(fp)
   15250:	18c00324 	muli	r3,r3,12
   15254:	10c5883a 	add	r2,r2,r3
   15258:	10800017 	ldw	r2,0(r2)
   1525c:	10000f1e 	bne	r2,zero,1529c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   15260:	00800074 	movhi	r2,1
   15264:	10980804 	addi	r2,r2,24608
   15268:	e0fffd17 	ldw	r3,-12(fp)
   1526c:	18c00324 	muli	r3,r3,12
   15270:	10c5883a 	add	r2,r2,r3
   15274:	e0ffff17 	ldw	r3,-4(fp)
   15278:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1527c:	d0e00a17 	ldw	r3,-32728(gp)
   15280:	e0bffd17 	ldw	r2,-12(fp)
   15284:	1880020e 	bge	r3,r2,15290 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   15288:	e0bffd17 	ldw	r2,-12(fp)
   1528c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   15290:	e0bffd17 	ldw	r2,-12(fp)
   15294:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15298:	00000606 	br	152b4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1529c:	e0bffd17 	ldw	r2,-12(fp)
   152a0:	10800044 	addi	r2,r2,1
   152a4:	e0bffd15 	stw	r2,-12(fp)
   152a8:	e0bffd17 	ldw	r2,-12(fp)
   152ac:	10800810 	cmplti	r2,r2,32
   152b0:	103fe41e 	bne	r2,zero,15244 <_gp+0xffff6044>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   152b4:	e0bffe17 	ldw	r2,-8(fp)
}
   152b8:	e037883a 	mov	sp,fp
   152bc:	df000017 	ldw	fp,0(sp)
   152c0:	dec00104 	addi	sp,sp,4
   152c4:	f800283a 	ret

000152c8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   152c8:	defffb04 	addi	sp,sp,-20
   152cc:	df000415 	stw	fp,16(sp)
   152d0:	df000404 	addi	fp,sp,16
   152d4:	e13ffe15 	stw	r4,-8(fp)
   152d8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   152dc:	e0bfff17 	ldw	r2,-4(fp)
   152e0:	10840070 	cmpltui	r2,r2,4097
   152e4:	1000021e 	bne	r2,zero,152f0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   152e8:	00840004 	movi	r2,4096
   152ec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   152f0:	e0fffe17 	ldw	r3,-8(fp)
   152f4:	e0bfff17 	ldw	r2,-4(fp)
   152f8:	1885883a 	add	r2,r3,r2
   152fc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15300:	e0bffe17 	ldw	r2,-8(fp)
   15304:	e0bffc15 	stw	r2,-16(fp)
   15308:	00000506 	br	15320 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1530c:	e0bffc17 	ldw	r2,-16(fp)
   15310:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15314:	e0bffc17 	ldw	r2,-16(fp)
   15318:	10800804 	addi	r2,r2,32
   1531c:	e0bffc15 	stw	r2,-16(fp)
   15320:	e0fffc17 	ldw	r3,-16(fp)
   15324:	e0bffd17 	ldw	r2,-12(fp)
   15328:	18bff836 	bltu	r3,r2,1530c <_gp+0xffff610c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1532c:	e0bffe17 	ldw	r2,-8(fp)
   15330:	108007cc 	andi	r2,r2,31
   15334:	10000226 	beq	r2,zero,15340 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   15338:	e0bffc17 	ldw	r2,-16(fp)
   1533c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   15340:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   15344:	0001883a 	nop
   15348:	e037883a 	mov	sp,fp
   1534c:	df000017 	ldw	fp,0(sp)
   15350:	dec00104 	addi	sp,sp,4
   15354:	f800283a 	ret

00015358 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15358:	defffe04 	addi	sp,sp,-8
   1535c:	df000115 	stw	fp,4(sp)
   15360:	df000104 	addi	fp,sp,4
   15364:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15368:	e0bfff17 	ldw	r2,-4(fp)
   1536c:	10bffe84 	addi	r2,r2,-6
   15370:	10c00428 	cmpgeui	r3,r2,16
   15374:	18001a1e 	bne	r3,zero,153e0 <alt_exception_cause_generated_bad_addr+0x88>
   15378:	100690ba 	slli	r3,r2,2
   1537c:	00800074 	movhi	r2,1
   15380:	1094e404 	addi	r2,r2,21392
   15384:	1885883a 	add	r2,r3,r2
   15388:	10800017 	ldw	r2,0(r2)
   1538c:	1000683a 	jmp	r2
   15390:	000153d0 	cmplti	zero,zero,1359
   15394:	000153d0 	cmplti	zero,zero,1359
   15398:	000153e0 	cmpeqi	zero,zero,1359
   1539c:	000153e0 	cmpeqi	zero,zero,1359
   153a0:	000153e0 	cmpeqi	zero,zero,1359
   153a4:	000153d0 	cmplti	zero,zero,1359
   153a8:	000153d8 	cmpnei	zero,zero,1359
   153ac:	000153e0 	cmpeqi	zero,zero,1359
   153b0:	000153d0 	cmplti	zero,zero,1359
   153b4:	000153d0 	cmplti	zero,zero,1359
   153b8:	000153e0 	cmpeqi	zero,zero,1359
   153bc:	000153d0 	cmplti	zero,zero,1359
   153c0:	000153d8 	cmpnei	zero,zero,1359
   153c4:	000153e0 	cmpeqi	zero,zero,1359
   153c8:	000153e0 	cmpeqi	zero,zero,1359
   153cc:	000153d0 	cmplti	zero,zero,1359
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   153d0:	00800044 	movi	r2,1
   153d4:	00000306 	br	153e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   153d8:	0005883a 	mov	r2,zero
   153dc:	00000106 	br	153e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   153e0:	0005883a 	mov	r2,zero
  }
}
   153e4:	e037883a 	mov	sp,fp
   153e8:	df000017 	ldw	fp,0(sp)
   153ec:	dec00104 	addi	sp,sp,4
   153f0:	f800283a 	ret

000153f4 <atexit>:
   153f4:	200b883a 	mov	r5,r4
   153f8:	000f883a 	mov	r7,zero
   153fc:	000d883a 	mov	r6,zero
   15400:	0009883a 	mov	r4,zero
   15404:	00154bc1 	jmpi	154bc <__register_exitproc>

00015408 <exit>:
   15408:	defffe04 	addi	sp,sp,-8
   1540c:	000b883a 	mov	r5,zero
   15410:	dc000015 	stw	r16,0(sp)
   15414:	dfc00115 	stw	ra,4(sp)
   15418:	2021883a 	mov	r16,r4
   1541c:	00155d40 	call	155d4 <__call_exitprocs>
   15420:	00800074 	movhi	r2,1
   15424:	109c8204 	addi	r2,r2,29192
   15428:	11000017 	ldw	r4,0(r2)
   1542c:	20800f17 	ldw	r2,60(r4)
   15430:	10000126 	beq	r2,zero,15438 <exit+0x30>
   15434:	103ee83a 	callr	r2
   15438:	8009883a 	mov	r4,r16
   1543c:	00157540 	call	15754 <_exit>

00015440 <memcmp>:
   15440:	01c000c4 	movi	r7,3
   15444:	3980192e 	bgeu	r7,r6,154ac <memcmp+0x6c>
   15448:	2144b03a 	or	r2,r4,r5
   1544c:	11c4703a 	and	r2,r2,r7
   15450:	10000f26 	beq	r2,zero,15490 <memcmp+0x50>
   15454:	20800003 	ldbu	r2,0(r4)
   15458:	28c00003 	ldbu	r3,0(r5)
   1545c:	10c0151e 	bne	r2,r3,154b4 <memcmp+0x74>
   15460:	31bfff84 	addi	r6,r6,-2
   15464:	01ffffc4 	movi	r7,-1
   15468:	00000406 	br	1547c <memcmp+0x3c>
   1546c:	20800003 	ldbu	r2,0(r4)
   15470:	28c00003 	ldbu	r3,0(r5)
   15474:	31bfffc4 	addi	r6,r6,-1
   15478:	10c00e1e 	bne	r2,r3,154b4 <memcmp+0x74>
   1547c:	21000044 	addi	r4,r4,1
   15480:	29400044 	addi	r5,r5,1
   15484:	31fff91e 	bne	r6,r7,1546c <_gp+0xffff626c>
   15488:	0005883a 	mov	r2,zero
   1548c:	f800283a 	ret
   15490:	20c00017 	ldw	r3,0(r4)
   15494:	28800017 	ldw	r2,0(r5)
   15498:	18bfee1e 	bne	r3,r2,15454 <_gp+0xffff6254>
   1549c:	31bfff04 	addi	r6,r6,-4
   154a0:	21000104 	addi	r4,r4,4
   154a4:	29400104 	addi	r5,r5,4
   154a8:	39bff936 	bltu	r7,r6,15490 <_gp+0xffff6290>
   154ac:	303fe91e 	bne	r6,zero,15454 <_gp+0xffff6254>
   154b0:	003ff506 	br	15488 <_gp+0xffff6288>
   154b4:	10c5c83a 	sub	r2,r2,r3
   154b8:	f800283a 	ret

000154bc <__register_exitproc>:
   154bc:	defffa04 	addi	sp,sp,-24
   154c0:	dc000315 	stw	r16,12(sp)
   154c4:	04000074 	movhi	r16,1
   154c8:	841c8204 	addi	r16,r16,29192
   154cc:	80c00017 	ldw	r3,0(r16)
   154d0:	dc400415 	stw	r17,16(sp)
   154d4:	dfc00515 	stw	ra,20(sp)
   154d8:	18805217 	ldw	r2,328(r3)
   154dc:	2023883a 	mov	r17,r4
   154e0:	10003726 	beq	r2,zero,155c0 <__register_exitproc+0x104>
   154e4:	10c00117 	ldw	r3,4(r2)
   154e8:	010007c4 	movi	r4,31
   154ec:	20c00e16 	blt	r4,r3,15528 <__register_exitproc+0x6c>
   154f0:	1a000044 	addi	r8,r3,1
   154f4:	8800221e 	bne	r17,zero,15580 <__register_exitproc+0xc4>
   154f8:	18c00084 	addi	r3,r3,2
   154fc:	18c7883a 	add	r3,r3,r3
   15500:	18c7883a 	add	r3,r3,r3
   15504:	12000115 	stw	r8,4(r2)
   15508:	10c7883a 	add	r3,r2,r3
   1550c:	19400015 	stw	r5,0(r3)
   15510:	0005883a 	mov	r2,zero
   15514:	dfc00517 	ldw	ra,20(sp)
   15518:	dc400417 	ldw	r17,16(sp)
   1551c:	dc000317 	ldw	r16,12(sp)
   15520:	dec00604 	addi	sp,sp,24
   15524:	f800283a 	ret
   15528:	00800034 	movhi	r2,0
   1552c:	10800004 	addi	r2,r2,0
   15530:	10002626 	beq	r2,zero,155cc <__register_exitproc+0x110>
   15534:	01006404 	movi	r4,400
   15538:	d9400015 	stw	r5,0(sp)
   1553c:	d9800115 	stw	r6,4(sp)
   15540:	d9c00215 	stw	r7,8(sp)
   15544:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   15548:	d9400017 	ldw	r5,0(sp)
   1554c:	d9800117 	ldw	r6,4(sp)
   15550:	d9c00217 	ldw	r7,8(sp)
   15554:	10001d26 	beq	r2,zero,155cc <__register_exitproc+0x110>
   15558:	81000017 	ldw	r4,0(r16)
   1555c:	10000115 	stw	zero,4(r2)
   15560:	02000044 	movi	r8,1
   15564:	22405217 	ldw	r9,328(r4)
   15568:	0007883a 	mov	r3,zero
   1556c:	12400015 	stw	r9,0(r2)
   15570:	20805215 	stw	r2,328(r4)
   15574:	10006215 	stw	zero,392(r2)
   15578:	10006315 	stw	zero,396(r2)
   1557c:	883fde26 	beq	r17,zero,154f8 <_gp+0xffff62f8>
   15580:	18c9883a 	add	r4,r3,r3
   15584:	2109883a 	add	r4,r4,r4
   15588:	1109883a 	add	r4,r2,r4
   1558c:	21802215 	stw	r6,136(r4)
   15590:	01800044 	movi	r6,1
   15594:	12406217 	ldw	r9,392(r2)
   15598:	30cc983a 	sll	r6,r6,r3
   1559c:	4992b03a 	or	r9,r9,r6
   155a0:	12406215 	stw	r9,392(r2)
   155a4:	21c04215 	stw	r7,264(r4)
   155a8:	01000084 	movi	r4,2
   155ac:	893fd21e 	bne	r17,r4,154f8 <_gp+0xffff62f8>
   155b0:	11006317 	ldw	r4,396(r2)
   155b4:	218cb03a 	or	r6,r4,r6
   155b8:	11806315 	stw	r6,396(r2)
   155bc:	003fce06 	br	154f8 <_gp+0xffff62f8>
   155c0:	18805304 	addi	r2,r3,332
   155c4:	18805215 	stw	r2,328(r3)
   155c8:	003fc606 	br	154e4 <_gp+0xffff62e4>
   155cc:	00bfffc4 	movi	r2,-1
   155d0:	003fd006 	br	15514 <_gp+0xffff6314>

000155d4 <__call_exitprocs>:
   155d4:	defff504 	addi	sp,sp,-44
   155d8:	df000915 	stw	fp,36(sp)
   155dc:	dd400615 	stw	r21,24(sp)
   155e0:	dc800315 	stw	r18,12(sp)
   155e4:	dfc00a15 	stw	ra,40(sp)
   155e8:	ddc00815 	stw	r23,32(sp)
   155ec:	dd800715 	stw	r22,28(sp)
   155f0:	dd000515 	stw	r20,20(sp)
   155f4:	dcc00415 	stw	r19,16(sp)
   155f8:	dc400215 	stw	r17,8(sp)
   155fc:	dc000115 	stw	r16,4(sp)
   15600:	d9000015 	stw	r4,0(sp)
   15604:	2839883a 	mov	fp,r5
   15608:	04800044 	movi	r18,1
   1560c:	057fffc4 	movi	r21,-1
   15610:	00800074 	movhi	r2,1
   15614:	109c8204 	addi	r2,r2,29192
   15618:	12000017 	ldw	r8,0(r2)
   1561c:	45005217 	ldw	r20,328(r8)
   15620:	44c05204 	addi	r19,r8,328
   15624:	a0001c26 	beq	r20,zero,15698 <__call_exitprocs+0xc4>
   15628:	a0800117 	ldw	r2,4(r20)
   1562c:	15ffffc4 	addi	r23,r2,-1
   15630:	b8000d16 	blt	r23,zero,15668 <__call_exitprocs+0x94>
   15634:	14000044 	addi	r16,r2,1
   15638:	8421883a 	add	r16,r16,r16
   1563c:	8421883a 	add	r16,r16,r16
   15640:	84402004 	addi	r17,r16,128
   15644:	a463883a 	add	r17,r20,r17
   15648:	a421883a 	add	r16,r20,r16
   1564c:	e0001e26 	beq	fp,zero,156c8 <__call_exitprocs+0xf4>
   15650:	80804017 	ldw	r2,256(r16)
   15654:	e0801c26 	beq	fp,r2,156c8 <__call_exitprocs+0xf4>
   15658:	bdffffc4 	addi	r23,r23,-1
   1565c:	843fff04 	addi	r16,r16,-4
   15660:	8c7fff04 	addi	r17,r17,-4
   15664:	bd7ff91e 	bne	r23,r21,1564c <_gp+0xffff644c>
   15668:	00800034 	movhi	r2,0
   1566c:	10800004 	addi	r2,r2,0
   15670:	10000926 	beq	r2,zero,15698 <__call_exitprocs+0xc4>
   15674:	a0800117 	ldw	r2,4(r20)
   15678:	1000301e 	bne	r2,zero,1573c <__call_exitprocs+0x168>
   1567c:	a0800017 	ldw	r2,0(r20)
   15680:	10003226 	beq	r2,zero,1574c <__call_exitprocs+0x178>
   15684:	a009883a 	mov	r4,r20
   15688:	98800015 	stw	r2,0(r19)
   1568c:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   15690:	9d000017 	ldw	r20,0(r19)
   15694:	a03fe41e 	bne	r20,zero,15628 <_gp+0xffff6428>
   15698:	dfc00a17 	ldw	ra,40(sp)
   1569c:	df000917 	ldw	fp,36(sp)
   156a0:	ddc00817 	ldw	r23,32(sp)
   156a4:	dd800717 	ldw	r22,28(sp)
   156a8:	dd400617 	ldw	r21,24(sp)
   156ac:	dd000517 	ldw	r20,20(sp)
   156b0:	dcc00417 	ldw	r19,16(sp)
   156b4:	dc800317 	ldw	r18,12(sp)
   156b8:	dc400217 	ldw	r17,8(sp)
   156bc:	dc000117 	ldw	r16,4(sp)
   156c0:	dec00b04 	addi	sp,sp,44
   156c4:	f800283a 	ret
   156c8:	a0800117 	ldw	r2,4(r20)
   156cc:	80c00017 	ldw	r3,0(r16)
   156d0:	10bfffc4 	addi	r2,r2,-1
   156d4:	15c01426 	beq	r2,r23,15728 <__call_exitprocs+0x154>
   156d8:	80000015 	stw	zero,0(r16)
   156dc:	183fde26 	beq	r3,zero,15658 <_gp+0xffff6458>
   156e0:	95c8983a 	sll	r4,r18,r23
   156e4:	a0806217 	ldw	r2,392(r20)
   156e8:	a5800117 	ldw	r22,4(r20)
   156ec:	2084703a 	and	r2,r4,r2
   156f0:	10000b26 	beq	r2,zero,15720 <__call_exitprocs+0x14c>
   156f4:	a0806317 	ldw	r2,396(r20)
   156f8:	2088703a 	and	r4,r4,r2
   156fc:	20000c1e 	bne	r4,zero,15730 <__call_exitprocs+0x15c>
   15700:	89400017 	ldw	r5,0(r17)
   15704:	d9000017 	ldw	r4,0(sp)
   15708:	183ee83a 	callr	r3
   1570c:	a0800117 	ldw	r2,4(r20)
   15710:	15bfbf1e 	bne	r2,r22,15610 <_gp+0xffff6410>
   15714:	98800017 	ldw	r2,0(r19)
   15718:	153fcf26 	beq	r2,r20,15658 <_gp+0xffff6458>
   1571c:	003fbc06 	br	15610 <_gp+0xffff6410>
   15720:	183ee83a 	callr	r3
   15724:	003ff906 	br	1570c <_gp+0xffff650c>
   15728:	a5c00115 	stw	r23,4(r20)
   1572c:	003feb06 	br	156dc <_gp+0xffff64dc>
   15730:	89000017 	ldw	r4,0(r17)
   15734:	183ee83a 	callr	r3
   15738:	003ff406 	br	1570c <_gp+0xffff650c>
   1573c:	a0800017 	ldw	r2,0(r20)
   15740:	a027883a 	mov	r19,r20
   15744:	1029883a 	mov	r20,r2
   15748:	003fb606 	br	15624 <_gp+0xffff6424>
   1574c:	0005883a 	mov	r2,zero
   15750:	003ffb06 	br	15740 <_gp+0xffff6540>

00015754 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15754:	defffd04 	addi	sp,sp,-12
   15758:	df000215 	stw	fp,8(sp)
   1575c:	df000204 	addi	fp,sp,8
   15760:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15764:	0001883a 	nop
   15768:	e0bfff17 	ldw	r2,-4(fp)
   1576c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15770:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15774:	10000226 	beq	r2,zero,15780 <_exit+0x2c>
    ALT_SIM_FAIL();
   15778:	002af070 	cmpltui	zero,zero,43969
   1577c:	00000106 	br	15784 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15780:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15784:	003fff06 	br	15784 <_gp+0xffff6584>
