module data_drive (
    input wire vga_clk,
    input wire rst_n,
    input wire [11:0] addr_h,
    input wire [11:0] addr_v,
    input wire [2:0] key,
    output reg [15:0] rgb_data
);

localparam red    = 16'd63488;
localparam orange = 16'd64384;
localparam yellow = 16'd65472;
localparam green  = 16'd1024;
localparam blue   = 16'd31;
localparam indigo = 16'd18448;
localparam purple = 16'd32784;
localparam white  = 16'd65503;
localparam black  = 16'd0;
reg [383:0] char_line[64:0];

localparam states_1 = 1; // 彩条
localparam states_2 = 2; // 字符
localparam states_3 = 3; // 图片

parameter height = 50; // 图片高度
parameter width  = 50; // 图片宽度
reg [1:0] states_current;
reg [1:0] states_next;
reg [13:0] rom_address;
wire [15:0] rom_data;

wire flag_enable_out1;
wire flag_enable_out2;
wire flag_clear_rom_address;
wire flag_begin_h;
wire flag_begin_v;

//状态转移
always @(posedge vga_clk or negedge rst_n) begin
    if (!rst_n) begin
        states_current <= states_1;
    end else begin
        states_current <= states_next;
    end
end

//状态判断
always @(posedge vga_clk or negedge rst_n) begin
    if (!rst_n) begin
        states_next <= states_1;
    end else if (key[0]) begin
        states_next <= states_1;
    end else if (key[1]) begin
        states_next <= states_2;
    end else if (key[2]) begin
        states_next <= states_3;
    end else begin
        states_next <= states_next;
    end
end

//状态输出
always @(*) begin
    case (states_current)
        states_1: begin
            if (addr_h == 0) begin
                rgb_data = black;
            end else if (addr_h > 0 && addr_h < 81) begin
                rgb_data = red;
            end else if (addr_h > 80 && addr_h < 161) begin
                rgb_data = orange;
            end else if (addr_h > 160 && addr_h < 241) begin
                rgb_data = yellow;
            end else if (addr_h > 240 && addr_h < 321) begin
                rgb_data = green;
            end else if (addr_h > 320 && addr_h < 401) begin
                rgb_data = blue;
            end else if (addr_h > 400 && addr_h < 481) begin
                rgb_data = indigo;
            end else if (addr_h > 480 && addr_h < 561) begin
                rgb_data = purple;
            end else if (addr_h > 560 && addr_h < 641) begin
                rgb_data = white;
            end else begin
                rgb_data = black;
            end
        end
        states_2: begin
            if (flag_enable_out1) begin
                rgb_data = char_line[addr_v-208][532-addr_h] ? white : black;
            end else begin
                rgb_data = black;
            end
        end
        states_3: begin
            if (flag_enable_out2) begin
                rgb_data = rom_data;
            end else begin
                rgb_data = black;
            end
        end
        default: begin
            case (addr_h)
                0: rgb_data      = black;
                1: rgb_data      = red;
                81: rgb_data     = orange;
                161: rgb_data    = yellow;
                241: rgb_data = green;
                321: rgb_data    = blue;
                401: rgb_data    = indigo;
                481: rgb_data    = purple;
                561: rgb_data    = white;
                default: begin
                    if (flag_enable_out2 && addr_v >= 208 && addr_v < 208+height && addr_h >= 532 && addr_h < 532+width) begin
                        rgb_data = rom_data;
                    end else begin
                        rgb_data = black;
                    end
                end
            endcase
        end
    endcase
end

//计数器
always @(posedge vga_clk or negedge rst_n) begin
    if (!rst_n) begin
        rom_address <= 0;
    end else if (flag_clear_rom_address) begin
        rom_address <= 0;
    end else if (flag_begin_v && flag_begin_h) begin
        rom_address <= rom_address + 1;
    end else begin
        rom_address <= rom_address;
    end
end

//使能信号与地址计算
assign flag_enable_out1   = (states_current == states_2);
assign flag_enable_out2   = (states_current == states_3);
assign flag_clear_rom_address = (states_current != states_3);
assign flag_begin_h = (addr_h == 532);
assign flag_begin_v = (addr_h == 532 && addr_v >= 208 && addr_v < 208+height);

always@( posedge vga_clk or negedge rst_n ) begin
    if ( !rst_n ) begin
        char_line[ 0 ]  = 244'h0078000002000000000000000000000000000000000000000000000000000000;
        char_line[ 1 ]  = 244'h27c01ff001000000000000000000000000000000000000000000000000000000;
        char_line[ 2 ]  = 244'h124810107ffe0000000000000000000000000000000000000000000000000000;
        char_line[ 3 ]  = 244'h11501ff04002000018003c003c00180018007e001800180018003c003c003800;
        char_line[ 4 ]  = 244'h87fc101080040000240042004200240024004200240024002400420042004400;
        char_line[ 5 ]  = 244'h41501ff03ff80000400042004200420042000400420040004200420042004200;
        char_line[ 6 ]  = 244'h4248010001000000400002004200420042000400420040004200420042004200;
        char_line[ 7 ]  = 244'h14061100010000005c000400020042004200080042005c004200020002004200;
        char_line[ 8 ]  = 244'h13f81ff801007e00620018000400420042000800420062004200040004004600;
        char_line[ 9 ]  = 244'h22482100fffe0000420004000800420042001000420042004200080008003a00;
        char_line[ 10 ] = 244'he248410001000000420002001000420042001000420042004200100010000200;
        char_line[ 11 ] = 244'h23f81ff001000000420042002000420042001000420042004200200020000200;
        char_line[ 12 ] = 244'h2248010001000000220042004200240024001000240022002400420042002400;
        char_line[ 13 ] = 244'h22480100010000001c003c007e0018001800100018001c0018007e007e001800;
        char_line[ 14 ] = 244'h23f87ffc05000000000000000000000000000000000000000000000000000000;
        char_line[ 15 ] = 244'h0208000002000000000000000000000000000000000000000000000000000000;
    end
end

//ROM读取
rom #(.rom_init("picture.hex")) picture_rom (
    .address(rom_address),
    .clock(vga_clk),
    .chip_enable(flag_enable_out2),
    .data(rom_data)
);


endmodule