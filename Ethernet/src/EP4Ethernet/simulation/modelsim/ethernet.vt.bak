// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "01/26/2021 12:56:52"
                                                                                
// Verilog Test Bench template for design : ethernet
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ethernet_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg eth_rx_clk;
reg [3:0] eth_rx_data;
reg eth_rxdv;
reg rst_n;
reg sys_clk;
// wires                                               
wire cnt;
wire eth_rst_n;
wire eth_tx_clk_125m;
wire [3:0]  eth_tx_data;
wire eth_tx_en;

// assign statements (if any)                          
ethernet i1 (
// port map - connection between master ports and signals/registers   
	.cnt(cnt),
	.eth_rst_n(eth_rst_n),
	.eth_rx_clk(eth_rx_clk),
	.eth_rx_data(eth_rx_data),
	.eth_rxdv(eth_rxdv),
	.eth_tx_clk_125m(eth_tx_clk_125m),
	.eth_tx_data(eth_tx_data),
	.eth_tx_en(eth_tx_en),
	.rst_n(rst_n),
	.sys_clk(sys_clk)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

