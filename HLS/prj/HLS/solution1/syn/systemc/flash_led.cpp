// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flash_led.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic flash_led::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flash_led::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> flash_led::ap_ST_fsm_state1 = "1";
const sc_lv<2> flash_led::ap_ST_fsm_state2 = "10";
const sc_lv<32> flash_led::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> flash_led::ap_const_lv1_0 = "0";
const sc_lv<32> flash_led::ap_const_lv32_1 = "1";
const sc_lv<27> flash_led::ap_const_lv27_0 = "000000000000000000000000000";
const sc_lv<1> flash_led::ap_const_lv1_1 = "1";
const sc_lv<27> flash_led::ap_const_lv27_5F5E100 = "101111101011110000100000000";
const sc_lv<27> flash_led::ap_const_lv27_1 = "1";
const sc_lv<27> flash_led::ap_const_lv27_5F5E0FE = "101111101011110000011111110";
const bool flash_led::ap_const_boolean_1 = true;

flash_led::flash_led(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( led_i_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_68_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_68_p2 );

    SC_METHOD(thread_exitcond_fu_68_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_51 );

    SC_METHOD(thread_i_V_fu_74_p2);
    sensitive << ( t_V_reg_51 );

    SC_METHOD(thread_led_i_V_ap_vld_in_sig);
    sensitive << ( led_i_V_ap_vld );
    sensitive << ( led_i_V_ap_vld_preg );

    SC_METHOD(thread_led_i_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( led_i_V_ap_vld );

    SC_METHOD(thread_led_i_V_in_sig);
    sensitive << ( led_i_V );
    sensitive << ( led_i_V_preg );
    sensitive << ( led_i_V_ap_vld );

    SC_METHOD(thread_led_o_V);
    sensitive << ( r_V_reg_86 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_68_p2 );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_led_o_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_68_p2 );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_r_V_fu_62_p2);
    sensitive << ( led_i_V_in_sig );

    SC_METHOD(thread_tmp_fu_80_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_51 );
    sensitive << ( exitcond_fu_68_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( led_i_V_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_68_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    led_i_V_preg = "0";
    led_i_V_ap_vld_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flash_led_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, led_o_V, "(port)led_o_V");
    sc_trace(mVcdFile, led_o_V_ap_vld, "(port)led_o_V_ap_vld");
    sc_trace(mVcdFile, led_i_V, "(port)led_i_V");
    sc_trace(mVcdFile, led_i_V_ap_vld, "(port)led_i_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, led_i_V_preg, "led_i_V_preg");
    sc_trace(mVcdFile, led_i_V_in_sig, "led_i_V_in_sig");
    sc_trace(mVcdFile, led_i_V_ap_vld_preg, "led_i_V_ap_vld_preg");
    sc_trace(mVcdFile, led_i_V_ap_vld_in_sig, "led_i_V_ap_vld_in_sig");
    sc_trace(mVcdFile, led_i_V_blk_n, "led_i_V_blk_n");
    sc_trace(mVcdFile, r_V_fu_62_p2, "r_V_fu_62_p2");
    sc_trace(mVcdFile, r_V_reg_86, "r_V_reg_86");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i_V_fu_74_p2, "i_V_fu_74_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, t_V_reg_51, "t_V_reg_51");
    sc_trace(mVcdFile, exitcond_fu_68_p2, "exitcond_fu_68_p2");
    sc_trace(mVcdFile, tmp_fu_80_p2, "tmp_fu_80_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("flash_led.hdltvin.dat");
    mHdltvoutHandle.open("flash_led.hdltvout.dat");
}

flash_led::~flash_led() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void flash_led::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        led_i_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_68_p2.read(), ap_const_lv1_1))) {
            led_i_V_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, led_i_V_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            led_i_V_ap_vld_preg = led_i_V_ap_vld.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        led_i_V_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, led_i_V_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            led_i_V_preg = led_i_V.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_68_p2.read()))) {
        t_V_reg_51 = i_V_fu_74_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, led_i_V_ap_vld_in_sig.read())))) {
        t_V_reg_51 = ap_const_lv27_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, led_i_V_ap_vld_in_sig.read())))) {
        r_V_reg_86 = r_V_fu_62_p2.read();
    }
}

void flash_led::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void flash_led::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void flash_led::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, led_i_V_ap_vld_in_sig.read()));
}

void flash_led::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_68_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void flash_led::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void flash_led::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_68_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void flash_led::thread_exitcond_fu_68_p2() {
    exitcond_fu_68_p2 = (!t_V_reg_51.read().is_01() || !ap_const_lv27_5F5E100.is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_51.read() == ap_const_lv27_5F5E100);
}

void flash_led::thread_i_V_fu_74_p2() {
    i_V_fu_74_p2 = (!t_V_reg_51.read().is_01() || !ap_const_lv27_1.is_01())? sc_lv<27>(): (sc_biguint<27>(t_V_reg_51.read()) + sc_biguint<27>(ap_const_lv27_1));
}

void flash_led::thread_led_i_V_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, led_i_V_ap_vld.read())) {
        led_i_V_ap_vld_in_sig = led_i_V_ap_vld.read();
    } else {
        led_i_V_ap_vld_in_sig = led_i_V_ap_vld_preg.read();
    }
}

void flash_led::thread_led_i_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        led_i_V_blk_n = led_i_V_ap_vld.read();
    } else {
        led_i_V_blk_n = ap_const_logic_1;
    }
}

void flash_led::thread_led_i_V_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, led_i_V_ap_vld.read())) {
        led_i_V_in_sig = led_i_V.read();
    } else {
        led_i_V_in_sig = led_i_V_preg.read();
    }
}

void flash_led::thread_led_o_V() {
    led_o_V = r_V_reg_86.read();
}

void flash_led::thread_led_o_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_68_p2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_80_p2.read(), ap_const_lv1_1))) {
        led_o_V_ap_vld = ap_const_logic_1;
    } else {
        led_o_V_ap_vld = ap_const_logic_0;
    }
}

void flash_led::thread_r_V_fu_62_p2() {
    r_V_fu_62_p2 = (led_i_V_in_sig.read() ^ ap_const_lv1_1);
}

void flash_led::thread_tmp_fu_80_p2() {
    tmp_fu_80_p2 = (!t_V_reg_51.read().is_01() || !ap_const_lv27_5F5E0FE.is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_51.read() == ap_const_lv27_5F5E0FE);
}

void flash_led::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, led_i_V_ap_vld_in_sig.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_68_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void flash_led::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"led_o_V\" :  \"" << led_o_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"led_o_V_ap_vld\" :  \"" << led_o_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"led_i_V\" :  \"" << led_i_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"led_i_V_ap_vld\" :  \"" << led_i_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

