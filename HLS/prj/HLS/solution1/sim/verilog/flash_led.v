// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="flash_led,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.316000,HLS_SYN_LAT=101,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=12,HLS_SYN_LUT=34,HLS_VERSION=2018_3}" *)

module flash_led (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        led_o_V,
        led_o_V_ap_vld,
        led_i_V,
        led_i_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] led_o_V;
output   led_o_V_ap_vld;
input  [0:0] led_i_V;
input   led_i_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg led_o_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] led_i_V_preg;
reg   [0:0] led_i_V_in_sig;
reg    led_i_V_ap_vld_preg;
reg    led_i_V_ap_vld_in_sig;
reg    led_i_V_blk_n;
wire   [0:0] r_V_fu_62_p2;
reg   [0:0] r_V_reg_86;
reg    ap_block_state1;
wire   [6:0] i_V_fu_74_p2;
wire    ap_CS_fsm_state2;
reg   [6:0] t_V_reg_51;
wire   [0:0] exitcond_fu_68_p2;
wire   [0:0] tmp_fu_80_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 led_i_V_preg = 1'd0;
#0 led_i_V_ap_vld_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        led_i_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((exitcond_fu_68_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            led_i_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (led_i_V_ap_vld == 1'b1))) begin
            led_i_V_ap_vld_preg <= led_i_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        led_i_V_preg <= 1'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (led_i_V_ap_vld == 1'b1))) begin
            led_i_V_preg <= led_i_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_68_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_reg_51 <= i_V_fu_74_p2;
    end else if ((~((ap_start == 1'b0) | (led_i_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_51 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (led_i_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_reg_86 <= r_V_fu_62_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_68_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_68_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((led_i_V_ap_vld == 1'b1)) begin
        led_i_V_ap_vld_in_sig = led_i_V_ap_vld;
    end else begin
        led_i_V_ap_vld_in_sig = led_i_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        led_i_V_blk_n = led_i_V_ap_vld;
    end else begin
        led_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((led_i_V_ap_vld == 1'b1)) begin
        led_i_V_in_sig = led_i_V;
    end else begin
        led_i_V_in_sig = led_i_V_preg;
    end
end

always @ (*) begin
    if (((tmp_fu_80_p2 == 1'd1) & (exitcond_fu_68_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        led_o_V_ap_vld = 1'b1;
    end else begin
        led_o_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (led_i_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_68_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (led_i_V_ap_vld_in_sig == 1'b0));
end

assign exitcond_fu_68_p2 = ((t_V_reg_51 == 7'd100) ? 1'b1 : 1'b0);

assign i_V_fu_74_p2 = (t_V_reg_51 + 7'd1);

assign led_o_V = r_V_reg_86;

assign r_V_fu_62_p2 = (led_i_V_in_sig ^ 1'd1);

assign tmp_fu_80_p2 = ((t_V_reg_51 == 7'd98) ? 1'b1 : 1'b0);

endmodule //flash_led
